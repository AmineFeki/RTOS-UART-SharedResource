
RTOS-UartSharedResource_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c24  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08009ec4  08009ec4  00019ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a058  0800a058  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a058  0800a058  0001a058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a060  0800a060  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a060  0800a060  0001a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a064  0800a064  0001a064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  24000000  0800a068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b2c  240000c8  0800a130  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004bf4  0800a130  00024bf4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023157  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b9f  00000000  00000000  0004324d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  00046df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a8  00000000  00000000  000486e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b440  00000000  00000000  00049e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef5b  00000000  00000000  000852c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018e705  00000000  00000000  000a4223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00232928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d14  00000000  00000000  00232978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c8 	.word	0x240000c8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009eac 	.word	0x08009eac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000cc 	.word	0x240000cc
 80002dc:	08009eac 	.word	0x08009eac

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <SystemInit+0xfc>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ee:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <SystemInit+0xfc>)
 80005f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0xfc>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a38      	ldr	r2, [pc, #224]	; (80006e0 <SystemInit+0xfc>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000604:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <SystemInit+0x100>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	2b06      	cmp	r3, #6
 800060e:	d807      	bhi.n	8000620 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <SystemInit+0x100>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f023 030f 	bic.w	r3, r3, #15
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x100>)
 800061a:	f043 0307 	orr.w	r3, r3, #7
 800061e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <SystemInit+0x104>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a30      	ldr	r2, [pc, #192]	; (80006e8 <SystemInit+0x104>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x104>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <SystemInit+0x104>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	492c      	ldr	r1, [pc, #176]	; (80006e8 <SystemInit+0x104>)
 8000638:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <SystemInit+0x108>)
 800063a:	4013      	ands	r3, r2
 800063c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <SystemInit+0x100>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	2b00      	cmp	r3, #0
 8000648:	d007      	beq.n	800065a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <SystemInit+0x100>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f023 030f 	bic.w	r3, r3, #15
 8000652:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <SystemInit+0x100>)
 8000654:	f043 0307 	orr.w	r3, r3, #7
 8000658:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemInit+0x104>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <SystemInit+0x104>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemInit+0x104>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <SystemInit+0x104>)
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <SystemInit+0x10c>)
 8000670:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemInit+0x104>)
 8000674:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <SystemInit+0x110>)
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <SystemInit+0x104>)
 800067a:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <SystemInit+0x114>)
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <SystemInit+0x104>)
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <SystemInit+0x104>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <SystemInit+0x114>)
 8000688:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <SystemInit+0x104>)
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x104>)
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <SystemInit+0x114>)
 8000694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <SystemInit+0x104>)
 8000698:	2200      	movs	r2, #0
 800069a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <SystemInit+0x104>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <SystemInit+0x104>)
 80006a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <SystemInit+0x104>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x118>)
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <SystemInit+0x118>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x11c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x120>)
 80006c0:	4013      	ands	r3, r2
 80006c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006c6:	d202      	bcs.n	80006ce <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <SystemInit+0x124>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <SystemInit+0x128>)
 80006d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006d4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	52002000 	.word	0x52002000
 80006e8:	58024400 	.word	0x58024400
 80006ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f0:	02020200 	.word	0x02020200
 80006f4:	01ff0000 	.word	0x01ff0000
 80006f8:	01010280 	.word	0x01010280
 80006fc:	580000c0 	.word	0x580000c0
 8000700:	5c001000 	.word	0x5c001000
 8000704:	ffff0000 	.word	0xffff0000
 8000708:	51008108 	.word	0x51008108
 800070c:	52004000 	.word	0x52004000

08000710 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000714:	f000 fbb4 	bl	8000e80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000718:	f000 f858 	bl	80007cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800071c:	f000 f90c 	bl	8000938 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000720:	f000 f8be 	bl	80008a0 <MX_USART3_UART_Init>
	//  FEKI_UART_Transmit(&huart3, (uint8_t*)RTOS_TaskMsg4_ac, TX_BUFFER_SIZE, TX_MAX_DELAY);
	//  while(1);
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000724:	f005 ffd8 	bl	80066d8 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of Mutex1 */
	Mutex1Handle = osMutexNew(&Mutex1_attributes);
 8000728:	4818      	ldr	r0, [pc, #96]	; (800078c <main+0x7c>)
 800072a:	f006 f8cc 	bl	80068c6 <osMutexNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <main+0x80>)
 8000732:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of Semaphore1 */
	Semaphore1Handle = osSemaphoreNew(1, 1, &Semaphore1_attributes);
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <main+0x84>)
 8000736:	2101      	movs	r1, #1
 8000738:	2001      	movs	r0, #1
 800073a:	f006 f9d2 	bl	8006ae2 <osSemaphoreNew>
 800073e:	4603      	mov	r3, r0
 8000740:	4a15      	ldr	r2, [pc, #84]	; (8000798 <main+0x88>)
 8000742:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Task1 */
	Task1Handle = osThreadNew(Task1Function, NULL, &Task1_attributes);
 8000744:	4a15      	ldr	r2, [pc, #84]	; (800079c <main+0x8c>)
 8000746:	2100      	movs	r1, #0
 8000748:	4815      	ldr	r0, [pc, #84]	; (80007a0 <main+0x90>)
 800074a:	f006 f80f 	bl	800676c <osThreadNew>
 800074e:	4603      	mov	r3, r0
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <main+0x94>)
 8000752:	6013      	str	r3, [r2, #0]

	/* creation of Task2 */
	Task2Handle = osThreadNew(Task2Function, NULL, &Task2_attributes);
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <main+0x98>)
 8000756:	2100      	movs	r1, #0
 8000758:	4814      	ldr	r0, [pc, #80]	; (80007ac <main+0x9c>)
 800075a:	f006 f807 	bl	800676c <osThreadNew>
 800075e:	4603      	mov	r3, r0
 8000760:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <main+0xa0>)
 8000762:	6013      	str	r3, [r2, #0]

	/* creation of Task3 */
	Task3Handle = osThreadNew(Task3Function, NULL, &Task3_attributes);
 8000764:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <main+0xa4>)
 8000766:	2100      	movs	r1, #0
 8000768:	4813      	ldr	r0, [pc, #76]	; (80007b8 <main+0xa8>)
 800076a:	f005 ffff 	bl	800676c <osThreadNew>
 800076e:	4603      	mov	r3, r0
 8000770:	4a12      	ldr	r2, [pc, #72]	; (80007bc <main+0xac>)
 8000772:	6013      	str	r3, [r2, #0]

	/* creation of Task4 */
	Task4Handle = osThreadNew(Task4Function, NULL, &Task4_attributes);
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <main+0xb0>)
 8000776:	2100      	movs	r1, #0
 8000778:	4812      	ldr	r0, [pc, #72]	; (80007c4 <main+0xb4>)
 800077a:	f005 fff7 	bl	800676c <osThreadNew>
 800077e:	4603      	mov	r3, r0
 8000780:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <main+0xb8>)
 8000782:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000784:	f005 ffcc 	bl	8006720 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000788:	e7fe      	b.n	8000788 <main+0x78>
 800078a:	bf00      	nop
 800078c:	08009fb0 	.word	0x08009fb0
 8000790:	24000184 	.word	0x24000184
 8000794:	08009fc0 	.word	0x08009fc0
 8000798:	24000188 	.word	0x24000188
 800079c:	08009f20 	.word	0x08009f20
 80007a0:	08000a49 	.word	0x08000a49
 80007a4:	24000174 	.word	0x24000174
 80007a8:	08009f44 	.word	0x08009f44
 80007ac:	08000aa5 	.word	0x08000aa5
 80007b0:	24000178 	.word	0x24000178
 80007b4:	08009f68 	.word	0x08009f68
 80007b8:	08000b01 	.word	0x08000b01
 80007bc:	2400017c 	.word	0x2400017c
 80007c0:	08009f8c 	.word	0x08009f8c
 80007c4:	08000b5d 	.word	0x08000b5d
 80007c8:	24000180 	.word	0x24000180

080007cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09c      	sub	sp, #112	; 0x70
 80007d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	224c      	movs	r2, #76	; 0x4c
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f009 fa9c 	bl	8009d18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2220      	movs	r2, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f009 fa96 	bl	8009d18 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007ec:	2004      	movs	r0, #4
 80007ee:	f001 fba3 	bl	8001f38 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <SystemClock_Config+0xcc>)
 80007f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fa:	4a27      	ldr	r2, [pc, #156]	; (8000898 <SystemClock_Config+0xcc>)
 80007fc:	f023 0301 	bic.w	r3, r3, #1
 8000800:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <SystemClock_Config+0xcc>)
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	4b23      	ldr	r3, [pc, #140]	; (800089c <SystemClock_Config+0xd0>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000814:	4a21      	ldr	r2, [pc, #132]	; (800089c <SystemClock_Config+0xd0>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <SystemClock_Config+0xd0>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000828:	bf00      	nop
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <SystemClock_Config+0xd0>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000836:	d1f8      	bne.n	800082a <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	2302      	movs	r3, #2
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800083c:	2301      	movs	r3, #1
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000844:	2300      	movs	r3, #0
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fbcd 	bl	8001fec <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x90>
	{
		Error_Handler();
 8000858:	f000 f9c0 	bl	8000bdc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	233f      	movs	r3, #63	; 0x3f
 800085e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2101      	movs	r1, #1
 8000880:	4618      	mov	r0, r3
 8000882:	f001 ffe1 	bl	8002848 <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800088c:	f000 f9a6 	bl	8000bdc <Error_Handler>
	}
}
 8000890:	bf00      	nop
 8000892:	3770      	adds	r7, #112	; 0x70
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	58000400 	.word	0x58000400
 800089c:	58024800 	.word	0x58024800

080008a0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008a6:	4a23      	ldr	r2, [pc, #140]	; (8000934 <MX_USART3_UART_Init+0x94>)
 80008a8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 1200;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008ac:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80008b0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e8:	4811      	ldr	r0, [pc, #68]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008ea:	f004 f9bd 	bl	8004c68 <HAL_UART_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 80008f4:	f000 f972 	bl	8000bdc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008fc:	f005 fdde 	bl	80064bc <HAL_UARTEx_SetTxFifoThreshold>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART3_UART_Init+0x6a>
	{
		Error_Handler();
 8000906:	f000 f969 	bl	8000bdc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	; (8000930 <MX_USART3_UART_Init+0x90>)
 800090e:	f005 fe13 	bl	8006538 <HAL_UARTEx_SetRxFifoThreshold>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 8000918:	f000 f960 	bl	8000bdc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_USART3_UART_Init+0x90>)
 800091e:	f005 fd94 	bl	800644a <HAL_UARTEx_DisableFifoMode>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8000928:	f000 f958 	bl	8000bdc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	240000e4 	.word	0x240000e4
 8000934:	40004800 	.word	0x40004800

08000938 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_GPIO_Init+0x30>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	4a08      	ldr	r2, [pc, #32]	; (8000968 <MX_GPIO_Init+0x30>)
 8000946:	f043 0308 	orr.w	r3, r3, #8
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_GPIO_Init+0x30>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000954:	f003 0308 	and.w	r3, r3, #8
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]

}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	58024400 	.word	0x58024400

0800096c <FEKI_UART_Transmit>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef FEKI_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af02      	add	r7, sp, #8
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	4613      	mov	r3, r2
 800097a:	80fb      	strh	r3, [r7, #6]
	const uint16_t *pdata16bits;
	uint32_t tickstart;

	/* Check that a Tx process is not already ongoing */

	if ((pData == NULL) || (Size == 0U))
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <FEKI_UART_Transmit+0x1c>
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d101      	bne.n	800098c <FEKI_UART_Transmit+0x20>
	{
		return  HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	e059      	b.n	8000a40 <FEKI_UART_Transmit+0xd4>
	}

	//__HAL_LOCK(huart);

	huart->ErrorCode = HAL_UART_ERROR_NONE;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2200      	movs	r2, #0
 8000990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	huart->gState = HAL_UART_STATE_BUSY_TX;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2221      	movs	r2, #33	; 0x21
 8000998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Init tickstart for timeout management */
	tickstart = HAL_GetTick();
 800099c:	f000 fac0 	bl	8000f20 <HAL_GetTick>
 80009a0:	6178      	str	r0, [r7, #20]

	huart->TxXferSize  = Size;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	88fa      	ldrh	r2, [r7, #6]
 80009a6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	huart->TxXferCount = Size;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	88fa      	ldrh	r2, [r7, #6]
 80009ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	/* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
	if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009ba:	d108      	bne.n	80009ce <FEKI_UART_Transmit+0x62>
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d104      	bne.n	80009ce <FEKI_UART_Transmit+0x62>
	{
		pdata8bits  = NULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
		pdata16bits = (const uint16_t *) pData;
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	e003      	b.n	80009d6 <FEKI_UART_Transmit+0x6a>
	}
	else
	{
		pdata8bits  = pData;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	61fb      	str	r3, [r7, #28]
		pdata16bits = NULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
	}

	//__HAL_UNLOCK(huart);

	while (huart->TxXferCount > 0U)
 80009d6:	e02c      	b.n	8000a32 <FEKI_UART_Transmit+0xc6>
	{
		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	2200      	movs	r2, #0
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f005 fba3 	bl	800612e <UART_WaitOnFlagUntilTimeout>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <FEKI_UART_Transmit+0x86>
		{
			return HAL_TIMEOUT;
 80009ee:	2303      	movs	r3, #3
 80009f0:	e026      	b.n	8000a40 <FEKI_UART_Transmit+0xd4>
		}
		if (pdata8bits == NULL)
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d10b      	bne.n	8000a10 <FEKI_UART_Transmit+0xa4>
		{
			huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
			pdata16bits++;
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
 8000a0e:	e007      	b.n	8000a20 <FEKI_UART_Transmit+0xb4>
		}
		else
		{
			huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	781a      	ldrb	r2, [r3, #0]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
			pdata8bits++;
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	61fb      	str	r3, [r7, #28]
		}
		huart->TxXferCount--;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	while (huart->TxXferCount > 0U)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1cc      	bne.n	80009d8 <FEKI_UART_Transmit+0x6c>
	//    }

	/* At end of Tx process, restore huart->gState to Ready */
	//huart->gState = HAL_UART_STATE_READY;

	return HAL_OK;
 8000a3e:	2300      	movs	r3, #0

}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <Task1Function>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task1Function */
void Task1Function(void *argument)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t occurence1 = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		osDelay(PERIODICITY_TASK1);
 8000a54:	2004      	movs	r0, #4
 8000a56:	f005 ff1b 	bl	8006890 <osDelay>
		occurence1 ++ ;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
#if USE_SEMAPHORE
		if (osOK == osSemaphoreAcquire(Semaphore1Handle, portMAX_DELAY))
#endif
#if USE_MUTEX
			if (osOK == osMutexAcquire(Mutex1Handle, portMAX_DELAY))
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <Task1Function+0x50>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f005 ffb2 	bl	80069d2 <osMutexAcquire>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1ef      	bne.n	8000a54 <Task1Function+0xc>
#endif
			{
				RTOS_TaskMsg1_ac[18] = (char)(occurence1 + 48);
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	3330      	adds	r3, #48	; 0x30
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <Task1Function+0x54>)
 8000a7c:	749a      	strb	r2, [r3, #18]
				FEKI_UART_Transmit(&huart3, (uint8_t*)RTOS_TaskMsg1_ac, TX_BUFFER_SIZE, TX_MAX_DELAY);
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	2214      	movs	r2, #20
 8000a84:	4905      	ldr	r1, [pc, #20]	; (8000a9c <Task1Function+0x54>)
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <Task1Function+0x58>)
 8000a88:	f7ff ff70 	bl	800096c <FEKI_UART_Transmit>
#if USE_SEMAPHORE
				osSemaphoreRelease(Semaphore1Handle);
#endif

#if USE_MUTEX
				osMutexRelease(Mutex1Handle);
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <Task1Function+0x50>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f005 ffe9 	bl	8006a68 <osMutexRelease>
		osDelay(PERIODICITY_TASK1);
 8000a96:	e7dd      	b.n	8000a54 <Task1Function+0xc>
 8000a98:	24000184 	.word	0x24000184
 8000a9c:	24000008 	.word	0x24000008
 8000aa0:	240000e4 	.word	0x240000e4

08000aa4 <Task2Function>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task2Function */
void Task2Function(void *argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task2Function */
	uint8_t occurence2 = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		osDelay(PERIODICITY_TASK2);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f005 feed 	bl	8006890 <osDelay>
		occurence2 ++ ;
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
#if USE_SEMAPHORE
		if (osOK == osSemaphoreAcquire(Semaphore1Handle, portMAX_DELAY))
#endif
#if USE_MUTEX
			if (osOK == osMutexAcquire(Mutex1Handle, portMAX_DELAY))
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <Task2Function+0x50>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 ff84 	bl	80069d2 <osMutexAcquire>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1ef      	bne.n	8000ab0 <Task2Function+0xc>
#endif
			{
				RTOS_TaskMsg2_ac[18] = (char)(occurence2 + 48);
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	3330      	adds	r3, #48	; 0x30
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <Task2Function+0x54>)
 8000ad8:	749a      	strb	r2, [r3, #18]
				FEKI_UART_Transmit(&huart3, (uint8_t*)RTOS_TaskMsg2_ac, TX_BUFFER_SIZE, TX_MAX_DELAY);
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	2214      	movs	r2, #20
 8000ae0:	4905      	ldr	r1, [pc, #20]	; (8000af8 <Task2Function+0x54>)
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <Task2Function+0x58>)
 8000ae4:	f7ff ff42 	bl	800096c <FEKI_UART_Transmit>
#if USE_SEMAPHORE
				osSemaphoreRelease(Semaphore1Handle);
#endif

#if USE_MUTEX
				osMutexRelease(Mutex1Handle);
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <Task2Function+0x50>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f005 ffbb 	bl	8006a68 <osMutexRelease>
		osDelay(PERIODICITY_TASK2);
 8000af2:	e7dd      	b.n	8000ab0 <Task2Function+0xc>
 8000af4:	24000184 	.word	0x24000184
 8000af8:	2400001c 	.word	0x2400001c
 8000afc:	240000e4 	.word	0x240000e4

08000b00 <Task3Function>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task3Function */
void Task3Function(void *argument)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task3Function */
	uint8_t occurence3 = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		osDelay(PERIODICITY_TASK3);
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f005 febf 	bl	8006890 <osDelay>
		occurence3 ++ ;
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	3301      	adds	r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
#if USE_SEMAPHORE
		if (osOK == osSemaphoreAcquire(Semaphore1Handle, portMAX_DELAY))
#endif
#if USE_MUTEX
			if (osOK == osMutexAcquire(Mutex1Handle, portMAX_DELAY))
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <Task3Function+0x50>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	4618      	mov	r0, r3
 8000b22:	f005 ff56 	bl	80069d2 <osMutexAcquire>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1ef      	bne.n	8000b0c <Task3Function+0xc>
#endif
			{
				RTOS_TaskMsg3_ac[18] = (char)(occurence3 + 48);
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	3330      	adds	r3, #48	; 0x30
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <Task3Function+0x54>)
 8000b34:	749a      	strb	r2, [r3, #18]
				FEKI_UART_Transmit(&huart3, (uint8_t*)RTOS_TaskMsg3_ac, TX_BUFFER_SIZE, TX_MAX_DELAY);
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	2214      	movs	r2, #20
 8000b3c:	4905      	ldr	r1, [pc, #20]	; (8000b54 <Task3Function+0x54>)
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <Task3Function+0x58>)
 8000b40:	f7ff ff14 	bl	800096c <FEKI_UART_Transmit>
#if USE_SEMAPHORE
				osSemaphoreRelease(Semaphore1Handle);
#endif

#if USE_MUTEX
				osMutexRelease(Mutex1Handle);
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <Task3Function+0x50>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f005 ff8d 	bl	8006a68 <osMutexRelease>
		osDelay(PERIODICITY_TASK3);
 8000b4e:	e7dd      	b.n	8000b0c <Task3Function+0xc>
 8000b50:	24000184 	.word	0x24000184
 8000b54:	24000030 	.word	0x24000030
 8000b58:	240000e4 	.word	0x240000e4

08000b5c <Task4Function>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task4Function */
void Task4Function(void *argument)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task4Function */
	uint8_t occurence4 = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		osDelay(PERIODICITY_TASK4);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f005 fe91 	bl	8006890 <osDelay>
		occurence4 ++ ;
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	3301      	adds	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
#if USE_SEMAPHORE
		if (osOK == osSemaphoreAcquire(Semaphore1Handle, portMAX_DELAY))
#endif
#if USE_MUTEX
			if (osOK == osMutexAcquire(Mutex1Handle, portMAX_DELAY))
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <Task4Function+0x50>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f005 ff28 	bl	80069d2 <osMutexAcquire>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1ef      	bne.n	8000b68 <Task4Function+0xc>
#endif
			{
				RTOS_TaskMsg4_ac[18] = (char)(occurence4 + 48);
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	3330      	adds	r3, #48	; 0x30
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <Task4Function+0x54>)
 8000b90:	749a      	strb	r2, [r3, #18]
				FEKI_UART_Transmit(&huart3, (uint8_t*)RTOS_TaskMsg4_ac, TX_BUFFER_SIZE, TX_MAX_DELAY);
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	2214      	movs	r2, #20
 8000b98:	4905      	ldr	r1, [pc, #20]	; (8000bb0 <Task4Function+0x54>)
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <Task4Function+0x58>)
 8000b9c:	f7ff fee6 	bl	800096c <FEKI_UART_Transmit>
#if USE_SEMAPHORE
				osSemaphoreRelease(Semaphore1Handle);
#endif

#if USE_MUTEX
				osMutexRelease(Mutex1Handle);
 8000ba0:	4b02      	ldr	r3, [pc, #8]	; (8000bac <Task4Function+0x50>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f005 ff5f 	bl	8006a68 <osMutexRelease>
		osDelay(PERIODICITY_TASK4);
 8000baa:	e7dd      	b.n	8000b68 <Task4Function+0xc>
 8000bac:	24000184 	.word	0x24000184
 8000bb0:	24000044 	.word	0x24000044
 8000bb4:	240000e4 	.word	0x240000e4

08000bb8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d101      	bne.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000bca:	f000 f995 	bl	8000ef8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40001000 	.word	0x40001000

08000bdc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_MspInit+0x38>)
 8000bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_MspInit+0x38>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_MspInit+0x38>)
 8000c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f06f 0001 	mvn.w	r0, #1
 8000c14:	f000 fa54 	bl	80010c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	58024400 	.word	0x58024400

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0b8      	sub	sp, #224	; 0xe0
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	22bc      	movs	r2, #188	; 0xbc
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f009 f867 	bl	8009d18 <memset>
  if(huart->Instance==USART3)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <HAL_UART_MspInit+0xd0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d14a      	bne.n	8000cea <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c54:	2302      	movs	r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 f9be 	bl	8002fe4 <HAL_RCCEx_PeriphCLKConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c6e:	f7ff ffb5 	bl	8000bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <HAL_UART_MspInit+0xd4>)
 8000c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c78:	4a1f      	ldr	r2, [pc, #124]	; (8000cf8 <HAL_UART_MspInit+0xd4>)
 8000c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <HAL_UART_MspInit+0xd4>)
 8000c84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_UART_MspInit+0xd4>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0xd4>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_UART_MspInit+0xd4>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_UART_MspInit+0xd8>)
 8000cd6:	f000 ff7f 	bl	8001bd8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2105      	movs	r1, #5
 8000cde:	2027      	movs	r0, #39	; 0x27
 8000ce0:	f000 f9ee 	bl	80010c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ce4:	2027      	movs	r0, #39	; 0x27
 8000ce6:	f000 fa05 	bl	80010f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	37e0      	adds	r7, #224	; 0xe0
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40004800 	.word	0x40004800
 8000cf8:	58024400 	.word	0x58024400
 8000cfc:	58020c00 	.word	0x58020c00

08000d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b090      	sub	sp, #64	; 0x40
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b0f      	cmp	r3, #15
 8000d0c:	d827      	bhi.n	8000d5e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	2036      	movs	r0, #54	; 0x36
 8000d14:	f000 f9d4 	bl	80010c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d18:	2036      	movs	r0, #54	; 0x36
 8000d1a:	f000 f9eb 	bl	80010f4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d1e:	4a29      	ldr	r2, [pc, #164]	; (8000dc4 <HAL_InitTick+0xc4>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <HAL_InitTick+0xc8>)
 8000d26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d2a:	4a27      	ldr	r2, [pc, #156]	; (8000dc8 <HAL_InitTick+0xc8>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <HAL_InitTick+0xc8>)
 8000d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d42:	f107 0210 	add.w	r2, r7, #16
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 f907 	bl	8002f60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d106      	bne.n	8000d6a <HAL_InitTick+0x6a>
 8000d5c:	e001      	b.n	8000d62 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e02b      	b.n	8000dba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d62:	f002 f8d1 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 8000d66:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000d68:	e004      	b.n	8000d74 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d6a:	f002 f8cd 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <HAL_InitTick+0xcc>)
 8000d78:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7c:	0c9b      	lsrs	r3, r3, #18
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_InitTick+0xd4>)
 8000d86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d8e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d90:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d94:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000da2:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000da4:	f003 fc86 	bl	80046b4 <HAL_TIM_Base_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d104      	bne.n	8000db8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000db0:	f003 fce2 	bl	8004778 <HAL_TIM_Base_Start_IT>
 8000db4:	4603      	mov	r3, r0
 8000db6:	e000      	b.n	8000dba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3740      	adds	r7, #64	; 0x40
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	24000058 	.word	0x24000058
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	2400018c 	.word	0x2400018c
 8000dd4:	40001000 	.word	0x40001000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <USART3_IRQHandler+0x10>)
 8000e0a:	f003 ff7d 	bl	8004d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	240000e4 	.word	0x240000e4

08000e18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <TIM6_DAC_IRQHandler+0x10>)
 8000e1e:	f003 fd23 	bl	8004868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2400018c 	.word	0x2400018c

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e30:	f7ff fbd8 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	; (8000e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	; (8000e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f008 ff29 	bl	8009cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fc57 	bl	8000710 <main>
  bx  lr
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e6c:	240000c8 	.word	0x240000c8
  ldr r2, =_sidata
 8000e70:	0800a068 	.word	0x0800a068
  ldr r2, =_sbss
 8000e74:	240000c8 	.word	0x240000c8
  ldr r4, =_ebss
 8000e78:	24004bf4 	.word	0x24004bf4

08000e7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC3_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e86:	2003      	movs	r0, #3
 8000e88:	f000 f90f 	bl	80010aa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e8c:	f001 fe92 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8000e90:	4602      	mov	r2, r0
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_Init+0x68>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	0a1b      	lsrs	r3, r3, #8
 8000e98:	f003 030f 	and.w	r3, r3, #15
 8000e9c:	4913      	ldr	r1, [pc, #76]	; (8000eec <HAL_Init+0x6c>)
 8000e9e:	5ccb      	ldrb	r3, [r1, r3]
 8000ea0:	f003 031f 	and.w	r3, r3, #31
 8000ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_Init+0x68>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <HAL_Init+0x6c>)
 8000eb4:	5cd3      	ldrb	r3, [r2, r3]
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <HAL_Init+0x70>)
 8000ec2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_Init+0x74>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eca:	200f      	movs	r0, #15
 8000ecc:	f7ff ff18 	bl	8000d00 <HAL_InitTick>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e002      	b.n	8000ee0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000eda:	f7ff fe85 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	08009f10 	.word	0x08009f10
 8000ef0:	24000004 	.word	0x24000004
 8000ef4:	24000000 	.word	0x24000000

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	2400005c 	.word	0x2400005c
 8000f1c:	240001d8 	.word	0x240001d8

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	240001d8 	.word	0x240001d8

08000f38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetREVID+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	0c1b      	lsrs	r3, r3, #16
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	5c001000 	.word	0x5c001000

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <__NVIC_SetPriorityGrouping+0x40>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <__NVIC_SetPriorityGrouping+0x40>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00
 8000f94:	05fa0000 	.word	0x05fa0000

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <__NVIC_EnableIRQ+0x38>)
 8000fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff4c 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ce:	f7ff ff63 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 80010d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	6978      	ldr	r0, [r7, #20]
 80010da:	f7ff ffb3 	bl	8001044 <NVIC_EncodePriority>
 80010de:	4602      	mov	r2, r0
 80010e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff82 	bl	8000ff0 <__NVIC_SetPriority>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff56 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ff02 	bl	8000f20 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e2dc      	b.n	80016e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d008      	beq.n	8001146 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e2cd      	b.n	80016e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a76      	ldr	r2, [pc, #472]	; (8001324 <HAL_DMA_Abort+0x214>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d04a      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a74      	ldr	r2, [pc, #464]	; (8001328 <HAL_DMA_Abort+0x218>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d045      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a73      	ldr	r2, [pc, #460]	; (800132c <HAL_DMA_Abort+0x21c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d040      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a71      	ldr	r2, [pc, #452]	; (8001330 <HAL_DMA_Abort+0x220>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d03b      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a70      	ldr	r2, [pc, #448]	; (8001334 <HAL_DMA_Abort+0x224>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d036      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a6e      	ldr	r2, [pc, #440]	; (8001338 <HAL_DMA_Abort+0x228>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d031      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a6d      	ldr	r2, [pc, #436]	; (800133c <HAL_DMA_Abort+0x22c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d02c      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a6b      	ldr	r2, [pc, #428]	; (8001340 <HAL_DMA_Abort+0x230>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d027      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6a      	ldr	r2, [pc, #424]	; (8001344 <HAL_DMA_Abort+0x234>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d022      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a68      	ldr	r2, [pc, #416]	; (8001348 <HAL_DMA_Abort+0x238>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01d      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a67      	ldr	r2, [pc, #412]	; (800134c <HAL_DMA_Abort+0x23c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d018      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a65      	ldr	r2, [pc, #404]	; (8001350 <HAL_DMA_Abort+0x240>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a64      	ldr	r2, [pc, #400]	; (8001354 <HAL_DMA_Abort+0x244>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00e      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a62      	ldr	r2, [pc, #392]	; (8001358 <HAL_DMA_Abort+0x248>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d009      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a61      	ldr	r2, [pc, #388]	; (800135c <HAL_DMA_Abort+0x24c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d004      	beq.n	80011e6 <HAL_DMA_Abort+0xd6>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a5f      	ldr	r2, [pc, #380]	; (8001360 <HAL_DMA_Abort+0x250>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_DMA_Abort+0xda>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_DMA_Abort+0xdc>
 80011ea:	2300      	movs	r3, #0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d013      	beq.n	8001218 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 021e 	bic.w	r2, r2, #30
 80011fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800120e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	e00a      	b.n	800122e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 020e 	bic.w	r2, r2, #14
 8001226:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a3c      	ldr	r2, [pc, #240]	; (8001324 <HAL_DMA_Abort+0x214>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d072      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a3a      	ldr	r2, [pc, #232]	; (8001328 <HAL_DMA_Abort+0x218>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d06d      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a39      	ldr	r2, [pc, #228]	; (800132c <HAL_DMA_Abort+0x21c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d068      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a37      	ldr	r2, [pc, #220]	; (8001330 <HAL_DMA_Abort+0x220>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d063      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a36      	ldr	r2, [pc, #216]	; (8001334 <HAL_DMA_Abort+0x224>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d05e      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a34      	ldr	r2, [pc, #208]	; (8001338 <HAL_DMA_Abort+0x228>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d059      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a33      	ldr	r2, [pc, #204]	; (800133c <HAL_DMA_Abort+0x22c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d054      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a31      	ldr	r2, [pc, #196]	; (8001340 <HAL_DMA_Abort+0x230>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d04f      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a30      	ldr	r2, [pc, #192]	; (8001344 <HAL_DMA_Abort+0x234>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d04a      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <HAL_DMA_Abort+0x238>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d045      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a2d      	ldr	r2, [pc, #180]	; (800134c <HAL_DMA_Abort+0x23c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d040      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a2b      	ldr	r2, [pc, #172]	; (8001350 <HAL_DMA_Abort+0x240>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d03b      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a2a      	ldr	r2, [pc, #168]	; (8001354 <HAL_DMA_Abort+0x244>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d036      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a28      	ldr	r2, [pc, #160]	; (8001358 <HAL_DMA_Abort+0x248>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d031      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a27      	ldr	r2, [pc, #156]	; (800135c <HAL_DMA_Abort+0x24c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d02c      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a25      	ldr	r2, [pc, #148]	; (8001360 <HAL_DMA_Abort+0x250>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d027      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a24      	ldr	r2, [pc, #144]	; (8001364 <HAL_DMA_Abort+0x254>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d022      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a22      	ldr	r2, [pc, #136]	; (8001368 <HAL_DMA_Abort+0x258>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01d      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a21      	ldr	r2, [pc, #132]	; (800136c <HAL_DMA_Abort+0x25c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d018      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <HAL_DMA_Abort+0x260>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <HAL_DMA_Abort+0x264>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d00e      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <HAL_DMA_Abort+0x268>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d009      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1b      	ldr	r2, [pc, #108]	; (800137c <HAL_DMA_Abort+0x26c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d004      	beq.n	800131e <HAL_DMA_Abort+0x20e>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <HAL_DMA_Abort+0x270>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d132      	bne.n	8001384 <HAL_DMA_Abort+0x274>
 800131e:	2301      	movs	r3, #1
 8001320:	e031      	b.n	8001386 <HAL_DMA_Abort+0x276>
 8001322:	bf00      	nop
 8001324:	40020010 	.word	0x40020010
 8001328:	40020028 	.word	0x40020028
 800132c:	40020040 	.word	0x40020040
 8001330:	40020058 	.word	0x40020058
 8001334:	40020070 	.word	0x40020070
 8001338:	40020088 	.word	0x40020088
 800133c:	400200a0 	.word	0x400200a0
 8001340:	400200b8 	.word	0x400200b8
 8001344:	40020410 	.word	0x40020410
 8001348:	40020428 	.word	0x40020428
 800134c:	40020440 	.word	0x40020440
 8001350:	40020458 	.word	0x40020458
 8001354:	40020470 	.word	0x40020470
 8001358:	40020488 	.word	0x40020488
 800135c:	400204a0 	.word	0x400204a0
 8001360:	400204b8 	.word	0x400204b8
 8001364:	58025408 	.word	0x58025408
 8001368:	5802541c 	.word	0x5802541c
 800136c:	58025430 	.word	0x58025430
 8001370:	58025444 	.word	0x58025444
 8001374:	58025458 	.word	0x58025458
 8001378:	5802546c 	.word	0x5802546c
 800137c:	58025480 	.word	0x58025480
 8001380:	58025494 	.word	0x58025494
 8001384:	2300      	movs	r3, #0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001394:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001398:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6d      	ldr	r2, [pc, #436]	; (8001554 <HAL_DMA_Abort+0x444>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d04a      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a6b      	ldr	r2, [pc, #428]	; (8001558 <HAL_DMA_Abort+0x448>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d045      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a6a      	ldr	r2, [pc, #424]	; (800155c <HAL_DMA_Abort+0x44c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d040      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a68      	ldr	r2, [pc, #416]	; (8001560 <HAL_DMA_Abort+0x450>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d03b      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a67      	ldr	r2, [pc, #412]	; (8001564 <HAL_DMA_Abort+0x454>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d036      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a65      	ldr	r2, [pc, #404]	; (8001568 <HAL_DMA_Abort+0x458>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d031      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a64      	ldr	r2, [pc, #400]	; (800156c <HAL_DMA_Abort+0x45c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d02c      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a62      	ldr	r2, [pc, #392]	; (8001570 <HAL_DMA_Abort+0x460>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d027      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a61      	ldr	r2, [pc, #388]	; (8001574 <HAL_DMA_Abort+0x464>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d022      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a5f      	ldr	r2, [pc, #380]	; (8001578 <HAL_DMA_Abort+0x468>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d01d      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a5e      	ldr	r2, [pc, #376]	; (800157c <HAL_DMA_Abort+0x46c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d018      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a5c      	ldr	r2, [pc, #368]	; (8001580 <HAL_DMA_Abort+0x470>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a5b      	ldr	r2, [pc, #364]	; (8001584 <HAL_DMA_Abort+0x474>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d00e      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a59      	ldr	r2, [pc, #356]	; (8001588 <HAL_DMA_Abort+0x478>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d009      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_DMA_Abort+0x47c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d004      	beq.n	800143a <HAL_DMA_Abort+0x32a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a56      	ldr	r2, [pc, #344]	; (8001590 <HAL_DMA_Abort+0x480>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d108      	bne.n	800144c <HAL_DMA_Abort+0x33c>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e007      	b.n	800145c <HAL_DMA_Abort+0x34c>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800145c:	e013      	b.n	8001486 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800145e:	f7ff fd5f 	bl	8000f20 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b05      	cmp	r3, #5
 800146a:	d90c      	bls.n	8001486 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2220      	movs	r2, #32
 8001470:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2203      	movs	r2, #3
 8001476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e12d      	b.n	80016e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1e5      	bne.n	800145e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a2f      	ldr	r2, [pc, #188]	; (8001554 <HAL_DMA_Abort+0x444>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d04a      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a2d      	ldr	r2, [pc, #180]	; (8001558 <HAL_DMA_Abort+0x448>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d045      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a2c      	ldr	r2, [pc, #176]	; (800155c <HAL_DMA_Abort+0x44c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d040      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <HAL_DMA_Abort+0x450>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d03b      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a29      	ldr	r2, [pc, #164]	; (8001564 <HAL_DMA_Abort+0x454>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d036      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a27      	ldr	r2, [pc, #156]	; (8001568 <HAL_DMA_Abort+0x458>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d031      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a26      	ldr	r2, [pc, #152]	; (800156c <HAL_DMA_Abort+0x45c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d02c      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a24      	ldr	r2, [pc, #144]	; (8001570 <HAL_DMA_Abort+0x460>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d027      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a23      	ldr	r2, [pc, #140]	; (8001574 <HAL_DMA_Abort+0x464>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d022      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a21      	ldr	r2, [pc, #132]	; (8001578 <HAL_DMA_Abort+0x468>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d01d      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a20      	ldr	r2, [pc, #128]	; (800157c <HAL_DMA_Abort+0x46c>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d018      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <HAL_DMA_Abort+0x470>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_DMA_Abort+0x474>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d00e      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <HAL_DMA_Abort+0x478>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d009      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a1a      	ldr	r2, [pc, #104]	; (800158c <HAL_DMA_Abort+0x47c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d004      	beq.n	8001532 <HAL_DMA_Abort+0x422>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <HAL_DMA_Abort+0x480>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_DMA_Abort+0x426>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_DMA_Abort+0x428>
 8001536:	2300      	movs	r3, #0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d02b      	beq.n	8001594 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001540:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001546:	f003 031f 	and.w	r3, r3, #31
 800154a:	223f      	movs	r2, #63	; 0x3f
 800154c:	409a      	lsls	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	e02a      	b.n	80015aa <HAL_DMA_Abort+0x49a>
 8001554:	40020010 	.word	0x40020010
 8001558:	40020028 	.word	0x40020028
 800155c:	40020040 	.word	0x40020040
 8001560:	40020058 	.word	0x40020058
 8001564:	40020070 	.word	0x40020070
 8001568:	40020088 	.word	0x40020088
 800156c:	400200a0 	.word	0x400200a0
 8001570:	400200b8 	.word	0x400200b8
 8001574:	40020410 	.word	0x40020410
 8001578:	40020428 	.word	0x40020428
 800157c:	40020440 	.word	0x40020440
 8001580:	40020458 	.word	0x40020458
 8001584:	40020470 	.word	0x40020470
 8001588:	40020488 	.word	0x40020488
 800158c:	400204a0 	.word	0x400204a0
 8001590:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159e:	f003 031f 	and.w	r3, r3, #31
 80015a2:	2201      	movs	r2, #1
 80015a4:	409a      	lsls	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a4f      	ldr	r2, [pc, #316]	; (80016ec <HAL_DMA_Abort+0x5dc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d072      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a4d      	ldr	r2, [pc, #308]	; (80016f0 <HAL_DMA_Abort+0x5e0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d06d      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a4c      	ldr	r2, [pc, #304]	; (80016f4 <HAL_DMA_Abort+0x5e4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d068      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a4a      	ldr	r2, [pc, #296]	; (80016f8 <HAL_DMA_Abort+0x5e8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d063      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a49      	ldr	r2, [pc, #292]	; (80016fc <HAL_DMA_Abort+0x5ec>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d05e      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a47      	ldr	r2, [pc, #284]	; (8001700 <HAL_DMA_Abort+0x5f0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d059      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a46      	ldr	r2, [pc, #280]	; (8001704 <HAL_DMA_Abort+0x5f4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d054      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a44      	ldr	r2, [pc, #272]	; (8001708 <HAL_DMA_Abort+0x5f8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d04f      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a43      	ldr	r2, [pc, #268]	; (800170c <HAL_DMA_Abort+0x5fc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d04a      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a41      	ldr	r2, [pc, #260]	; (8001710 <HAL_DMA_Abort+0x600>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d045      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a40      	ldr	r2, [pc, #256]	; (8001714 <HAL_DMA_Abort+0x604>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d040      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a3e      	ldr	r2, [pc, #248]	; (8001718 <HAL_DMA_Abort+0x608>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d03b      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a3d      	ldr	r2, [pc, #244]	; (800171c <HAL_DMA_Abort+0x60c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d036      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a3b      	ldr	r2, [pc, #236]	; (8001720 <HAL_DMA_Abort+0x610>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d031      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a3a      	ldr	r2, [pc, #232]	; (8001724 <HAL_DMA_Abort+0x614>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d02c      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a38      	ldr	r2, [pc, #224]	; (8001728 <HAL_DMA_Abort+0x618>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d027      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a37      	ldr	r2, [pc, #220]	; (800172c <HAL_DMA_Abort+0x61c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d022      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a35      	ldr	r2, [pc, #212]	; (8001730 <HAL_DMA_Abort+0x620>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d01d      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a34      	ldr	r2, [pc, #208]	; (8001734 <HAL_DMA_Abort+0x624>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d018      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a32      	ldr	r2, [pc, #200]	; (8001738 <HAL_DMA_Abort+0x628>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d013      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a31      	ldr	r2, [pc, #196]	; (800173c <HAL_DMA_Abort+0x62c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d00e      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2f      	ldr	r2, [pc, #188]	; (8001740 <HAL_DMA_Abort+0x630>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d009      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <HAL_DMA_Abort+0x634>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d004      	beq.n	800169a <HAL_DMA_Abort+0x58a>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a2c      	ldr	r2, [pc, #176]	; (8001748 <HAL_DMA_Abort+0x638>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d101      	bne.n	800169e <HAL_DMA_Abort+0x58e>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_DMA_Abort+0x590>
 800169e:	2300      	movs	r3, #0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d015      	beq.n	80016d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80016ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00c      	beq.n	80016d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80016ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40020010 	.word	0x40020010
 80016f0:	40020028 	.word	0x40020028
 80016f4:	40020040 	.word	0x40020040
 80016f8:	40020058 	.word	0x40020058
 80016fc:	40020070 	.word	0x40020070
 8001700:	40020088 	.word	0x40020088
 8001704:	400200a0 	.word	0x400200a0
 8001708:	400200b8 	.word	0x400200b8
 800170c:	40020410 	.word	0x40020410
 8001710:	40020428 	.word	0x40020428
 8001714:	40020440 	.word	0x40020440
 8001718:	40020458 	.word	0x40020458
 800171c:	40020470 	.word	0x40020470
 8001720:	40020488 	.word	0x40020488
 8001724:	400204a0 	.word	0x400204a0
 8001728:	400204b8 	.word	0x400204b8
 800172c:	58025408 	.word	0x58025408
 8001730:	5802541c 	.word	0x5802541c
 8001734:	58025430 	.word	0x58025430
 8001738:	58025444 	.word	0x58025444
 800173c:	58025458 	.word	0x58025458
 8001740:	5802546c 	.word	0x5802546c
 8001744:	58025480 	.word	0x58025480
 8001748:	58025494 	.word	0x58025494

0800174c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e237      	b.n	8001bce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d004      	beq.n	8001774 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e22c      	b.n	8001bce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a5c      	ldr	r2, [pc, #368]	; (80018ec <HAL_DMA_Abort_IT+0x1a0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d04a      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a5b      	ldr	r2, [pc, #364]	; (80018f0 <HAL_DMA_Abort_IT+0x1a4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d045      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a59      	ldr	r2, [pc, #356]	; (80018f4 <HAL_DMA_Abort_IT+0x1a8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d040      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_DMA_Abort_IT+0x1ac>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d03b      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a56      	ldr	r2, [pc, #344]	; (80018fc <HAL_DMA_Abort_IT+0x1b0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d036      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a55      	ldr	r2, [pc, #340]	; (8001900 <HAL_DMA_Abort_IT+0x1b4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d031      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a53      	ldr	r2, [pc, #332]	; (8001904 <HAL_DMA_Abort_IT+0x1b8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d02c      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_DMA_Abort_IT+0x1bc>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d027      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a50      	ldr	r2, [pc, #320]	; (800190c <HAL_DMA_Abort_IT+0x1c0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d022      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a4f      	ldr	r2, [pc, #316]	; (8001910 <HAL_DMA_Abort_IT+0x1c4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d01d      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a4d      	ldr	r2, [pc, #308]	; (8001914 <HAL_DMA_Abort_IT+0x1c8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d018      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_DMA_Abort_IT+0x1cc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d013      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a4a      	ldr	r2, [pc, #296]	; (800191c <HAL_DMA_Abort_IT+0x1d0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00e      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a49      	ldr	r2, [pc, #292]	; (8001920 <HAL_DMA_Abort_IT+0x1d4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d009      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a47      	ldr	r2, [pc, #284]	; (8001924 <HAL_DMA_Abort_IT+0x1d8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d004      	beq.n	8001814 <HAL_DMA_Abort_IT+0xc8>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a46      	ldr	r2, [pc, #280]	; (8001928 <HAL_DMA_Abort_IT+0x1dc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d101      	bne.n	8001818 <HAL_DMA_Abort_IT+0xcc>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_DMA_Abort_IT+0xce>
 8001818:	2300      	movs	r3, #0
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8086 	beq.w	800192c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2204      	movs	r2, #4
 8001824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a2f      	ldr	r2, [pc, #188]	; (80018ec <HAL_DMA_Abort_IT+0x1a0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d04a      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a2e      	ldr	r2, [pc, #184]	; (80018f0 <HAL_DMA_Abort_IT+0x1a4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d045      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2c      	ldr	r2, [pc, #176]	; (80018f4 <HAL_DMA_Abort_IT+0x1a8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d040      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a2b      	ldr	r2, [pc, #172]	; (80018f8 <HAL_DMA_Abort_IT+0x1ac>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d03b      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a29      	ldr	r2, [pc, #164]	; (80018fc <HAL_DMA_Abort_IT+0x1b0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d036      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a28      	ldr	r2, [pc, #160]	; (8001900 <HAL_DMA_Abort_IT+0x1b4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d031      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a26      	ldr	r2, [pc, #152]	; (8001904 <HAL_DMA_Abort_IT+0x1b8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d02c      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a25      	ldr	r2, [pc, #148]	; (8001908 <HAL_DMA_Abort_IT+0x1bc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d027      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a23      	ldr	r2, [pc, #140]	; (800190c <HAL_DMA_Abort_IT+0x1c0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d022      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a22      	ldr	r2, [pc, #136]	; (8001910 <HAL_DMA_Abort_IT+0x1c4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d01d      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a20      	ldr	r2, [pc, #128]	; (8001914 <HAL_DMA_Abort_IT+0x1c8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d018      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <HAL_DMA_Abort_IT+0x1cc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d013      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1d      	ldr	r2, [pc, #116]	; (800191c <HAL_DMA_Abort_IT+0x1d0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00e      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <HAL_DMA_Abort_IT+0x1d4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d009      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_DMA_Abort_IT+0x1d8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d004      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x17c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_DMA_Abort_IT+0x1dc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d108      	bne.n	80018da <HAL_DMA_Abort_IT+0x18e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e178      	b.n	8001bcc <HAL_DMA_Abort_IT+0x480>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0201 	bic.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e16f      	b.n	8001bcc <HAL_DMA_Abort_IT+0x480>
 80018ec:	40020010 	.word	0x40020010
 80018f0:	40020028 	.word	0x40020028
 80018f4:	40020040 	.word	0x40020040
 80018f8:	40020058 	.word	0x40020058
 80018fc:	40020070 	.word	0x40020070
 8001900:	40020088 	.word	0x40020088
 8001904:	400200a0 	.word	0x400200a0
 8001908:	400200b8 	.word	0x400200b8
 800190c:	40020410 	.word	0x40020410
 8001910:	40020428 	.word	0x40020428
 8001914:	40020440 	.word	0x40020440
 8001918:	40020458 	.word	0x40020458
 800191c:	40020470 	.word	0x40020470
 8001920:	40020488 	.word	0x40020488
 8001924:	400204a0 	.word	0x400204a0
 8001928:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 020e 	bic.w	r2, r2, #14
 800193a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6c      	ldr	r2, [pc, #432]	; (8001af4 <HAL_DMA_Abort_IT+0x3a8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d04a      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a6b      	ldr	r2, [pc, #428]	; (8001af8 <HAL_DMA_Abort_IT+0x3ac>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d045      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a69      	ldr	r2, [pc, #420]	; (8001afc <HAL_DMA_Abort_IT+0x3b0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d040      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a68      	ldr	r2, [pc, #416]	; (8001b00 <HAL_DMA_Abort_IT+0x3b4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d03b      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a66      	ldr	r2, [pc, #408]	; (8001b04 <HAL_DMA_Abort_IT+0x3b8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d036      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a65      	ldr	r2, [pc, #404]	; (8001b08 <HAL_DMA_Abort_IT+0x3bc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d031      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a63      	ldr	r2, [pc, #396]	; (8001b0c <HAL_DMA_Abort_IT+0x3c0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d02c      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a62      	ldr	r2, [pc, #392]	; (8001b10 <HAL_DMA_Abort_IT+0x3c4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d027      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a60      	ldr	r2, [pc, #384]	; (8001b14 <HAL_DMA_Abort_IT+0x3c8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d022      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a5f      	ldr	r2, [pc, #380]	; (8001b18 <HAL_DMA_Abort_IT+0x3cc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d01d      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a5d      	ldr	r2, [pc, #372]	; (8001b1c <HAL_DMA_Abort_IT+0x3d0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d018      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a5c      	ldr	r2, [pc, #368]	; (8001b20 <HAL_DMA_Abort_IT+0x3d4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d013      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5a      	ldr	r2, [pc, #360]	; (8001b24 <HAL_DMA_Abort_IT+0x3d8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00e      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a59      	ldr	r2, [pc, #356]	; (8001b28 <HAL_DMA_Abort_IT+0x3dc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d009      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a57      	ldr	r2, [pc, #348]	; (8001b2c <HAL_DMA_Abort_IT+0x3e0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d004      	beq.n	80019dc <HAL_DMA_Abort_IT+0x290>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a56      	ldr	r2, [pc, #344]	; (8001b30 <HAL_DMA_Abort_IT+0x3e4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d108      	bne.n	80019ee <HAL_DMA_Abort_IT+0x2a2>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e007      	b.n	80019fe <HAL_DMA_Abort_IT+0x2b2>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0201 	bic.w	r2, r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a3c      	ldr	r2, [pc, #240]	; (8001af4 <HAL_DMA_Abort_IT+0x3a8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d072      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a3a      	ldr	r2, [pc, #232]	; (8001af8 <HAL_DMA_Abort_IT+0x3ac>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d06d      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a39      	ldr	r2, [pc, #228]	; (8001afc <HAL_DMA_Abort_IT+0x3b0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d068      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a37      	ldr	r2, [pc, #220]	; (8001b00 <HAL_DMA_Abort_IT+0x3b4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d063      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a36      	ldr	r2, [pc, #216]	; (8001b04 <HAL_DMA_Abort_IT+0x3b8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d05e      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a34      	ldr	r2, [pc, #208]	; (8001b08 <HAL_DMA_Abort_IT+0x3bc>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d059      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a33      	ldr	r2, [pc, #204]	; (8001b0c <HAL_DMA_Abort_IT+0x3c0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d054      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <HAL_DMA_Abort_IT+0x3c4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d04f      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a30      	ldr	r2, [pc, #192]	; (8001b14 <HAL_DMA_Abort_IT+0x3c8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d04a      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a2e      	ldr	r2, [pc, #184]	; (8001b18 <HAL_DMA_Abort_IT+0x3cc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d045      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a2d      	ldr	r2, [pc, #180]	; (8001b1c <HAL_DMA_Abort_IT+0x3d0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d040      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a2b      	ldr	r2, [pc, #172]	; (8001b20 <HAL_DMA_Abort_IT+0x3d4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d03b      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <HAL_DMA_Abort_IT+0x3d8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d036      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a28      	ldr	r2, [pc, #160]	; (8001b28 <HAL_DMA_Abort_IT+0x3dc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d031      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <HAL_DMA_Abort_IT+0x3e0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d02c      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a25      	ldr	r2, [pc, #148]	; (8001b30 <HAL_DMA_Abort_IT+0x3e4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d027      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a24      	ldr	r2, [pc, #144]	; (8001b34 <HAL_DMA_Abort_IT+0x3e8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d022      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <HAL_DMA_Abort_IT+0x3ec>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d01d      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a21      	ldr	r2, [pc, #132]	; (8001b3c <HAL_DMA_Abort_IT+0x3f0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d018      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <HAL_DMA_Abort_IT+0x3f4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <HAL_DMA_Abort_IT+0x3f8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00e      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <HAL_DMA_Abort_IT+0x3fc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <HAL_DMA_Abort_IT+0x400>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d004      	beq.n	8001aee <HAL_DMA_Abort_IT+0x3a2>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_DMA_Abort_IT+0x404>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d132      	bne.n	8001b54 <HAL_DMA_Abort_IT+0x408>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e031      	b.n	8001b56 <HAL_DMA_Abort_IT+0x40a>
 8001af2:	bf00      	nop
 8001af4:	40020010 	.word	0x40020010
 8001af8:	40020028 	.word	0x40020028
 8001afc:	40020040 	.word	0x40020040
 8001b00:	40020058 	.word	0x40020058
 8001b04:	40020070 	.word	0x40020070
 8001b08:	40020088 	.word	0x40020088
 8001b0c:	400200a0 	.word	0x400200a0
 8001b10:	400200b8 	.word	0x400200b8
 8001b14:	40020410 	.word	0x40020410
 8001b18:	40020428 	.word	0x40020428
 8001b1c:	40020440 	.word	0x40020440
 8001b20:	40020458 	.word	0x40020458
 8001b24:	40020470 	.word	0x40020470
 8001b28:	40020488 	.word	0x40020488
 8001b2c:	400204a0 	.word	0x400204a0
 8001b30:	400204b8 	.word	0x400204b8
 8001b34:	58025408 	.word	0x58025408
 8001b38:	5802541c 	.word	0x5802541c
 8001b3c:	58025430 	.word	0x58025430
 8001b40:	58025444 	.word	0x58025444
 8001b44:	58025458 	.word	0x58025458
 8001b48:	5802546c 	.word	0x5802546c
 8001b4c:	58025480 	.word	0x58025480
 8001b50:	58025494 	.word	0x58025494
 8001b54:	2300      	movs	r3, #0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d028      	beq.n	8001bac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b68:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	2201      	movs	r2, #1
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b88:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00c      	beq.n	8001bac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001baa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop

08001bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001be6:	4b89      	ldr	r3, [pc, #548]	; (8001e0c <HAL_GPIO_Init+0x234>)
 8001be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bea:	e194      	b.n	8001f16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8186 	beq.w	8001f10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d005      	beq.n	8001c1c <HAL_GPIO_Init+0x44>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d130      	bne.n	8001c7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c52:	2201      	movs	r2, #1
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	f003 0201 	and.w	r2, r3, #1
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d017      	beq.n	8001cba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d123      	bne.n	8001d0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	08da      	lsrs	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3208      	adds	r2, #8
 8001cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	08da      	lsrs	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3208      	adds	r2, #8
 8001d08:	69b9      	ldr	r1, [r7, #24]
 8001d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2203      	movs	r2, #3
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0203 	and.w	r2, r3, #3
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80e0 	beq.w	8001f10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d50:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_GPIO_Init+0x238>)
 8001d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d56:	4a2e      	ldr	r2, [pc, #184]	; (8001e10 <HAL_GPIO_Init+0x238>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <HAL_GPIO_Init+0x238>)
 8001d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d6e:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <HAL_GPIO_Init+0x23c>)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	3302      	adds	r3, #2
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a20      	ldr	r2, [pc, #128]	; (8001e18 <HAL_GPIO_Init+0x240>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d052      	beq.n	8001e40 <HAL_GPIO_Init+0x268>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1f      	ldr	r2, [pc, #124]	; (8001e1c <HAL_GPIO_Init+0x244>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d031      	beq.n	8001e06 <HAL_GPIO_Init+0x22e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <HAL_GPIO_Init+0x248>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d02b      	beq.n	8001e02 <HAL_GPIO_Init+0x22a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_GPIO_Init+0x24c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d025      	beq.n	8001dfe <HAL_GPIO_Init+0x226>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_GPIO_Init+0x250>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01f      	beq.n	8001dfa <HAL_GPIO_Init+0x222>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_GPIO_Init+0x254>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d019      	beq.n	8001df6 <HAL_GPIO_Init+0x21e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <HAL_GPIO_Init+0x258>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x21a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_GPIO_Init+0x25c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x216>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <HAL_GPIO_Init+0x260>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x212>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <HAL_GPIO_Init+0x264>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x20e>
 8001de2:	2309      	movs	r3, #9
 8001de4:	e02d      	b.n	8001e42 <HAL_GPIO_Init+0x26a>
 8001de6:	230a      	movs	r3, #10
 8001de8:	e02b      	b.n	8001e42 <HAL_GPIO_Init+0x26a>
 8001dea:	2308      	movs	r3, #8
 8001dec:	e029      	b.n	8001e42 <HAL_GPIO_Init+0x26a>
 8001dee:	2307      	movs	r3, #7
 8001df0:	e027      	b.n	8001e42 <HAL_GPIO_Init+0x26a>
 8001df2:	2306      	movs	r3, #6
 8001df4:	e025      	b.n	8001e42 <HAL_GPIO_Init+0x26a>
 8001df6:	2305      	movs	r3, #5
 8001df8:	e023      	b.n	8001e42 <HAL_GPIO_Init+0x26a>
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	e021      	b.n	8001e42 <HAL_GPIO_Init+0x26a>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e01f      	b.n	8001e42 <HAL_GPIO_Init+0x26a>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e01d      	b.n	8001e42 <HAL_GPIO_Init+0x26a>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e01b      	b.n	8001e42 <HAL_GPIO_Init+0x26a>
 8001e0a:	bf00      	nop
 8001e0c:	58000080 	.word	0x58000080
 8001e10:	58024400 	.word	0x58024400
 8001e14:	58000400 	.word	0x58000400
 8001e18:	58020000 	.word	0x58020000
 8001e1c:	58020400 	.word	0x58020400
 8001e20:	58020800 	.word	0x58020800
 8001e24:	58020c00 	.word	0x58020c00
 8001e28:	58021000 	.word	0x58021000
 8001e2c:	58021400 	.word	0x58021400
 8001e30:	58021800 	.word	0x58021800
 8001e34:	58021c00 	.word	0x58021c00
 8001e38:	58022000 	.word	0x58022000
 8001e3c:	58022400 	.word	0x58022400
 8001e40:	2300      	movs	r3, #0
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	f002 0203 	and.w	r2, r2, #3
 8001e48:	0092      	lsls	r2, r2, #2
 8001e4a:	4093      	lsls	r3, r2
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e52:	4938      	ldr	r1, [pc, #224]	; (8001f34 <HAL_GPIO_Init+0x35c>)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	3301      	adds	r3, #1
 8001f14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f47f ae63 	bne.w	8001bec <HAL_GPIO_Init+0x14>
  }
}
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
 8001f2a:	3724      	adds	r7, #36	; 0x24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	58000400 	.word	0x58000400

08001f38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f40:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	2b06      	cmp	r3, #6
 8001f4a:	d00a      	beq.n	8001f62 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f4c:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d001      	beq.n	8001f5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e040      	b.n	8001fe0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e03e      	b.n	8001fe0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001f6a:	491f      	ldr	r1, [pc, #124]	; (8001fe8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f72:	f7fe ffd5 	bl	8000f20 <HAL_GetTick>
 8001f76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f78:	e009      	b.n	8001f8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f7a:	f7fe ffd1 	bl	8000f20 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f88:	d901      	bls.n	8001f8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e028      	b.n	8001fe0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f9a:	d1ee      	bne.n	8001f7a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b1e      	cmp	r3, #30
 8001fa0:	d008      	beq.n	8001fb4 <HAL_PWREx_ConfigSupply+0x7c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8001fa6:	d005      	beq.n	8001fb4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b1d      	cmp	r3, #29
 8001fac:	d002      	beq.n	8001fb4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b2d      	cmp	r3, #45	; 0x2d
 8001fb2:	d114      	bne.n	8001fde <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001fb4:	f7fe ffb4 	bl	8000f20 <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001fba:	e009      	b.n	8001fd0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fbc:	f7fe ffb0 	bl	8000f20 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fca:	d901      	bls.n	8001fd0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e007      	b.n	8001fe0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fdc:	d1ee      	bne.n	8001fbc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	58024800 	.word	0x58024800

08001fec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08c      	sub	sp, #48	; 0x30
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d102      	bne.n	8002000 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f000 bc1d 	b.w	800283a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 8087 	beq.w	800211c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800200e:	4b99      	ldr	r3, [pc, #612]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002018:	4b96      	ldr	r3, [pc, #600]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002020:	2b10      	cmp	r3, #16
 8002022:	d007      	beq.n	8002034 <HAL_RCC_OscConfig+0x48>
 8002024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002026:	2b18      	cmp	r3, #24
 8002028:	d110      	bne.n	800204c <HAL_RCC_OscConfig+0x60>
 800202a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d10b      	bne.n	800204c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	4b8f      	ldr	r3, [pc, #572]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d06c      	beq.n	800211a <HAL_RCC_OscConfig+0x12e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d168      	bne.n	800211a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e3f6      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002054:	d106      	bne.n	8002064 <HAL_RCC_OscConfig+0x78>
 8002056:	4b87      	ldr	r3, [pc, #540]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a86      	ldr	r2, [pc, #536]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e02e      	b.n	80020c2 <HAL_RCC_OscConfig+0xd6>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10c      	bne.n	8002086 <HAL_RCC_OscConfig+0x9a>
 800206c:	4b81      	ldr	r3, [pc, #516]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a80      	ldr	r2, [pc, #512]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b7e      	ldr	r3, [pc, #504]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a7d      	ldr	r2, [pc, #500]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	e01d      	b.n	80020c2 <HAL_RCC_OscConfig+0xd6>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800208e:	d10c      	bne.n	80020aa <HAL_RCC_OscConfig+0xbe>
 8002090:	4b78      	ldr	r3, [pc, #480]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a77      	ldr	r2, [pc, #476]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 8002096:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b75      	ldr	r3, [pc, #468]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a74      	ldr	r2, [pc, #464]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80020a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	e00b      	b.n	80020c2 <HAL_RCC_OscConfig+0xd6>
 80020aa:	4b72      	ldr	r3, [pc, #456]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a71      	ldr	r2, [pc, #452]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80020b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6e      	ldr	r2, [pc, #440]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80020bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d013      	beq.n	80020f2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7fe ff29 	bl	8000f20 <HAL_GetTick>
 80020ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d2:	f7fe ff25 	bl	8000f20 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e3aa      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020e4:	4b63      	ldr	r3, [pc, #396]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0xe6>
 80020f0:	e014      	b.n	800211c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe ff15 	bl	8000f20 <HAL_GetTick>
 80020f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fa:	f7fe ff11 	bl	8000f20 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b64      	cmp	r3, #100	; 0x64
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e396      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800210c:	4b59      	ldr	r3, [pc, #356]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f0      	bne.n	80020fa <HAL_RCC_OscConfig+0x10e>
 8002118:	e000      	b.n	800211c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80cb 	beq.w	80022c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800212a:	4b52      	ldr	r3, [pc, #328]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002132:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002134:	4b4f      	ldr	r3, [pc, #316]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <HAL_RCC_OscConfig+0x164>
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	2b18      	cmp	r3, #24
 8002144:	d156      	bne.n	80021f4 <HAL_RCC_OscConfig+0x208>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d151      	bne.n	80021f4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002150:	4b48      	ldr	r3, [pc, #288]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_OscConfig+0x17c>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e368      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002168:	4b42      	ldr	r3, [pc, #264]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 0219 	bic.w	r2, r3, #25
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	493f      	ldr	r1, [pc, #252]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800217a:	f7fe fed1 	bl	8000f20 <HAL_GetTick>
 800217e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002182:	f7fe fecd 	bl	8000f20 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e352      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002194:	4b37      	ldr	r3, [pc, #220]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	f7fe feca 	bl	8000f38 <HAL_GetREVID>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d817      	bhi.n	80021de <HAL_RCC_OscConfig+0x1f2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	d108      	bne.n	80021c8 <HAL_RCC_OscConfig+0x1dc>
 80021b6:	4b2f      	ldr	r3, [pc, #188]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80021be:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c6:	e07b      	b.n	80022c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	031b      	lsls	r3, r3, #12
 80021d6:	4927      	ldr	r1, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021dc:	e070      	b.n	80022c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	061b      	lsls	r3, r3, #24
 80021ec:	4921      	ldr	r1, [pc, #132]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f2:	e065      	b.n	80022c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d048      	beq.n	800228e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 0219 	bic.w	r2, r3, #25
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	491a      	ldr	r1, [pc, #104]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7fe fe87 	bl	8000f20 <HAL_GetTick>
 8002212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002216:	f7fe fe83 	bl	8000f20 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e308      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002234:	f7fe fe80 	bl	8000f38 <HAL_GetREVID>
 8002238:	4603      	mov	r3, r0
 800223a:	f241 0203 	movw	r2, #4099	; 0x1003
 800223e:	4293      	cmp	r3, r2
 8002240:	d81a      	bhi.n	8002278 <HAL_RCC_OscConfig+0x28c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b40      	cmp	r3, #64	; 0x40
 8002248:	d108      	bne.n	800225c <HAL_RCC_OscConfig+0x270>
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002252:	4a08      	ldr	r2, [pc, #32]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 8002254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002258:	6053      	str	r3, [r2, #4]
 800225a:	e031      	b.n	80022c0 <HAL_RCC_OscConfig+0x2d4>
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	031b      	lsls	r3, r3, #12
 800226a:	4902      	ldr	r1, [pc, #8]	; (8002274 <HAL_RCC_OscConfig+0x288>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
 8002270:	e026      	b.n	80022c0 <HAL_RCC_OscConfig+0x2d4>
 8002272:	bf00      	nop
 8002274:	58024400 	.word	0x58024400
 8002278:	4b9a      	ldr	r3, [pc, #616]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	4997      	ldr	r1, [pc, #604]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
 800228c:	e018      	b.n	80022c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228e:	4b95      	ldr	r3, [pc, #596]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a94      	ldr	r2, [pc, #592]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7fe fe41 	bl	8000f20 <HAL_GetTick>
 800229e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a2:	f7fe fe3d 	bl	8000f20 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e2c2      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022b4:	4b8b      	ldr	r3, [pc, #556]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80a9 	beq.w	8002420 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ce:	4b85      	ldr	r3, [pc, #532]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022d8:	4b82      	ldr	r3, [pc, #520]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d007      	beq.n	80022f4 <HAL_RCC_OscConfig+0x308>
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b18      	cmp	r3, #24
 80022e8:	d13a      	bne.n	8002360 <HAL_RCC_OscConfig+0x374>
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d135      	bne.n	8002360 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022f4:	4b7b      	ldr	r3, [pc, #492]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_OscConfig+0x320>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	2b80      	cmp	r3, #128	; 0x80
 8002306:	d001      	beq.n	800230c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e296      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800230c:	f7fe fe14 	bl	8000f38 <HAL_GetREVID>
 8002310:	4603      	mov	r3, r0
 8002312:	f241 0203 	movw	r2, #4099	; 0x1003
 8002316:	4293      	cmp	r3, r2
 8002318:	d817      	bhi.n	800234a <HAL_RCC_OscConfig+0x35e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	2b20      	cmp	r3, #32
 8002320:	d108      	bne.n	8002334 <HAL_RCC_OscConfig+0x348>
 8002322:	4b70      	ldr	r3, [pc, #448]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800232a:	4a6e      	ldr	r2, [pc, #440]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 800232c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002330:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002332:	e075      	b.n	8002420 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002334:	4b6b      	ldr	r3, [pc, #428]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	069b      	lsls	r3, r3, #26
 8002342:	4968      	ldr	r1, [pc, #416]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002348:	e06a      	b.n	8002420 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800234a:	4b66      	ldr	r3, [pc, #408]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	061b      	lsls	r3, r3, #24
 8002358:	4962      	ldr	r1, [pc, #392]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 800235a:	4313      	orrs	r3, r2
 800235c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800235e:	e05f      	b.n	8002420 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d042      	beq.n	80023ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002368:	4b5e      	ldr	r3, [pc, #376]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a5d      	ldr	r2, [pc, #372]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 800236e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe fdd4 	bl	8000f20 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800237c:	f7fe fdd0 	bl	8000f20 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e255      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800238e:	4b55      	ldr	r3, [pc, #340]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800239a:	f7fe fdcd 	bl	8000f38 <HAL_GetREVID>
 800239e:	4603      	mov	r3, r0
 80023a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d817      	bhi.n	80023d8 <HAL_RCC_OscConfig+0x3ec>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d108      	bne.n	80023c2 <HAL_RCC_OscConfig+0x3d6>
 80023b0:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80023b8:	4a4a      	ldr	r2, [pc, #296]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80023ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023be:	6053      	str	r3, [r2, #4]
 80023c0:	e02e      	b.n	8002420 <HAL_RCC_OscConfig+0x434>
 80023c2:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	069b      	lsls	r3, r3, #26
 80023d0:	4944      	ldr	r1, [pc, #272]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
 80023d6:	e023      	b.n	8002420 <HAL_RCC_OscConfig+0x434>
 80023d8:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	493f      	ldr	r1, [pc, #252]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60cb      	str	r3, [r1, #12]
 80023ec:	e018      	b.n	8002420 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a3c      	ldr	r2, [pc, #240]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80023f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7fe fd91 	bl	8000f20 <HAL_GetTick>
 80023fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002402:	f7fe fd8d 	bl	8000f20 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e212      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002414:	4b33      	ldr	r3, [pc, #204]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d036      	beq.n	800249a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d019      	beq.n	8002468 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002434:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 8002436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002438:	4a2a      	ldr	r2, [pc, #168]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe fd6e 	bl	8000f20 <HAL_GetTick>
 8002444:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002448:	f7fe fd6a 	bl	8000f20 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1ef      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 800245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x45c>
 8002466:	e018      	b.n	800249a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002468:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 800246a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246c:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002474:	f7fe fd54 	bl	8000f20 <HAL_GetTick>
 8002478:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800247c:	f7fe fd50 	bl	8000f20 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e1d5      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 8002490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d039      	beq.n	800251a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80024b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024ba:	f7fe fd31 	bl	8000f20 <HAL_GetTick>
 80024be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80024c2:	f7fe fd2d 	bl	8000f20 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e1b2      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_RCC_OscConfig+0x4f8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x4d6>
 80024e0:	e01b      	b.n	800251a <HAL_RCC_OscConfig+0x52e>
 80024e2:	bf00      	nop
 80024e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024e8:	4b9b      	ldr	r3, [pc, #620]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a9a      	ldr	r2, [pc, #616]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80024ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fd14 	bl	8000f20 <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80024fc:	f7fe fd10 	bl	8000f20 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e195      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800250e:	4b92      	ldr	r3, [pc, #584]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8081 	beq.w	800262a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002528:	4b8c      	ldr	r3, [pc, #560]	; (800275c <HAL_RCC_OscConfig+0x770>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a8b      	ldr	r2, [pc, #556]	; (800275c <HAL_RCC_OscConfig+0x770>)
 800252e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002532:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002534:	f7fe fcf4 	bl	8000f20 <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800253c:	f7fe fcf0 	bl	8000f20 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e175      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800254e:	4b83      	ldr	r3, [pc, #524]	; (800275c <HAL_RCC_OscConfig+0x770>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d106      	bne.n	8002570 <HAL_RCC_OscConfig+0x584>
 8002562:	4b7d      	ldr	r3, [pc, #500]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002566:	4a7c      	ldr	r2, [pc, #496]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6713      	str	r3, [r2, #112]	; 0x70
 800256e:	e02d      	b.n	80025cc <HAL_RCC_OscConfig+0x5e0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10c      	bne.n	8002592 <HAL_RCC_OscConfig+0x5a6>
 8002578:	4b77      	ldr	r3, [pc, #476]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	4a76      	ldr	r2, [pc, #472]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	6713      	str	r3, [r2, #112]	; 0x70
 8002584:	4b74      	ldr	r3, [pc, #464]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	4a73      	ldr	r2, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 800258a:	f023 0304 	bic.w	r3, r3, #4
 800258e:	6713      	str	r3, [r2, #112]	; 0x70
 8002590:	e01c      	b.n	80025cc <HAL_RCC_OscConfig+0x5e0>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5c8>
 800259a:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259e:	4a6e      	ldr	r2, [pc, #440]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70
 80025a6:	4b6c      	ldr	r3, [pc, #432]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	4a6b      	ldr	r2, [pc, #428]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6713      	str	r3, [r2, #112]	; 0x70
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0x5e0>
 80025b4:	4b68      	ldr	r3, [pc, #416]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	4a67      	ldr	r2, [pc, #412]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	6713      	str	r3, [r2, #112]	; 0x70
 80025c0:	4b65      	ldr	r3, [pc, #404]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	4a64      	ldr	r2, [pc, #400]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80025c6:	f023 0304 	bic.w	r3, r3, #4
 80025ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fe fca4 	bl	8000f20 <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7fe fca0 	bl	8000f20 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e123      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025f2:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0ee      	beq.n	80025dc <HAL_RCC_OscConfig+0x5f0>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fc8e 	bl	8000f20 <HAL_GetTick>
 8002604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7fe fc8a 	bl	8000f20 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e10d      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800261e:	4b4e      	ldr	r3, [pc, #312]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1ee      	bne.n	8002608 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8102 	beq.w	8002838 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002634:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800263c:	2b18      	cmp	r3, #24
 800263e:	f000 80bd 	beq.w	80027bc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	2b02      	cmp	r3, #2
 8002648:	f040 809e 	bne.w	8002788 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264c:	4b42      	ldr	r3, [pc, #264]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a41      	ldr	r2, [pc, #260]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fc62 	bl	8000f20 <HAL_GetTick>
 800265c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002660:	f7fe fc5e 	bl	8000f20 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0e3      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800267e:	4b36      	ldr	r3, [pc, #216]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002682:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_RCC_OscConfig+0x774>)
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	430a      	orrs	r2, r1
 8002692:	4931      	ldr	r1, [pc, #196]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002694:	4313      	orrs	r3, r2
 8002696:	628b      	str	r3, [r1, #40]	; 0x28
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	3b01      	subs	r3, #1
 800269e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a6:	3b01      	subs	r3, #1
 80026a8:	025b      	lsls	r3, r3, #9
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	3b01      	subs	r3, #1
 80026b4:	041b      	lsls	r3, r3, #16
 80026b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	3b01      	subs	r3, #1
 80026c2:	061b      	lsls	r3, r3, #24
 80026c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80026c8:	4923      	ldr	r1, [pc, #140]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	4a21      	ldr	r2, [pc, #132]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80026dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026de:	4b21      	ldr	r3, [pc, #132]	; (8002764 <HAL_RCC_OscConfig+0x778>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026e6:	00d2      	lsls	r2, r2, #3
 80026e8:	491b      	ldr	r1, [pc, #108]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	f023 020c 	bic.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4917      	ldr	r1, [pc, #92]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	f023 0202 	bic.w	r2, r3, #2
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	4912      	ldr	r1, [pc, #72]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 800270e:	4313      	orrs	r3, r2
 8002710:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	4a10      	ldr	r2, [pc, #64]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002728:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002734:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a04      	ldr	r2, [pc, #16]	; (8002758 <HAL_RCC_OscConfig+0x76c>)
 8002748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fe fbe7 	bl	8000f20 <HAL_GetTick>
 8002752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002754:	e011      	b.n	800277a <HAL_RCC_OscConfig+0x78e>
 8002756:	bf00      	nop
 8002758:	58024400 	.word	0x58024400
 800275c:	58024800 	.word	0x58024800
 8002760:	fffffc0c 	.word	0xfffffc0c
 8002764:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe fbda 	bl	8000f20 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e05f      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800277a:	4b32      	ldr	r3, [pc, #200]	; (8002844 <HAL_RCC_OscConfig+0x858>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x77c>
 8002786:	e057      	b.n	8002838 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002788:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <HAL_RCC_OscConfig+0x858>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2d      	ldr	r2, [pc, #180]	; (8002844 <HAL_RCC_OscConfig+0x858>)
 800278e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fbc4 	bl	8000f20 <HAL_GetTick>
 8002798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe fbc0 	bl	8000f20 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e045      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <HAL_RCC_OscConfig+0x858>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x7b0>
 80027ba:	e03d      	b.n	8002838 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <HAL_RCC_OscConfig+0x858>)
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_RCC_OscConfig+0x858>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d031      	beq.n	8002834 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f003 0203 	and.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d12a      	bne.n	8002834 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d122      	bne.n	8002834 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d11a      	bne.n	8002834 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	0a5b      	lsrs	r3, r3, #9
 8002802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d111      	bne.n	8002834 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	0c1b      	lsrs	r3, r3, #16
 8002814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d108      	bne.n	8002834 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	0e1b      	lsrs	r3, r3, #24
 8002826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3730      	adds	r7, #48	; 0x30
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	58024400 	.word	0x58024400

08002848 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e19c      	b.n	8002b96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800285c:	4b8a      	ldr	r3, [pc, #552]	; (8002a88 <HAL_RCC_ClockConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d910      	bls.n	800288c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b87      	ldr	r3, [pc, #540]	; (8002a88 <HAL_RCC_ClockConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 020f 	bic.w	r2, r3, #15
 8002872:	4985      	ldr	r1, [pc, #532]	; (8002a88 <HAL_RCC_ClockConfig+0x240>)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b83      	ldr	r3, [pc, #524]	; (8002a88 <HAL_RCC_ClockConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e184      	b.n	8002b96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d010      	beq.n	80028ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	4b7b      	ldr	r3, [pc, #492]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d908      	bls.n	80028ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028a8:	4b78      	ldr	r3, [pc, #480]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	4975      	ldr	r1, [pc, #468]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d010      	beq.n	80028e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	4b70      	ldr	r3, [pc, #448]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d908      	bls.n	80028e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028d6:	4b6d      	ldr	r3, [pc, #436]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	496a      	ldr	r1, [pc, #424]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d010      	beq.n	8002916 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	4b64      	ldr	r3, [pc, #400]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002900:	429a      	cmp	r2, r3
 8002902:	d908      	bls.n	8002916 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002904:	4b61      	ldr	r3, [pc, #388]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	495e      	ldr	r1, [pc, #376]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 8002912:	4313      	orrs	r3, r2
 8002914:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b00      	cmp	r3, #0
 8002920:	d010      	beq.n	8002944 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800292e:	429a      	cmp	r2, r3
 8002930:	d908      	bls.n	8002944 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002932:	4b56      	ldr	r3, [pc, #344]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4953      	ldr	r1, [pc, #332]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 8002940:	4313      	orrs	r3, r2
 8002942:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d010      	beq.n	8002972 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	429a      	cmp	r2, r3
 800295e:	d908      	bls.n	8002972 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f023 020f 	bic.w	r2, r3, #15
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4947      	ldr	r1, [pc, #284]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 800296e:	4313      	orrs	r3, r2
 8002970:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d055      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800297e:	4b43      	ldr	r3, [pc, #268]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4940      	ldr	r1, [pc, #256]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 800298c:	4313      	orrs	r3, r2
 800298e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002998:	4b3c      	ldr	r3, [pc, #240]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d121      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0f6      	b.n	8002b96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029b0:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d115      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0ea      	b.n	8002b96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029c8:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d109      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0de      	b.n	8002b96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d8:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0d6      	b.n	8002b96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f023 0207 	bic.w	r2, r3, #7
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4925      	ldr	r1, [pc, #148]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fe fa91 	bl	8000f20 <HAL_GetTick>
 80029fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a02:	f7fe fa8d 	bl	8000f20 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e0be      	b.n	8002b96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a18:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d1eb      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d010      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d208      	bcs.n	8002a58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f023 020f 	bic.w	r2, r3, #15
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	490e      	ldr	r1, [pc, #56]	; (8002a8c <HAL_RCC_ClockConfig+0x244>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_ClockConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d214      	bcs.n	8002a90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_RCC_ClockConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 020f 	bic.w	r2, r3, #15
 8002a6e:	4906      	ldr	r1, [pc, #24]	; (8002a88 <HAL_RCC_ClockConfig+0x240>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <HAL_RCC_ClockConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e086      	b.n	8002b96 <HAL_RCC_ClockConfig+0x34e>
 8002a88:	52002000 	.word	0x52002000
 8002a8c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	4b3f      	ldr	r3, [pc, #252]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d208      	bcs.n	8002abe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002aac:	4b3c      	ldr	r3, [pc, #240]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	4939      	ldr	r1, [pc, #228]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d010      	beq.n	8002aec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	4b34      	ldr	r3, [pc, #208]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d208      	bcs.n	8002aec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ada:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	492e      	ldr	r1, [pc, #184]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d010      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d208      	bcs.n	8002b1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4922      	ldr	r1, [pc, #136]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69da      	ldr	r2, [r3, #28]
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d208      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	4917      	ldr	r1, [pc, #92]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b48:	f000 f834 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	4912      	ldr	r1, [pc, #72]	; (8002ba4 <HAL_RCC_ClockConfig+0x35c>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <HAL_RCC_ClockConfig+0x358>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <HAL_RCC_ClockConfig+0x35c>)
 8002b70:	5cd3      	ldrb	r3, [r2, r3]
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <HAL_RCC_ClockConfig+0x360>)
 8002b7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b80:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <HAL_RCC_ClockConfig+0x364>)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <HAL_RCC_ClockConfig+0x368>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe f8b8 	bl	8000d00 <HAL_InitTick>
 8002b90:	4603      	mov	r3, r0
 8002b92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	08009f10 	.word	0x08009f10
 8002ba8:	24000004 	.word	0x24000004
 8002bac:	24000000 	.word	0x24000000
 8002bb0:	24000058 	.word	0x24000058

08002bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bba:	4bb3      	ldr	r3, [pc, #716]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bc2:	2b18      	cmp	r3, #24
 8002bc4:	f200 8155 	bhi.w	8002e72 <HAL_RCC_GetSysClockFreq+0x2be>
 8002bc8:	a201      	add	r2, pc, #4	; (adr r2, 8002bd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bce:	bf00      	nop
 8002bd0:	08002c35 	.word	0x08002c35
 8002bd4:	08002e73 	.word	0x08002e73
 8002bd8:	08002e73 	.word	0x08002e73
 8002bdc:	08002e73 	.word	0x08002e73
 8002be0:	08002e73 	.word	0x08002e73
 8002be4:	08002e73 	.word	0x08002e73
 8002be8:	08002e73 	.word	0x08002e73
 8002bec:	08002e73 	.word	0x08002e73
 8002bf0:	08002c5b 	.word	0x08002c5b
 8002bf4:	08002e73 	.word	0x08002e73
 8002bf8:	08002e73 	.word	0x08002e73
 8002bfc:	08002e73 	.word	0x08002e73
 8002c00:	08002e73 	.word	0x08002e73
 8002c04:	08002e73 	.word	0x08002e73
 8002c08:	08002e73 	.word	0x08002e73
 8002c0c:	08002e73 	.word	0x08002e73
 8002c10:	08002c61 	.word	0x08002c61
 8002c14:	08002e73 	.word	0x08002e73
 8002c18:	08002e73 	.word	0x08002e73
 8002c1c:	08002e73 	.word	0x08002e73
 8002c20:	08002e73 	.word	0x08002e73
 8002c24:	08002e73 	.word	0x08002e73
 8002c28:	08002e73 	.word	0x08002e73
 8002c2c:	08002e73 	.word	0x08002e73
 8002c30:	08002c67 	.word	0x08002c67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c34:	4b94      	ldr	r3, [pc, #592]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c40:	4b91      	ldr	r3, [pc, #580]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	08db      	lsrs	r3, r3, #3
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	4a90      	ldr	r2, [pc, #576]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002c52:	e111      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c54:	4b8d      	ldr	r3, [pc, #564]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c56:	61bb      	str	r3, [r7, #24]
    break;
 8002c58:	e10e      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002c5a:	4b8d      	ldr	r3, [pc, #564]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c5c:	61bb      	str	r3, [r7, #24]
    break;
 8002c5e:	e10b      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002c60:	4b8c      	ldr	r3, [pc, #560]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c62:	61bb      	str	r3, [r7, #24]
    break;
 8002c64:	e108      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c66:	4b88      	ldr	r3, [pc, #544]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002c70:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c7c:	4b82      	ldr	r3, [pc, #520]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c86:	4b80      	ldr	r3, [pc, #512]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	08db      	lsrs	r3, r3, #3
 8002c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80e1 	beq.w	8002e6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	f000 8083 	beq.w	8002db8 <HAL_RCC_GetSysClockFreq+0x204>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	f200 80a1 	bhi.w	8002dfc <HAL_RCC_GetSysClockFreq+0x248>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x114>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d056      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002cc6:	e099      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cc8:	4b6f      	ldr	r3, [pc, #444]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d02d      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002cd4:	4b6c      	ldr	r3, [pc, #432]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	08db      	lsrs	r3, r3, #3
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	4a6b      	ldr	r2, [pc, #428]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cfe:	4b62      	ldr	r3, [pc, #392]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002d2e:	e087      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002e9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d42:	4b51      	ldr	r3, [pc, #324]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d72:	e065      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ea0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d86:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d8e:	ee07 3a90 	vmov	s15, r3
 8002d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002db6:	e043      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ea4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dca:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002dfa:	e021      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ea0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002e98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e3e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	0a5b      	lsrs	r3, r3, #9
 8002e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	ee07 3a90 	vmov	s15, r3
 8002e54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e58:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e64:	ee17 3a90 	vmov	r3, s15
 8002e68:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002e6a:	e005      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61bb      	str	r3, [r7, #24]
    break;
 8002e70:	e002      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e74:	61bb      	str	r3, [r7, #24]
    break;
 8002e76:	bf00      	nop
  }

  return sysclockfreq;
 8002e78:	69bb      	ldr	r3, [r7, #24]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	; 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	58024400 	.word	0x58024400
 8002e8c:	03d09000 	.word	0x03d09000
 8002e90:	003d0900 	.word	0x003d0900
 8002e94:	017d7840 	.word	0x017d7840
 8002e98:	46000000 	.word	0x46000000
 8002e9c:	4c742400 	.word	0x4c742400
 8002ea0:	4a742400 	.word	0x4a742400
 8002ea4:	4bbebc20 	.word	0x4bbebc20

08002ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002eae:	f7ff fe81 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	490f      	ldr	r1, [pc, #60]	; (8002efc <HAL_RCC_GetHCLKFreq+0x54>)
 8002ec0:	5ccb      	ldrb	r3, [r1, r3]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	4a09      	ldr	r2, [pc, #36]	; (8002efc <HAL_RCC_GetHCLKFreq+0x54>)
 8002ed6:	5cd3      	ldrb	r3, [r2, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee2:	4a07      	ldr	r2, [pc, #28]	; (8002f00 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ee4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ee6:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <HAL_RCC_GetHCLKFreq+0x58>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	08009f10 	.word	0x08009f10
 8002f00:	24000004 	.word	0x24000004
 8002f04:	24000000 	.word	0x24000000

08002f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002f0c:	f7ff ffcc 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	4904      	ldr	r1, [pc, #16]	; (8002f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	08009f10 	.word	0x08009f10

08002f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002f38:	f7ff ffb6 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4904      	ldr	r1, [pc, #16]	; (8002f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	58024400 	.word	0x58024400
 8002f5c:	08009f10 	.word	0x08009f10

08002f60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	223f      	movs	r2, #63	; 0x3f
 8002f6e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f70:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <HAL_RCC_GetClockConfig+0x7c>)
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0207 	and.w	r2, r3, #7
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002f7c:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <HAL_RCC_GetClockConfig+0x7c>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002f88:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <HAL_RCC_GetClockConfig+0x7c>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 020f 	and.w	r2, r3, #15
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <HAL_RCC_GetClockConfig+0x7c>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <HAL_RCC_GetClockConfig+0x7c>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_GetClockConfig+0x7c>)
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <HAL_RCC_GetClockConfig+0x7c>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_RCC_GetClockConfig+0x80>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 020f 	and.w	r2, r3, #15
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	601a      	str	r2, [r3, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	58024400 	.word	0x58024400
 8002fe0:	52002000 	.word	0x52002000

08002fe4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fec:	2300      	movs	r3, #0
 8002fee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d03f      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003004:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003008:	d02a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800300a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800300e:	d824      	bhi.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003014:	d018      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800301a:	d81e      	bhi.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003024:	d007      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003026:	e018      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003028:	4ba3      	ldr	r3, [pc, #652]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	4aa2      	ldr	r2, [pc, #648]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800302e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003032:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003034:	e015      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3304      	adds	r3, #4
 800303a:	2102      	movs	r1, #2
 800303c:	4618      	mov	r0, r3
 800303e:	f001 f9d5 	bl	80043ec <RCCEx_PLL2_Config>
 8003042:	4603      	mov	r3, r0
 8003044:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003046:	e00c      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3324      	adds	r3, #36	; 0x24
 800304c:	2102      	movs	r1, #2
 800304e:	4618      	mov	r0, r3
 8003050:	f001 fa7e 	bl	8004550 <RCCEx_PLL3_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003058:	e003      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	75fb      	strb	r3, [r7, #23]
      break;
 800305e:	e000      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003068:	4b93      	ldr	r3, [pc, #588]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800306a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800306c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003074:	4990      	ldr	r1, [pc, #576]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	650b      	str	r3, [r1, #80]	; 0x50
 800307a:	e001      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d03d      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	2b04      	cmp	r3, #4
 8003092:	d826      	bhi.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030b1 	.word	0x080030b1
 80030a0:	080030bf 	.word	0x080030bf
 80030a4:	080030d1 	.word	0x080030d1
 80030a8:	080030e9 	.word	0x080030e9
 80030ac:	080030e9 	.word	0x080030e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030b0:	4b81      	ldr	r3, [pc, #516]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	4a80      	ldr	r2, [pc, #512]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030bc:	e015      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 f991 	bl	80043ec <RCCEx_PLL2_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030ce:	e00c      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3324      	adds	r3, #36	; 0x24
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 fa3a 	bl	8004550 <RCCEx_PLL3_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030e0:	e003      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
      break;
 80030e6:	e000      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80030e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030f0:	4b71      	ldr	r3, [pc, #452]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	f023 0207 	bic.w	r2, r3, #7
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	496e      	ldr	r1, [pc, #440]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	650b      	str	r3, [r1, #80]	; 0x50
 8003102:	e001      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003110:	2b00      	cmp	r3, #0
 8003112:	d042      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311c:	d02b      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800311e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003122:	d825      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003124:	2bc0      	cmp	r3, #192	; 0xc0
 8003126:	d028      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003128:	2bc0      	cmp	r3, #192	; 0xc0
 800312a:	d821      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800312c:	2b80      	cmp	r3, #128	; 0x80
 800312e:	d016      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d81d      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d007      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800313c:	e018      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800313e:	4b5e      	ldr	r3, [pc, #376]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	4a5d      	ldr	r2, [pc, #372]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003148:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800314a:	e017      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3304      	adds	r3, #4
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f001 f94a 	bl	80043ec <RCCEx_PLL2_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800315c:	e00e      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3324      	adds	r3, #36	; 0x24
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f001 f9f3 	bl	8004550 <RCCEx_PLL3_Config>
 800316a:	4603      	mov	r3, r0
 800316c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800316e:	e005      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	75fb      	strb	r3, [r7, #23]
      break;
 8003174:	e002      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003176:	bf00      	nop
 8003178:	e000      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800317a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003182:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003186:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	494a      	ldr	r1, [pc, #296]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	650b      	str	r3, [r1, #80]	; 0x50
 8003194:	e001      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
 8003198:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d049      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031b0:	d030      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80031b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031b6:	d82a      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80031bc:	d02c      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80031be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80031c2:	d824      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c8:	d018      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80031ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ce:	d81e      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80031d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031d8:	d007      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80031da:	e018      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031dc:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	4a35      	ldr	r2, [pc, #212]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031e8:	e017      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f001 f8fb 	bl	80043ec <RCCEx_PLL2_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80031fa:	e00e      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3324      	adds	r3, #36	; 0x24
 8003200:	2100      	movs	r1, #0
 8003202:	4618      	mov	r0, r3
 8003204:	f001 f9a4 	bl	8004550 <RCCEx_PLL3_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800320c:	e005      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
      break;
 8003212:	e002      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003214:	bf00      	nop
 8003216:	e000      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10a      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003220:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800322e:	4922      	ldr	r1, [pc, #136]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	658b      	str	r3, [r1, #88]	; 0x58
 8003234:	e001      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003242:	2b00      	cmp	r3, #0
 8003244:	d04b      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800324c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003250:	d030      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003252:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003256:	d82a      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003258:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800325c:	d02e      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800325e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003262:	d824      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003264:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003268:	d018      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800326a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800326e:	d81e      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003278:	d007      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800327a:	e018      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003286:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003288:	e019      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f001 f8ab 	bl	80043ec <RCCEx_PLL2_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800329a:	e010      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3324      	adds	r3, #36	; 0x24
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f001 f954 	bl	8004550 <RCCEx_PLL3_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032ac:	e007      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	75fb      	strb	r3, [r7, #23]
      break;
 80032b2:	e004      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80032b4:	bf00      	nop
 80032b6:	e002      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80032b8:	58024400 	.word	0x58024400
      break;
 80032bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80032c4:	4b99      	ldr	r3, [pc, #612]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032d2:	4996      	ldr	r1, [pc, #600]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	658b      	str	r3, [r1, #88]	; 0x58
 80032d8:	e001      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d032      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ee:	2b30      	cmp	r3, #48	; 0x30
 80032f0:	d01c      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80032f2:	2b30      	cmp	r3, #48	; 0x30
 80032f4:	d817      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d00c      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d813      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003302:	2b10      	cmp	r3, #16
 8003304:	d10f      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003306:	4b89      	ldr	r3, [pc, #548]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	4a88      	ldr	r2, [pc, #544]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800330c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003310:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003312:	e00e      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3304      	adds	r3, #4
 8003318:	2102      	movs	r1, #2
 800331a:	4618      	mov	r0, r3
 800331c:	f001 f866 	bl	80043ec <RCCEx_PLL2_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003324:	e005      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
      break;
 800332a:	e002      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800332c:	bf00      	nop
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003332:	7dfb      	ldrb	r3, [r7, #23]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003338:	4b7c      	ldr	r3, [pc, #496]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800333a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003344:	4979      	ldr	r1, [pc, #484]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003346:	4313      	orrs	r3, r2
 8003348:	64cb      	str	r3, [r1, #76]	; 0x4c
 800334a:	e001      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334c:	7dfb      	ldrb	r3, [r7, #23]
 800334e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d047      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003364:	d030      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800336a:	d82a      	bhi.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800336c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003370:	d02c      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003372:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003376:	d824      	bhi.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337c:	d018      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800337e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003382:	d81e      	bhi.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338c:	d007      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800338e:	e018      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003390:	4b66      	ldr	r3, [pc, #408]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	4a65      	ldr	r2, [pc, #404]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800339a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800339c:	e017      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3304      	adds	r3, #4
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 f821 	bl	80043ec <RCCEx_PLL2_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80033ae:	e00e      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3324      	adds	r3, #36	; 0x24
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 f8ca 	bl	8004550 <RCCEx_PLL3_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80033c0:	e005      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80033c8:	bf00      	nop
 80033ca:	e000      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80033cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033d4:	4b55      	ldr	r3, [pc, #340]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80033d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	4952      	ldr	r1, [pc, #328]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	650b      	str	r3, [r1, #80]	; 0x50
 80033e6:	e001      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d049      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003400:	d02e      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003406:	d828      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003408:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800340c:	d02a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800340e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003412:	d822      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003414:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003418:	d026      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800341a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800341e:	d81c      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003424:	d010      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800342a:	d816      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01d      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d111      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3304      	adds	r3, #4
 800343a:	2101      	movs	r1, #1
 800343c:	4618      	mov	r0, r3
 800343e:	f000 ffd5 	bl	80043ec <RCCEx_PLL2_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003446:	e012      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3324      	adds	r3, #36	; 0x24
 800344c:	2101      	movs	r1, #1
 800344e:	4618      	mov	r0, r3
 8003450:	f001 f87e 	bl	8004550 <RCCEx_PLL3_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003458:	e009      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
      break;
 800345e:	e006      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003460:	bf00      	nop
 8003462:	e004      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003464:	bf00      	nop
 8003466:	e002      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003468:	bf00      	nop
 800346a:	e000      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800346c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800346e:	7dfb      	ldrb	r3, [r7, #23]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003474:	4b2d      	ldr	r3, [pc, #180]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003478:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003480:	492a      	ldr	r1, [pc, #168]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003482:	4313      	orrs	r3, r2
 8003484:	650b      	str	r3, [r1, #80]	; 0x50
 8003486:	e001      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d04d      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800349e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a2:	d02e      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80034a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a8:	d828      	bhi.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80034aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ae:	d02a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d822      	bhi.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80034b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034ba:	d026      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80034bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034c0:	d81c      	bhi.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80034c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c6:	d010      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 80034c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034cc:	d816      	bhi.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01d      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80034d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034d6:	d111      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	2101      	movs	r1, #1
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 ff84 	bl	80043ec <RCCEx_PLL2_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80034e8:	e012      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3324      	adds	r3, #36	; 0x24
 80034ee:	2101      	movs	r1, #1
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 f82d 	bl	8004550 <RCCEx_PLL3_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80034fa:	e009      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003500:	e006      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003502:	bf00      	nop
 8003504:	e004      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003506:	bf00      	nop
 8003508:	e002      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800350e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10c      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003524:	4901      	ldr	r1, [pc, #4]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003526:	4313      	orrs	r3, r2
 8003528:	658b      	str	r3, [r1, #88]	; 0x58
 800352a:	e003      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800352c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d02f      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003548:	d00e      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800354a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800354e:	d814      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d015      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003558:	d10f      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355a:	4baf      	ldr	r3, [pc, #700]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	4aae      	ldr	r2, [pc, #696]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003566:	e00c      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f000 ff3c 	bl	80043ec <RCCEx_PLL2_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003578:	e003      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
      break;
 800357e:	e000      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003588:	4ba3      	ldr	r3, [pc, #652]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800358a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003594:	49a0      	ldr	r1, [pc, #640]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003596:	4313      	orrs	r3, r2
 8003598:	650b      	str	r3, [r1, #80]	; 0x50
 800359a:	e001      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d032      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d81b      	bhi.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80035b4:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035f3 	.word	0x080035f3
 80035c0:	080035cd 	.word	0x080035cd
 80035c4:	080035db 	.word	0x080035db
 80035c8:	080035f3 	.word	0x080035f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035cc:	4b92      	ldr	r3, [pc, #584]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	4a91      	ldr	r2, [pc, #580]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80035d8:	e00c      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 ff03 	bl	80043ec <RCCEx_PLL2_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80035ea:	e003      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	75fb      	strb	r3, [r7, #23]
      break;
 80035f0:	e000      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80035f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80035fa:	4b87      	ldr	r3, [pc, #540]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fe:	f023 0203 	bic.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	4984      	ldr	r1, [pc, #528]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003608:	4313      	orrs	r3, r2
 800360a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800360c:	e001      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8086 	beq.w	800372c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003620:	4b7e      	ldr	r3, [pc, #504]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a7d      	ldr	r2, [pc, #500]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800362c:	f7fd fc78 	bl	8000f20 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003632:	e009      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003634:	f7fd fc74 	bl	8000f20 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d902      	bls.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	75fb      	strb	r3, [r7, #23]
        break;
 8003646:	e005      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003648:	4b74      	ldr	r3, [pc, #464]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0ef      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d166      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800365a:	4b6f      	ldr	r3, [pc, #444]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800365c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003664:	4053      	eors	r3, r2
 8003666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366a:	2b00      	cmp	r3, #0
 800366c:	d013      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800366e:	4b6a      	ldr	r3, [pc, #424]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003676:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003678:	4b67      	ldr	r3, [pc, #412]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	4a66      	ldr	r2, [pc, #408]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800367e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003682:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a63      	ldr	r2, [pc, #396]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800368a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003690:	4a61      	ldr	r2, [pc, #388]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800369c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a0:	d115      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fd fc3d 	bl	8000f20 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036a8:	e00b      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036aa:	f7fd fc39 	bl	8000f20 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d902      	bls.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	75fb      	strb	r3, [r7, #23]
            break;
 80036c0:	e005      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036c2:	4b55      	ldr	r3, [pc, #340]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0ed      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d126      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036e2:	d10d      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80036e4:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036f2:	0919      	lsrs	r1, r3, #4
 80036f4:	4b4a      	ldr	r3, [pc, #296]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80036f6:	400b      	ands	r3, r1
 80036f8:	4947      	ldr	r1, [pc, #284]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	610b      	str	r3, [r1, #16]
 80036fe:	e005      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003700:	4b45      	ldr	r3, [pc, #276]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	4a44      	ldr	r2, [pc, #272]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003706:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800370a:	6113      	str	r3, [r2, #16]
 800370c:	4b42      	ldr	r3, [pc, #264]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800370e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371a:	493f      	ldr	r1, [pc, #252]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800371c:	4313      	orrs	r3, r2
 800371e:	670b      	str	r3, [r1, #112]	; 0x70
 8003720:	e004      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	75bb      	strb	r3, [r7, #22]
 8003726:	e001      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8085 	beq.w	8003844 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373e:	2b28      	cmp	r3, #40	; 0x28
 8003740:	d866      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	08003825 	.word	0x08003825
 800374c:	08003811 	.word	0x08003811
 8003750:	08003811 	.word	0x08003811
 8003754:	08003811 	.word	0x08003811
 8003758:	08003811 	.word	0x08003811
 800375c:	08003811 	.word	0x08003811
 8003760:	08003811 	.word	0x08003811
 8003764:	08003811 	.word	0x08003811
 8003768:	080037ed 	.word	0x080037ed
 800376c:	08003811 	.word	0x08003811
 8003770:	08003811 	.word	0x08003811
 8003774:	08003811 	.word	0x08003811
 8003778:	08003811 	.word	0x08003811
 800377c:	08003811 	.word	0x08003811
 8003780:	08003811 	.word	0x08003811
 8003784:	08003811 	.word	0x08003811
 8003788:	080037ff 	.word	0x080037ff
 800378c:	08003811 	.word	0x08003811
 8003790:	08003811 	.word	0x08003811
 8003794:	08003811 	.word	0x08003811
 8003798:	08003811 	.word	0x08003811
 800379c:	08003811 	.word	0x08003811
 80037a0:	08003811 	.word	0x08003811
 80037a4:	08003811 	.word	0x08003811
 80037a8:	08003825 	.word	0x08003825
 80037ac:	08003811 	.word	0x08003811
 80037b0:	08003811 	.word	0x08003811
 80037b4:	08003811 	.word	0x08003811
 80037b8:	08003811 	.word	0x08003811
 80037bc:	08003811 	.word	0x08003811
 80037c0:	08003811 	.word	0x08003811
 80037c4:	08003811 	.word	0x08003811
 80037c8:	08003825 	.word	0x08003825
 80037cc:	08003811 	.word	0x08003811
 80037d0:	08003811 	.word	0x08003811
 80037d4:	08003811 	.word	0x08003811
 80037d8:	08003811 	.word	0x08003811
 80037dc:	08003811 	.word	0x08003811
 80037e0:	08003811 	.word	0x08003811
 80037e4:	08003811 	.word	0x08003811
 80037e8:	08003825 	.word	0x08003825
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	2101      	movs	r1, #1
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fdfa 	bl	80043ec <RCCEx_PLL2_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80037fc:	e013      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3324      	adds	r3, #36	; 0x24
 8003802:	2101      	movs	r1, #1
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fea3 	bl	8004550 <RCCEx_PLL3_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800380e:	e00a      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	75fb      	strb	r3, [r7, #23]
      break;
 8003814:	e007      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003816:	bf00      	nop
 8003818:	58024400 	.word	0x58024400
 800381c:	58024800 	.word	0x58024800
 8003820:	00ffffcf 	.word	0x00ffffcf
      break;
 8003824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003826:	7dfb      	ldrb	r3, [r7, #23]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d109      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800382c:	4b96      	ldr	r3, [pc, #600]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800382e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003830:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003838:	4993      	ldr	r1, [pc, #588]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	654b      	str	r3, [r1, #84]	; 0x54
 800383e:	e001      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d038      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003854:	2b05      	cmp	r3, #5
 8003856:	d821      	bhi.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	080038a3 	.word	0x080038a3
 8003864:	08003879 	.word	0x08003879
 8003868:	0800388b 	.word	0x0800388b
 800386c:	080038a3 	.word	0x080038a3
 8003870:	080038a3 	.word	0x080038a3
 8003874:	080038a3 	.word	0x080038a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	2101      	movs	r1, #1
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fdb4 	bl	80043ec <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003888:	e00c      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3324      	adds	r3, #36	; 0x24
 800388e:	2101      	movs	r1, #1
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fe5d 	bl	8004550 <RCCEx_PLL3_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800389a:	e003      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	75fb      	strb	r3, [r7, #23]
      break;
 80038a0:	e000      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80038a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038aa:	4b77      	ldr	r3, [pc, #476]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	f023 0207 	bic.w	r2, r3, #7
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b6:	4974      	ldr	r1, [pc, #464]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	654b      	str	r3, [r1, #84]	; 0x54
 80038bc:	e001      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d03a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d821      	bhi.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80038d8:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	08003923 	.word	0x08003923
 80038e4:	080038f9 	.word	0x080038f9
 80038e8:	0800390b 	.word	0x0800390b
 80038ec:	08003923 	.word	0x08003923
 80038f0:	08003923 	.word	0x08003923
 80038f4:	08003923 	.word	0x08003923
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	2101      	movs	r1, #1
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fd74 	bl	80043ec <RCCEx_PLL2_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003908:	e00c      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3324      	adds	r3, #36	; 0x24
 800390e:	2101      	movs	r1, #1
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fe1d 	bl	8004550 <RCCEx_PLL3_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800391a:	e003      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	75fb      	strb	r3, [r7, #23]
      break;
 8003920:	e000      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800392a:	4b57      	ldr	r3, [pc, #348]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	f023 0207 	bic.w	r2, r3, #7
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	4953      	ldr	r1, [pc, #332]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800393a:	4313      	orrs	r3, r2
 800393c:	658b      	str	r3, [r1, #88]	; 0x58
 800393e:	e001      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003940:	7dfb      	ldrb	r3, [r7, #23]
 8003942:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d04b      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800395a:	d02e      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800395c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003960:	d828      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003966:	d02a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396c:	d822      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800396e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003972:	d026      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003974:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003978:	d81c      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800397a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800397e:	d010      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003984:	d816      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01d      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800398a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800398e:	d111      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fd28 	bl	80043ec <RCCEx_PLL2_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80039a0:	e012      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3324      	adds	r3, #36	; 0x24
 80039a6:	2102      	movs	r1, #2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fdd1 	bl	8004550 <RCCEx_PLL3_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80039b2:	e009      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	75fb      	strb	r3, [r7, #23]
      break;
 80039b8:	e006      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80039ba:	bf00      	nop
 80039bc:	e004      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80039be:	bf00      	nop
 80039c0:	e002      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80039c2:	bf00      	nop
 80039c4:	e000      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80039c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ce:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80039d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039dc:	492a      	ldr	r1, [pc, #168]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	654b      	str	r3, [r1, #84]	; 0x54
 80039e2:	e001      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d04d      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80039fe:	d02e      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003a00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a04:	d828      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0a:	d02a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a10:	d822      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003a12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a16:	d026      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003a18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a1c:	d81c      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a22:	d010      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a28:	d816      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01d      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a32:	d111      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fcd6 	bl	80043ec <RCCEx_PLL2_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a44:	e012      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3324      	adds	r3, #36	; 0x24
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fd7f 	bl	8004550 <RCCEx_PLL3_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a56:	e009      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a5c:	e006      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e004      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a80:	4901      	ldr	r1, [pc, #4]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	658b      	str	r3, [r1, #88]	; 0x58
 8003a86:	e003      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d04b      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aa2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003aa6:	d02e      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003aa8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003aac:	d828      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab2:	d02a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab8:	d822      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003aba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003abe:	d026      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003ac0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ac4:	d81c      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aca:	d010      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ad0:	d816      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01d      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ada:	d111      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fc82 	bl	80043ec <RCCEx_PLL2_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003aec:	e012      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3324      	adds	r3, #36	; 0x24
 8003af2:	2102      	movs	r1, #2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fd2b 	bl	8004550 <RCCEx_PLL3_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003afe:	e009      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	75fb      	strb	r3, [r7, #23]
      break;
 8003b04:	e006      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003b06:	bf00      	nop
 8003b08:	e004      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e002      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e000      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b1a:	4b9d      	ldr	r3, [pc, #628]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b28:	4999      	ldr	r1, [pc, #612]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b2e:	e001      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4a:	d10a      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3324      	adds	r3, #36	; 0x24
 8003b50:	2102      	movs	r1, #2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fcfc 	bl	8004550 <RCCEx_PLL3_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b62:	4b8b      	ldr	r3, [pc, #556]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b70:	4987      	ldr	r1, [pc, #540]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01a      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8c:	d10a      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3324      	adds	r3, #36	; 0x24
 8003b92:	2102      	movs	r1, #2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fcdb 	bl	8004550 <RCCEx_PLL3_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ba4:	4b7a      	ldr	r3, [pc, #488]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb2:	4977      	ldr	r1, [pc, #476]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d034      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bce:	d01d      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bd4:	d817      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bde:	d009      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003be0:	e011      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fbff 	bl	80043ec <RCCEx_PLL2_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003bf2:	e00c      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3324      	adds	r3, #36	; 0x24
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fca8 	bl	8004550 <RCCEx_PLL3_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003c04:	e003      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	75fb      	strb	r3, [r7, #23]
      break;
 8003c0a:	e000      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c14:	4b5e      	ldr	r3, [pc, #376]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c22:	495b      	ldr	r1, [pc, #364]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	658b      	str	r3, [r1, #88]	; 0x58
 8003c28:	e001      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d033      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c44:	d01c      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003c46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c4a:	d816      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c50:	d003      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c56:	d007      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003c58:	e00f      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5a:	4b4d      	ldr	r3, [pc, #308]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	4a4c      	ldr	r2, [pc, #304]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c66:	e00c      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3324      	adds	r3, #36	; 0x24
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fc6e 	bl	8004550 <RCCEx_PLL3_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c78:	e003      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c7e:	e000      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c88:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c96:	493e      	ldr	r1, [pc, #248]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	654b      	str	r3, [r1, #84]	; 0x54
 8003c9c:	e001      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ca0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d029      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cba:	d007      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003cbc:	e00f      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cbe:	4b34      	ldr	r3, [pc, #208]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	4a33      	ldr	r2, [pc, #204]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003cca:	e00b      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	2102      	movs	r1, #2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fb8a 	bl	80043ec <RCCEx_PLL2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003cea:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf6:	4926      	ldr	r1, [pc, #152]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cfc:	e001      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3324      	adds	r3, #36	; 0x24
 8003d12:	2102      	movs	r1, #2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fc1b 	bl	8004550 <RCCEx_PLL3_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d033      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d38:	d017      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d3e:	d811      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d44:	d013      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d4a:	d80b      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d010      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d54:	d106      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d56:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003d62:	e007      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	75fb      	strb	r3, [r7, #23]
      break;
 8003d68:	e004      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e002      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d86:	4902      	ldr	r1, [pc, #8]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	654b      	str	r3, [r1, #84]	; 0x54
 8003d8c:	e004      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003d8e:	bf00      	nop
 8003d90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003da4:	4b31      	ldr	r3, [pc, #196]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	492e      	ldr	r1, [pc, #184]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003dc2:	4b2a      	ldr	r3, [pc, #168]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dd0:	4926      	ldr	r1, [pc, #152]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003de2:	4b22      	ldr	r3, [pc, #136]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dee:	491f      	ldr	r1, [pc, #124]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00d      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e00:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e0a:	6113      	str	r3, [r2, #16]
 8003e0c:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e16:	4915      	ldr	r1, [pc, #84]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	da08      	bge.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	4906      	ldr	r1, [pc, #24]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003e56:	7dbb      	ldrb	r3, [r7, #22]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	58024400 	.word	0x58024400

08003e70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003e74:	f7ff f818 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	4904      	ldr	r1, [pc, #16]	; (8003e98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	58024400 	.word	0x58024400
 8003e98:	08009f10 	.word	0x08009f10

08003e9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ea4:	4ba1      	ldr	r3, [pc, #644]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003eae:	4b9f      	ldr	r3, [pc, #636]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	0b1b      	lsrs	r3, r3, #12
 8003eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003eba:	4b9c      	ldr	r3, [pc, #624]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003ec6:	4b99      	ldr	r3, [pc, #612]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eca:	08db      	lsrs	r3, r3, #3
 8003ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ede:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8111 	beq.w	800410c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	f000 8083 	beq.w	8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	f200 80a1 	bhi.w	800403c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d056      	beq.n	8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f06:	e099      	b.n	800403c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f08:	4b88      	ldr	r3, [pc, #544]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d02d      	beq.n	8003f70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f14:	4b85      	ldr	r3, [pc, #532]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	08db      	lsrs	r3, r3, #3
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	4a84      	ldr	r2, [pc, #528]	; (8004130 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
 8003f24:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	ee07 3a90 	vmov	s15, r3
 8003f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3e:	4b7b      	ldr	r3, [pc, #492]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003f6e:	e087      	b.n	8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f82:	4b6a      	ldr	r3, [pc, #424]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fb2:	e065      	b.n	8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800413c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc6:	4b59      	ldr	r3, [pc, #356]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ff6:	e043      	b.n	8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004002:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004140 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800400a:	4b48      	ldr	r3, [pc, #288]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401a:	ed97 6a03 	vldr	s12, [r7, #12]
 800401e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800402e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004036:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800403a:	e021      	b.n	8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004046:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800413c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800404a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800404e:	4b37      	ldr	r3, [pc, #220]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004062:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800406a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800406e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800407e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004080:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	0a5b      	lsrs	r3, r3, #9
 8004086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004096:	ee37 7a87 	vadd.f32	s14, s15, s14
 800409a:	edd7 6a07 	vldr	s13, [r7, #28]
 800409e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a6:	ee17 2a90 	vmov	r2, s15
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80040ae:	4b1f      	ldr	r3, [pc, #124]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	0c1b      	lsrs	r3, r3, #16
 80040b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b8:	ee07 3a90 	vmov	s15, r3
 80040bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80040cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d4:	ee17 2a90 	vmov	r2, s15
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	0e1b      	lsrs	r3, r3, #24
 80040e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80040fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004102:	ee17 2a90 	vmov	r2, s15
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800410a:	e008      	b.n	800411e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	609a      	str	r2, [r3, #8]
}
 800411e:	bf00      	nop
 8004120:	3724      	adds	r7, #36	; 0x24
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	58024400 	.word	0x58024400
 8004130:	03d09000 	.word	0x03d09000
 8004134:	46000000 	.word	0x46000000
 8004138:	4c742400 	.word	0x4c742400
 800413c:	4a742400 	.word	0x4a742400
 8004140:	4bbebc20 	.word	0x4bbebc20

08004144 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	; 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800414c:	4ba1      	ldr	r3, [pc, #644]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004156:	4b9f      	ldr	r3, [pc, #636]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	0d1b      	lsrs	r3, r3, #20
 800415c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004160:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004162:	4b9c      	ldr	r3, [pc, #624]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800416e:	4b99      	ldr	r3, [pc, #612]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	08db      	lsrs	r3, r3, #3
 8004174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004186:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8111 	beq.w	80043b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b02      	cmp	r3, #2
 8004196:	f000 8083 	beq.w	80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2b02      	cmp	r3, #2
 800419e:	f200 80a1 	bhi.w	80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d056      	beq.n	800425c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80041ae:	e099      	b.n	80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041b0:	4b88      	ldr	r3, [pc, #544]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d02d      	beq.n	8004218 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041bc:	4b85      	ldr	r3, [pc, #532]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	08db      	lsrs	r3, r3, #3
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	4a84      	ldr	r2, [pc, #528]	; (80043d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
 80041cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	ee07 3a90 	vmov	s15, r3
 80041d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e6:	4b7b      	ldr	r3, [pc, #492]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800420a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004212:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004216:	e087      	b.n	8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004222:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80043e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422a:	4b6a      	ldr	r3, [pc, #424]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423a:	ed97 6a03 	vldr	s12, [r7, #12]
 800423e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800424e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800425a:	e065      	b.n	8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80043e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800426a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426e:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004282:	eddf 5a56 	vldr	s11, [pc, #344]	; 80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800429e:	e043      	b.n	8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80043e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80042ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b2:	4b48      	ldr	r3, [pc, #288]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042e2:	e021      	b.n	8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80043e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042f6:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004306:	ed97 6a03 	vldr	s12, [r7, #12]
 800430a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800430e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800431a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800431e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004322:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004326:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004328:	4b2a      	ldr	r3, [pc, #168]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	0a5b      	lsrs	r3, r3, #9
 800432e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800433e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004342:	edd7 6a07 	vldr	s13, [r7, #28]
 8004346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800434a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800434e:	ee17 2a90 	vmov	r2, s15
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004356:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800436c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004370:	edd7 6a07 	vldr	s13, [r7, #28]
 8004374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800437c:	ee17 2a90 	vmov	r2, s15
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004384:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	0e1b      	lsrs	r3, r3, #24
 800438a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800439a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800439e:	edd7 6a07 	vldr	s13, [r7, #28]
 80043a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043aa:	ee17 2a90 	vmov	r2, s15
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80043b2:	e008      	b.n	80043c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
}
 80043c6:	bf00      	nop
 80043c8:	3724      	adds	r7, #36	; 0x24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	58024400 	.word	0x58024400
 80043d8:	03d09000 	.word	0x03d09000
 80043dc:	46000000 	.word	0x46000000
 80043e0:	4c742400 	.word	0x4c742400
 80043e4:	4a742400 	.word	0x4a742400
 80043e8:	4bbebc20 	.word	0x4bbebc20

080043ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043fa:	4b53      	ldr	r3, [pc, #332]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	2b03      	cmp	r3, #3
 8004404:	d101      	bne.n	800440a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e099      	b.n	800453e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800440a:	4b4f      	ldr	r3, [pc, #316]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a4e      	ldr	r2, [pc, #312]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 8004410:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004416:	f7fc fd83 	bl	8000f20 <HAL_GetTick>
 800441a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800441c:	e008      	b.n	8004430 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800441e:	f7fc fd7f 	bl	8000f20 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e086      	b.n	800453e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004430:	4b45      	ldr	r3, [pc, #276]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f0      	bne.n	800441e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800443c:	4b42      	ldr	r3, [pc, #264]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	031b      	lsls	r3, r3, #12
 800444a:	493f      	ldr	r1, [pc, #252]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 800444c:	4313      	orrs	r3, r2
 800444e:	628b      	str	r3, [r1, #40]	; 0x28
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	3b01      	subs	r3, #1
 8004456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	3b01      	subs	r3, #1
 8004460:	025b      	lsls	r3, r3, #9
 8004462:	b29b      	uxth	r3, r3
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	3b01      	subs	r3, #1
 800446c:	041b      	lsls	r3, r3, #16
 800446e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	3b01      	subs	r3, #1
 800447a:	061b      	lsls	r3, r3, #24
 800447c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004480:	4931      	ldr	r1, [pc, #196]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004486:	4b30      	ldr	r3, [pc, #192]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	492d      	ldr	r1, [pc, #180]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 8004494:	4313      	orrs	r3, r2
 8004496:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004498:	4b2b      	ldr	r3, [pc, #172]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	f023 0220 	bic.w	r2, r3, #32
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	4928      	ldr	r1, [pc, #160]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044aa:	4b27      	ldr	r3, [pc, #156]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	4a26      	ldr	r2, [pc, #152]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 80044b0:	f023 0310 	bic.w	r3, r3, #16
 80044b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 80044b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <RCCEx_PLL2_Config+0x160>)
 80044bc:	4013      	ands	r3, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	69d2      	ldr	r2, [r2, #28]
 80044c2:	00d2      	lsls	r2, r2, #3
 80044c4:	4920      	ldr	r1, [pc, #128]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044ca:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 80044d0:	f043 0310 	orr.w	r3, r3, #16
 80044d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d106      	bne.n	80044ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044dc:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	4a19      	ldr	r2, [pc, #100]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 80044e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044e8:	e00f      	b.n	800450a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d106      	bne.n	80044fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044f0:	4b15      	ldr	r3, [pc, #84]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	4a14      	ldr	r2, [pc, #80]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 80044f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044fc:	e005      	b.n	800450a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044fe:	4b12      	ldr	r3, [pc, #72]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	4a11      	ldr	r2, [pc, #68]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 8004504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004508:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800450a:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a0e      	ldr	r2, [pc, #56]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 8004510:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004516:	f7fc fd03 	bl	8000f20 <HAL_GetTick>
 800451a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800451c:	e008      	b.n	8004530 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800451e:	f7fc fcff 	bl	8000f20 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e006      	b.n	800453e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <RCCEx_PLL2_Config+0x15c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800453c:	7bfb      	ldrb	r3, [r7, #15]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	58024400 	.word	0x58024400
 800454c:	ffff0007 	.word	0xffff0007

08004550 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800455e:	4b53      	ldr	r3, [pc, #332]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b03      	cmp	r3, #3
 8004568:	d101      	bne.n	800456e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e099      	b.n	80046a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800456e:	4b4f      	ldr	r3, [pc, #316]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a4e      	ldr	r2, [pc, #312]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457a:	f7fc fcd1 	bl	8000f20 <HAL_GetTick>
 800457e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004580:	e008      	b.n	8004594 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004582:	f7fc fccd 	bl	8000f20 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e086      	b.n	80046a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004594:	4b45      	ldr	r3, [pc, #276]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f0      	bne.n	8004582 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045a0:	4b42      	ldr	r3, [pc, #264]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	051b      	lsls	r3, r3, #20
 80045ae:	493f      	ldr	r1, [pc, #252]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	628b      	str	r3, [r1, #40]	; 0x28
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	025b      	lsls	r3, r3, #9
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	3b01      	subs	r3, #1
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045e4:	4931      	ldr	r1, [pc, #196]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045ea:	4b30      	ldr	r3, [pc, #192]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	492d      	ldr	r1, [pc, #180]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045fc:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	4928      	ldr	r1, [pc, #160]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 800460a:	4313      	orrs	r3, r2
 800460c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800460e:	4b27      	ldr	r3, [pc, #156]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	4a26      	ldr	r2, [pc, #152]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004618:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800461a:	4b24      	ldr	r3, [pc, #144]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 800461c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <RCCEx_PLL3_Config+0x160>)
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	69d2      	ldr	r2, [r2, #28]
 8004626:	00d2      	lsls	r2, r2, #3
 8004628:	4920      	ldr	r1, [pc, #128]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 800462a:	4313      	orrs	r3, r2
 800462c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800462e:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	4a1e      	ldr	r2, [pc, #120]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004638:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004640:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	4a19      	ldr	r2, [pc, #100]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004646:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800464a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800464c:	e00f      	b.n	800466e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d106      	bne.n	8004662 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004654:	4b15      	ldr	r3, [pc, #84]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 800465a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800465e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004660:	e005      	b.n	800466e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	4a11      	ldr	r2, [pc, #68]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004668:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a0e      	ldr	r2, [pc, #56]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467a:	f7fc fc51 	bl	8000f20 <HAL_GetTick>
 800467e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004680:	e008      	b.n	8004694 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004682:	f7fc fc4d 	bl	8000f20 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e006      	b.n	80046a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <RCCEx_PLL3_Config+0x15c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	58024400 	.word	0x58024400
 80046b0:	ffff0007 	.word	0xffff0007

080046b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e049      	b.n	800475a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f841 	bl	8004762 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f000 fa00 	bl	8004af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	d001      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e054      	b.n	800483a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a26      	ldr	r2, [pc, #152]	; (8004848 <HAL_TIM_Base_Start_IT+0xd0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d022      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d01d      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a22      	ldr	r2, [pc, #136]	; (800484c <HAL_TIM_Base_Start_IT+0xd4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d018      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a21      	ldr	r2, [pc, #132]	; (8004850 <HAL_TIM_Base_Start_IT+0xd8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <HAL_TIM_Base_Start_IT+0xdc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <HAL_TIM_Base_Start_IT+0xe0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1c      	ldr	r2, [pc, #112]	; (800485c <HAL_TIM_Base_Start_IT+0xe4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x80>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1b      	ldr	r2, [pc, #108]	; (8004860 <HAL_TIM_Base_Start_IT+0xe8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d115      	bne.n	8004824 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_TIM_Base_Start_IT+0xec>)
 8004800:	4013      	ands	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b06      	cmp	r3, #6
 8004808:	d015      	beq.n	8004836 <HAL_TIM_Base_Start_IT+0xbe>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004810:	d011      	beq.n	8004836 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004822:	e008      	b.n	8004836 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e000      	b.n	8004838 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004836:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40000c00 	.word	0x40000c00
 8004858:	40010400 	.word	0x40010400
 800485c:	40001800 	.word	0x40001800
 8004860:	40014000 	.word	0x40014000
 8004864:	00010007 	.word	0x00010007

08004868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b02      	cmp	r3, #2
 800487c:	d122      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b02      	cmp	r3, #2
 800488a:	d11b      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0202 	mvn.w	r2, #2
 8004894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f905 	bl	8004aba <HAL_TIM_IC_CaptureCallback>
 80048b0:	e005      	b.n	80048be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f8f7 	bl	8004aa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f908 	bl	8004ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d122      	bne.n	8004918 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d11b      	bne.n	8004918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0204 	mvn.w	r2, #4
 80048e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8db 	bl	8004aba <HAL_TIM_IC_CaptureCallback>
 8004904:	e005      	b.n	8004912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f8cd 	bl	8004aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8de 	bl	8004ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b08      	cmp	r3, #8
 8004924:	d122      	bne.n	800496c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b08      	cmp	r3, #8
 8004932:	d11b      	bne.n	800496c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0208 	mvn.w	r2, #8
 800493c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2204      	movs	r2, #4
 8004942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8b1 	bl	8004aba <HAL_TIM_IC_CaptureCallback>
 8004958:	e005      	b.n	8004966 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f8a3 	bl	8004aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f8b4 	bl	8004ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b10      	cmp	r3, #16
 8004978:	d122      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b10      	cmp	r3, #16
 8004986:	d11b      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0210 	mvn.w	r2, #16
 8004990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2208      	movs	r2, #8
 8004996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f887 	bl	8004aba <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f879 	bl	8004aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f88a 	bl	8004ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d10e      	bne.n	80049ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d107      	bne.n	80049ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0201 	mvn.w	r2, #1
 80049e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fc f8e6 	bl	8000bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d10e      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a04:	2b80      	cmp	r3, #128	; 0x80
 8004a06:	d107      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f914 	bl	8004c40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a26:	d10e      	bne.n	8004a46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d107      	bne.n	8004a46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f907 	bl	8004c54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d10e      	bne.n	8004a72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d107      	bne.n	8004a72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f838 	bl	8004ae2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d10e      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d107      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f06f 0220 	mvn.w	r2, #32
 8004a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8c7 	bl	8004c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a40      	ldr	r2, [pc, #256]	; (8004c0c <TIM_Base_SetConfig+0x114>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d013      	beq.n	8004b38 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b16:	d00f      	beq.n	8004b38 <TIM_Base_SetConfig+0x40>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a3d      	ldr	r2, [pc, #244]	; (8004c10 <TIM_Base_SetConfig+0x118>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00b      	beq.n	8004b38 <TIM_Base_SetConfig+0x40>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a3c      	ldr	r2, [pc, #240]	; (8004c14 <TIM_Base_SetConfig+0x11c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_Base_SetConfig+0x40>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a3b      	ldr	r2, [pc, #236]	; (8004c18 <TIM_Base_SetConfig+0x120>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_Base_SetConfig+0x40>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a3a      	ldr	r2, [pc, #232]	; (8004c1c <TIM_Base_SetConfig+0x124>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d108      	bne.n	8004b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a2f      	ldr	r2, [pc, #188]	; (8004c0c <TIM_Base_SetConfig+0x114>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01f      	beq.n	8004b92 <TIM_Base_SetConfig+0x9a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d01b      	beq.n	8004b92 <TIM_Base_SetConfig+0x9a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a2c      	ldr	r2, [pc, #176]	; (8004c10 <TIM_Base_SetConfig+0x118>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d017      	beq.n	8004b92 <TIM_Base_SetConfig+0x9a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a2b      	ldr	r2, [pc, #172]	; (8004c14 <TIM_Base_SetConfig+0x11c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <TIM_Base_SetConfig+0x9a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a2a      	ldr	r2, [pc, #168]	; (8004c18 <TIM_Base_SetConfig+0x120>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00f      	beq.n	8004b92 <TIM_Base_SetConfig+0x9a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a29      	ldr	r2, [pc, #164]	; (8004c1c <TIM_Base_SetConfig+0x124>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00b      	beq.n	8004b92 <TIM_Base_SetConfig+0x9a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a28      	ldr	r2, [pc, #160]	; (8004c20 <TIM_Base_SetConfig+0x128>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <TIM_Base_SetConfig+0x9a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a27      	ldr	r2, [pc, #156]	; (8004c24 <TIM_Base_SetConfig+0x12c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d003      	beq.n	8004b92 <TIM_Base_SetConfig+0x9a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <TIM_Base_SetConfig+0x130>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d108      	bne.n	8004ba4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a10      	ldr	r2, [pc, #64]	; (8004c0c <TIM_Base_SetConfig+0x114>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00f      	beq.n	8004bf0 <TIM_Base_SetConfig+0xf8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a12      	ldr	r2, [pc, #72]	; (8004c1c <TIM_Base_SetConfig+0x124>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00b      	beq.n	8004bf0 <TIM_Base_SetConfig+0xf8>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a11      	ldr	r2, [pc, #68]	; (8004c20 <TIM_Base_SetConfig+0x128>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d007      	beq.n	8004bf0 <TIM_Base_SetConfig+0xf8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a10      	ldr	r2, [pc, #64]	; (8004c24 <TIM_Base_SetConfig+0x12c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_Base_SetConfig+0xf8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a0f      	ldr	r2, [pc, #60]	; (8004c28 <TIM_Base_SetConfig+0x130>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d103      	bne.n	8004bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	615a      	str	r2, [r3, #20]
}
 8004bfe:	bf00      	nop
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40010000 	.word	0x40010000
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40010400 	.word	0x40010400
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800

08004c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e042      	b.n	8004d00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fb ffc9 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2224      	movs	r2, #36	; 0x24
 8004c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0201 	bic.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fbea 	bl	8005484 <UART_SetConfig>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e022      	b.n	8004d00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 f946 	bl	8005f54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f001 f9cd 	bl	8006098 <UART_CheckIdleState>
 8004cfe:	4603      	mov	r3, r0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b0ba      	sub	sp, #232	; 0xe8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d32:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d36:	4013      	ands	r3, r2
 8004d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d11b      	bne.n	8004d7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d015      	beq.n	8004d7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d105      	bne.n	8004d68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d009      	beq.n	8004d7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 835a 	beq.w	8005426 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
      }
      return;
 8004d7a:	e354      	b.n	8005426 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 811f 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004d8a:	4b8b      	ldr	r3, [pc, #556]	; (8004fb8 <HAL_UART_IRQHandler+0x2b0>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d96:	4b89      	ldr	r3, [pc, #548]	; (8004fbc <HAL_UART_IRQHandler+0x2b4>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 8112 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d011      	beq.n	8004dd0 <HAL_UART_IRQHandler+0xc8>
 8004dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00b      	beq.n	8004dd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc6:	f043 0201 	orr.w	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d011      	beq.n	8004e00 <HAL_UART_IRQHandler+0xf8>
 8004ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00b      	beq.n	8004e00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2202      	movs	r2, #2
 8004dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df6:	f043 0204 	orr.w	r2, r3, #4
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d011      	beq.n	8004e30 <HAL_UART_IRQHandler+0x128>
 8004e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e26:	f043 0202 	orr.w	r2, r3, #2
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d017      	beq.n	8004e6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004e4c:	4b5a      	ldr	r3, [pc, #360]	; (8004fb8 <HAL_UART_IRQHandler+0x2b0>)
 8004e4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2208      	movs	r2, #8
 8004e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e62:	f043 0208 	orr.w	r2, r3, #8
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d012      	beq.n	8004e9e <HAL_UART_IRQHandler+0x196>
 8004e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00c      	beq.n	8004e9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e94:	f043 0220 	orr.w	r2, r3, #32
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 82c0 	beq.w	800542a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d013      	beq.n	8004ede <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d005      	beq.n	8004f02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004efa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d04f      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f001 f9dc 	bl	80062c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b40      	cmp	r3, #64	; 0x40
 8004f14:	d141      	bne.n	8004f9a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1d9      	bne.n	8004f16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d013      	beq.n	8004f92 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f6e:	4a14      	ldr	r2, [pc, #80]	; (8004fc0 <HAL_UART_IRQHandler+0x2b8>)
 8004f70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fc fbe8 	bl	800174c <HAL_DMA_Abort_IT>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d017      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f90:	e00f      	b.n	8004fb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fa60 	bl	8005458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f98:	e00b      	b.n	8004fb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fa5c 	bl	8005458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	e007      	b.n	8004fb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fa58 	bl	8005458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004fb0:	e23b      	b.n	800542a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb2:	bf00      	nop
    return;
 8004fb4:	e239      	b.n	800542a <HAL_UART_IRQHandler+0x722>
 8004fb6:	bf00      	nop
 8004fb8:	10000001 	.word	0x10000001
 8004fbc:	04000120 	.word	0x04000120
 8004fc0:	0800638d 	.word	0x0800638d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	f040 81ce 	bne.w	800536a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 81c7 	beq.w	800536a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 81c0 	beq.w	800536a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2210      	movs	r2, #16
 8004ff0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	f040 813b 	bne.w	8005278 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a8b      	ldr	r2, [pc, #556]	; (8005238 <HAL_UART_IRQHandler+0x530>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d059      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a89      	ldr	r2, [pc, #548]	; (800523c <HAL_UART_IRQHandler+0x534>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d053      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a87      	ldr	r2, [pc, #540]	; (8005240 <HAL_UART_IRQHandler+0x538>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d04d      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a85      	ldr	r2, [pc, #532]	; (8005244 <HAL_UART_IRQHandler+0x53c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d047      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a83      	ldr	r2, [pc, #524]	; (8005248 <HAL_UART_IRQHandler+0x540>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d041      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a81      	ldr	r2, [pc, #516]	; (800524c <HAL_UART_IRQHandler+0x544>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d03b      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a7f      	ldr	r2, [pc, #508]	; (8005250 <HAL_UART_IRQHandler+0x548>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d035      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a7d      	ldr	r2, [pc, #500]	; (8005254 <HAL_UART_IRQHandler+0x54c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d02f      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a7b      	ldr	r2, [pc, #492]	; (8005258 <HAL_UART_IRQHandler+0x550>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d029      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a79      	ldr	r2, [pc, #484]	; (800525c <HAL_UART_IRQHandler+0x554>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d023      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a77      	ldr	r2, [pc, #476]	; (8005260 <HAL_UART_IRQHandler+0x558>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01d      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a75      	ldr	r2, [pc, #468]	; (8005264 <HAL_UART_IRQHandler+0x55c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d017      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a73      	ldr	r2, [pc, #460]	; (8005268 <HAL_UART_IRQHandler+0x560>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d011      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a71      	ldr	r2, [pc, #452]	; (800526c <HAL_UART_IRQHandler+0x564>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a6f      	ldr	r2, [pc, #444]	; (8005270 <HAL_UART_IRQHandler+0x568>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d005      	beq.n	80050c2 <HAL_UART_IRQHandler+0x3ba>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6d      	ldr	r2, [pc, #436]	; (8005274 <HAL_UART_IRQHandler+0x56c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d105      	bne.n	80050ce <HAL_UART_IRQHandler+0x3c6>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	e004      	b.n	80050d8 <HAL_UART_IRQHandler+0x3d0>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 81a4 	beq.w	800542e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050f0:	429a      	cmp	r2, r3
 80050f2:	f080 819c 	bcs.w	800542e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800510a:	f000 8086 	beq.w	800521a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800512a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005138:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800513c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005144:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1da      	bne.n	800510e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3308      	adds	r3, #8
 800515e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3308      	adds	r3, #8
 8005178:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800517c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005180:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005184:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800518e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e1      	bne.n	8005158 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3308      	adds	r3, #8
 800519a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3308      	adds	r3, #8
 80051b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e3      	bne.n	8005194 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ea:	f023 0310 	bic.w	r3, r3, #16
 80051ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80051fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005202:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800520a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e4      	bne.n	80051da <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005214:	4618      	mov	r0, r3
 8005216:	f7fb ff7b 	bl	8001110 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005226:	b29b      	uxth	r3, r3
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	b29b      	uxth	r3, r3
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f91c 	bl	800546c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005234:	e0fb      	b.n	800542e <HAL_UART_IRQHandler+0x726>
 8005236:	bf00      	nop
 8005238:	40020010 	.word	0x40020010
 800523c:	40020028 	.word	0x40020028
 8005240:	40020040 	.word	0x40020040
 8005244:	40020058 	.word	0x40020058
 8005248:	40020070 	.word	0x40020070
 800524c:	40020088 	.word	0x40020088
 8005250:	400200a0 	.word	0x400200a0
 8005254:	400200b8 	.word	0x400200b8
 8005258:	40020410 	.word	0x40020410
 800525c:	40020428 	.word	0x40020428
 8005260:	40020440 	.word	0x40020440
 8005264:	40020458 	.word	0x40020458
 8005268:	40020470 	.word	0x40020470
 800526c:	40020488 	.word	0x40020488
 8005270:	400204a0 	.word	0x400204a0
 8005274:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005284:	b29b      	uxth	r3, r3
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80cc 	beq.w	8005432 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800529a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 80c7 	beq.w	8005432 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052c6:	647b      	str	r3, [r7, #68]	; 0x44
 80052c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e4      	bne.n	80052a4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3308      	adds	r3, #8
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	623b      	str	r3, [r7, #32]
   return(result);
 80052ea:	6a3a      	ldr	r2, [r7, #32]
 80052ec:	4b54      	ldr	r3, [pc, #336]	; (8005440 <HAL_UART_IRQHandler+0x738>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3308      	adds	r3, #8
 80052fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052fe:	633a      	str	r2, [r7, #48]	; 0x30
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e3      	bne.n	80052da <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	60fb      	str	r3, [r7, #12]
   return(result);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0310 	bic.w	r3, r3, #16
 800533a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	69b9      	ldr	r1, [r7, #24]
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	617b      	str	r3, [r7, #20]
   return(result);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e4      	bne.n	8005326 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800535c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f882 	bl	800546c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005368:	e063      	b.n	8005432 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00e      	beq.n	8005394 <HAL_UART_IRQHandler+0x68c>
 8005376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800537a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d008      	beq.n	8005394 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800538a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f001 f83e 	bl	800640e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005392:	e051      	b.n	8005438 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539c:	2b00      	cmp	r3, #0
 800539e:	d014      	beq.n	80053ca <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80053a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80053ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d03a      	beq.n	8005436 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	4798      	blx	r3
    }
    return;
 80053c8:	e035      	b.n	8005436 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <HAL_UART_IRQHandler+0x6e2>
 80053d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 ffe8 	bl	80063b8 <UART_EndTransmit_IT>
    return;
 80053e8:	e026      	b.n	8005438 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <HAL_UART_IRQHandler+0x702>
 80053f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 f817 	bl	8006436 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005408:	e016      	b.n	8005438 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d010      	beq.n	8005438 <HAL_UART_IRQHandler+0x730>
 8005416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541a:	2b00      	cmp	r3, #0
 800541c:	da0c      	bge.n	8005438 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 ffff 	bl	8006422 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005424:	e008      	b.n	8005438 <HAL_UART_IRQHandler+0x730>
      return;
 8005426:	bf00      	nop
 8005428:	e006      	b.n	8005438 <HAL_UART_IRQHandler+0x730>
    return;
 800542a:	bf00      	nop
 800542c:	e004      	b.n	8005438 <HAL_UART_IRQHandler+0x730>
      return;
 800542e:	bf00      	nop
 8005430:	e002      	b.n	8005438 <HAL_UART_IRQHandler+0x730>
      return;
 8005432:	bf00      	nop
 8005434:	e000      	b.n	8005438 <HAL_UART_IRQHandler+0x730>
    return;
 8005436:	bf00      	nop
  }
}
 8005438:	37e8      	adds	r7, #232	; 0xe8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	effffffe 	.word	0xeffffffe

08005444 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005488:	b092      	sub	sp, #72	; 0x48
 800548a:	af00      	add	r7, sp, #0
 800548c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	431a      	orrs	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4bbe      	ldr	r3, [pc, #760]	; (80057ac <UART_SetConfig+0x328>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054bc:	430b      	orrs	r3, r1
 80054be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4ab3      	ldr	r2, [pc, #716]	; (80057b0 <UART_SetConfig+0x32c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054ec:	4313      	orrs	r3, r2
 80054ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	4baf      	ldr	r3, [pc, #700]	; (80057b4 <UART_SetConfig+0x330>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005500:	430b      	orrs	r3, r1
 8005502:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	f023 010f 	bic.w	r1, r3, #15
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4aa6      	ldr	r2, [pc, #664]	; (80057b8 <UART_SetConfig+0x334>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d177      	bne.n	8005614 <UART_SetConfig+0x190>
 8005524:	4ba5      	ldr	r3, [pc, #660]	; (80057bc <UART_SetConfig+0x338>)
 8005526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005528:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800552c:	2b28      	cmp	r3, #40	; 0x28
 800552e:	d86d      	bhi.n	800560c <UART_SetConfig+0x188>
 8005530:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <UART_SetConfig+0xb4>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	080055dd 	.word	0x080055dd
 800553c:	0800560d 	.word	0x0800560d
 8005540:	0800560d 	.word	0x0800560d
 8005544:	0800560d 	.word	0x0800560d
 8005548:	0800560d 	.word	0x0800560d
 800554c:	0800560d 	.word	0x0800560d
 8005550:	0800560d 	.word	0x0800560d
 8005554:	0800560d 	.word	0x0800560d
 8005558:	080055e5 	.word	0x080055e5
 800555c:	0800560d 	.word	0x0800560d
 8005560:	0800560d 	.word	0x0800560d
 8005564:	0800560d 	.word	0x0800560d
 8005568:	0800560d 	.word	0x0800560d
 800556c:	0800560d 	.word	0x0800560d
 8005570:	0800560d 	.word	0x0800560d
 8005574:	0800560d 	.word	0x0800560d
 8005578:	080055ed 	.word	0x080055ed
 800557c:	0800560d 	.word	0x0800560d
 8005580:	0800560d 	.word	0x0800560d
 8005584:	0800560d 	.word	0x0800560d
 8005588:	0800560d 	.word	0x0800560d
 800558c:	0800560d 	.word	0x0800560d
 8005590:	0800560d 	.word	0x0800560d
 8005594:	0800560d 	.word	0x0800560d
 8005598:	080055f5 	.word	0x080055f5
 800559c:	0800560d 	.word	0x0800560d
 80055a0:	0800560d 	.word	0x0800560d
 80055a4:	0800560d 	.word	0x0800560d
 80055a8:	0800560d 	.word	0x0800560d
 80055ac:	0800560d 	.word	0x0800560d
 80055b0:	0800560d 	.word	0x0800560d
 80055b4:	0800560d 	.word	0x0800560d
 80055b8:	080055fd 	.word	0x080055fd
 80055bc:	0800560d 	.word	0x0800560d
 80055c0:	0800560d 	.word	0x0800560d
 80055c4:	0800560d 	.word	0x0800560d
 80055c8:	0800560d 	.word	0x0800560d
 80055cc:	0800560d 	.word	0x0800560d
 80055d0:	0800560d 	.word	0x0800560d
 80055d4:	0800560d 	.word	0x0800560d
 80055d8:	08005605 	.word	0x08005605
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e2:	e222      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80055e4:	2304      	movs	r3, #4
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ea:	e21e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80055ec:	2308      	movs	r3, #8
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f2:	e21a      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80055f4:	2310      	movs	r3, #16
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fa:	e216      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80055fc:	2320      	movs	r3, #32
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005602:	e212      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005604:	2340      	movs	r3, #64	; 0x40
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560a:	e20e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005612:	e20a      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a69      	ldr	r2, [pc, #420]	; (80057c0 <UART_SetConfig+0x33c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d130      	bne.n	8005680 <UART_SetConfig+0x1fc>
 800561e:	4b67      	ldr	r3, [pc, #412]	; (80057bc <UART_SetConfig+0x338>)
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	2b05      	cmp	r3, #5
 8005628:	d826      	bhi.n	8005678 <UART_SetConfig+0x1f4>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <UART_SetConfig+0x1ac>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005649 	.word	0x08005649
 8005634:	08005651 	.word	0x08005651
 8005638:	08005659 	.word	0x08005659
 800563c:	08005661 	.word	0x08005661
 8005640:	08005669 	.word	0x08005669
 8005644:	08005671 	.word	0x08005671
 8005648:	2300      	movs	r3, #0
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564e:	e1ec      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005650:	2304      	movs	r3, #4
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005656:	e1e8      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005658:	2308      	movs	r3, #8
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565e:	e1e4      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005660:	2310      	movs	r3, #16
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005666:	e1e0      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005668:	2320      	movs	r3, #32
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566e:	e1dc      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005670:	2340      	movs	r3, #64	; 0x40
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e1d8      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005678:	2380      	movs	r3, #128	; 0x80
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e1d4      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a4f      	ldr	r2, [pc, #316]	; (80057c4 <UART_SetConfig+0x340>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d130      	bne.n	80056ec <UART_SetConfig+0x268>
 800568a:	4b4c      	ldr	r3, [pc, #304]	; (80057bc <UART_SetConfig+0x338>)
 800568c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	2b05      	cmp	r3, #5
 8005694:	d826      	bhi.n	80056e4 <UART_SetConfig+0x260>
 8005696:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0x218>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	080056b5 	.word	0x080056b5
 80056a0:	080056bd 	.word	0x080056bd
 80056a4:	080056c5 	.word	0x080056c5
 80056a8:	080056cd 	.word	0x080056cd
 80056ac:	080056d5 	.word	0x080056d5
 80056b0:	080056dd 	.word	0x080056dd
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ba:	e1b6      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056bc:	2304      	movs	r3, #4
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c2:	e1b2      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056c4:	2308      	movs	r3, #8
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ca:	e1ae      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056cc:	2310      	movs	r3, #16
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d2:	e1aa      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056d4:	2320      	movs	r3, #32
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056da:	e1a6      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056dc:	2340      	movs	r3, #64	; 0x40
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e2:	e1a2      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056e4:	2380      	movs	r3, #128	; 0x80
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e19e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a35      	ldr	r2, [pc, #212]	; (80057c8 <UART_SetConfig+0x344>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d130      	bne.n	8005758 <UART_SetConfig+0x2d4>
 80056f6:	4b31      	ldr	r3, [pc, #196]	; (80057bc <UART_SetConfig+0x338>)
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	2b05      	cmp	r3, #5
 8005700:	d826      	bhi.n	8005750 <UART_SetConfig+0x2cc>
 8005702:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <UART_SetConfig+0x284>)
 8005704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005708:	08005721 	.word	0x08005721
 800570c:	08005729 	.word	0x08005729
 8005710:	08005731 	.word	0x08005731
 8005714:	08005739 	.word	0x08005739
 8005718:	08005741 	.word	0x08005741
 800571c:	08005749 	.word	0x08005749
 8005720:	2300      	movs	r3, #0
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005726:	e180      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005728:	2304      	movs	r3, #4
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572e:	e17c      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005730:	2308      	movs	r3, #8
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005736:	e178      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005738:	2310      	movs	r3, #16
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573e:	e174      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005740:	2320      	movs	r3, #32
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005746:	e170      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005748:	2340      	movs	r3, #64	; 0x40
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574e:	e16c      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005756:	e168      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1b      	ldr	r2, [pc, #108]	; (80057cc <UART_SetConfig+0x348>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d142      	bne.n	80057e8 <UART_SetConfig+0x364>
 8005762:	4b16      	ldr	r3, [pc, #88]	; (80057bc <UART_SetConfig+0x338>)
 8005764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b05      	cmp	r3, #5
 800576c:	d838      	bhi.n	80057e0 <UART_SetConfig+0x35c>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <UART_SetConfig+0x2f0>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	0800578d 	.word	0x0800578d
 8005778:	08005795 	.word	0x08005795
 800577c:	0800579d 	.word	0x0800579d
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057d1 	.word	0x080057d1
 8005788:	080057d9 	.word	0x080057d9
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e14a      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005794:	2304      	movs	r3, #4
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e146      	b.n	8005a2a <UART_SetConfig+0x5a6>
 800579c:	2308      	movs	r3, #8
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e142      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80057a4:	2310      	movs	r3, #16
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057aa:	e13e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80057ac:	cfff69f3 	.word	0xcfff69f3
 80057b0:	58000c00 	.word	0x58000c00
 80057b4:	11fff4ff 	.word	0x11fff4ff
 80057b8:	40011000 	.word	0x40011000
 80057bc:	58024400 	.word	0x58024400
 80057c0:	40004400 	.word	0x40004400
 80057c4:	40004800 	.word	0x40004800
 80057c8:	40004c00 	.word	0x40004c00
 80057cc:	40005000 	.word	0x40005000
 80057d0:	2320      	movs	r3, #32
 80057d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d6:	e128      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80057d8:	2340      	movs	r3, #64	; 0x40
 80057da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057de:	e124      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e6:	e120      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4acb      	ldr	r2, [pc, #812]	; (8005b1c <UART_SetConfig+0x698>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d176      	bne.n	80058e0 <UART_SetConfig+0x45c>
 80057f2:	4bcb      	ldr	r3, [pc, #812]	; (8005b20 <UART_SetConfig+0x69c>)
 80057f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057fa:	2b28      	cmp	r3, #40	; 0x28
 80057fc:	d86c      	bhi.n	80058d8 <UART_SetConfig+0x454>
 80057fe:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <UART_SetConfig+0x380>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	080058a9 	.word	0x080058a9
 8005808:	080058d9 	.word	0x080058d9
 800580c:	080058d9 	.word	0x080058d9
 8005810:	080058d9 	.word	0x080058d9
 8005814:	080058d9 	.word	0x080058d9
 8005818:	080058d9 	.word	0x080058d9
 800581c:	080058d9 	.word	0x080058d9
 8005820:	080058d9 	.word	0x080058d9
 8005824:	080058b1 	.word	0x080058b1
 8005828:	080058d9 	.word	0x080058d9
 800582c:	080058d9 	.word	0x080058d9
 8005830:	080058d9 	.word	0x080058d9
 8005834:	080058d9 	.word	0x080058d9
 8005838:	080058d9 	.word	0x080058d9
 800583c:	080058d9 	.word	0x080058d9
 8005840:	080058d9 	.word	0x080058d9
 8005844:	080058b9 	.word	0x080058b9
 8005848:	080058d9 	.word	0x080058d9
 800584c:	080058d9 	.word	0x080058d9
 8005850:	080058d9 	.word	0x080058d9
 8005854:	080058d9 	.word	0x080058d9
 8005858:	080058d9 	.word	0x080058d9
 800585c:	080058d9 	.word	0x080058d9
 8005860:	080058d9 	.word	0x080058d9
 8005864:	080058c1 	.word	0x080058c1
 8005868:	080058d9 	.word	0x080058d9
 800586c:	080058d9 	.word	0x080058d9
 8005870:	080058d9 	.word	0x080058d9
 8005874:	080058d9 	.word	0x080058d9
 8005878:	080058d9 	.word	0x080058d9
 800587c:	080058d9 	.word	0x080058d9
 8005880:	080058d9 	.word	0x080058d9
 8005884:	080058c9 	.word	0x080058c9
 8005888:	080058d9 	.word	0x080058d9
 800588c:	080058d9 	.word	0x080058d9
 8005890:	080058d9 	.word	0x080058d9
 8005894:	080058d9 	.word	0x080058d9
 8005898:	080058d9 	.word	0x080058d9
 800589c:	080058d9 	.word	0x080058d9
 80058a0:	080058d9 	.word	0x080058d9
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ae:	e0bc      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058b0:	2304      	movs	r3, #4
 80058b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b6:	e0b8      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058b8:	2308      	movs	r3, #8
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058be:	e0b4      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058c0:	2310      	movs	r3, #16
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c6:	e0b0      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058c8:	2320      	movs	r3, #32
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ce:	e0ac      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058d0:	2340      	movs	r3, #64	; 0x40
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d6:	e0a8      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058d8:	2380      	movs	r3, #128	; 0x80
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058de:	e0a4      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a8f      	ldr	r2, [pc, #572]	; (8005b24 <UART_SetConfig+0x6a0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d130      	bne.n	800594c <UART_SetConfig+0x4c8>
 80058ea:	4b8d      	ldr	r3, [pc, #564]	; (8005b20 <UART_SetConfig+0x69c>)
 80058ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	2b05      	cmp	r3, #5
 80058f4:	d826      	bhi.n	8005944 <UART_SetConfig+0x4c0>
 80058f6:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <UART_SetConfig+0x478>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005915 	.word	0x08005915
 8005900:	0800591d 	.word	0x0800591d
 8005904:	08005925 	.word	0x08005925
 8005908:	0800592d 	.word	0x0800592d
 800590c:	08005935 	.word	0x08005935
 8005910:	0800593d 	.word	0x0800593d
 8005914:	2300      	movs	r3, #0
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591a:	e086      	b.n	8005a2a <UART_SetConfig+0x5a6>
 800591c:	2304      	movs	r3, #4
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005922:	e082      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005924:	2308      	movs	r3, #8
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592a:	e07e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 800592c:	2310      	movs	r3, #16
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005932:	e07a      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005934:	2320      	movs	r3, #32
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593a:	e076      	b.n	8005a2a <UART_SetConfig+0x5a6>
 800593c:	2340      	movs	r3, #64	; 0x40
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005942:	e072      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005944:	2380      	movs	r3, #128	; 0x80
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594a:	e06e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a75      	ldr	r2, [pc, #468]	; (8005b28 <UART_SetConfig+0x6a4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d130      	bne.n	80059b8 <UART_SetConfig+0x534>
 8005956:	4b72      	ldr	r3, [pc, #456]	; (8005b20 <UART_SetConfig+0x69c>)
 8005958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	2b05      	cmp	r3, #5
 8005960:	d826      	bhi.n	80059b0 <UART_SetConfig+0x52c>
 8005962:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <UART_SetConfig+0x4e4>)
 8005964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005968:	08005981 	.word	0x08005981
 800596c:	08005989 	.word	0x08005989
 8005970:	08005991 	.word	0x08005991
 8005974:	08005999 	.word	0x08005999
 8005978:	080059a1 	.word	0x080059a1
 800597c:	080059a9 	.word	0x080059a9
 8005980:	2300      	movs	r3, #0
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005986:	e050      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005988:	2304      	movs	r3, #4
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598e:	e04c      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005990:	2308      	movs	r3, #8
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005996:	e048      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005998:	2310      	movs	r3, #16
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599e:	e044      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80059a0:	2320      	movs	r3, #32
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a6:	e040      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80059a8:	2340      	movs	r3, #64	; 0x40
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ae:	e03c      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80059b0:	2380      	movs	r3, #128	; 0x80
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b6:	e038      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a5b      	ldr	r2, [pc, #364]	; (8005b2c <UART_SetConfig+0x6a8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d130      	bne.n	8005a24 <UART_SetConfig+0x5a0>
 80059c2:	4b57      	ldr	r3, [pc, #348]	; (8005b20 <UART_SetConfig+0x69c>)
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	2b05      	cmp	r3, #5
 80059cc:	d826      	bhi.n	8005a1c <UART_SetConfig+0x598>
 80059ce:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <UART_SetConfig+0x550>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	080059ed 	.word	0x080059ed
 80059d8:	080059f5 	.word	0x080059f5
 80059dc:	080059fd 	.word	0x080059fd
 80059e0:	08005a05 	.word	0x08005a05
 80059e4:	08005a0d 	.word	0x08005a0d
 80059e8:	08005a15 	.word	0x08005a15
 80059ec:	2302      	movs	r3, #2
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059f2:	e01a      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80059f4:	2304      	movs	r3, #4
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059fa:	e016      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80059fc:	2308      	movs	r3, #8
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a02:	e012      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005a04:	2310      	movs	r3, #16
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0a:	e00e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005a0c:	2320      	movs	r3, #32
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a12:	e00a      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005a14:	2340      	movs	r3, #64	; 0x40
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1a:	e006      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a22:	e002      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a3f      	ldr	r2, [pc, #252]	; (8005b2c <UART_SetConfig+0x6a8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	f040 80f8 	bne.w	8005c26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	dc46      	bgt.n	8005acc <UART_SetConfig+0x648>
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	f2c0 8082 	blt.w	8005b48 <UART_SetConfig+0x6c4>
 8005a44:	3b02      	subs	r3, #2
 8005a46:	2b1e      	cmp	r3, #30
 8005a48:	d87e      	bhi.n	8005b48 <UART_SetConfig+0x6c4>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <UART_SetConfig+0x5cc>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005ad3 	.word	0x08005ad3
 8005a54:	08005b49 	.word	0x08005b49
 8005a58:	08005adb 	.word	0x08005adb
 8005a5c:	08005b49 	.word	0x08005b49
 8005a60:	08005b49 	.word	0x08005b49
 8005a64:	08005b49 	.word	0x08005b49
 8005a68:	08005aeb 	.word	0x08005aeb
 8005a6c:	08005b49 	.word	0x08005b49
 8005a70:	08005b49 	.word	0x08005b49
 8005a74:	08005b49 	.word	0x08005b49
 8005a78:	08005b49 	.word	0x08005b49
 8005a7c:	08005b49 	.word	0x08005b49
 8005a80:	08005b49 	.word	0x08005b49
 8005a84:	08005b49 	.word	0x08005b49
 8005a88:	08005afb 	.word	0x08005afb
 8005a8c:	08005b49 	.word	0x08005b49
 8005a90:	08005b49 	.word	0x08005b49
 8005a94:	08005b49 	.word	0x08005b49
 8005a98:	08005b49 	.word	0x08005b49
 8005a9c:	08005b49 	.word	0x08005b49
 8005aa0:	08005b49 	.word	0x08005b49
 8005aa4:	08005b49 	.word	0x08005b49
 8005aa8:	08005b49 	.word	0x08005b49
 8005aac:	08005b49 	.word	0x08005b49
 8005ab0:	08005b49 	.word	0x08005b49
 8005ab4:	08005b49 	.word	0x08005b49
 8005ab8:	08005b49 	.word	0x08005b49
 8005abc:	08005b49 	.word	0x08005b49
 8005ac0:	08005b49 	.word	0x08005b49
 8005ac4:	08005b49 	.word	0x08005b49
 8005ac8:	08005b3b 	.word	0x08005b3b
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d037      	beq.n	8005b40 <UART_SetConfig+0x6bc>
 8005ad0:	e03a      	b.n	8005b48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005ad2:	f7fe f9cd 	bl	8003e70 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ad6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ad8:	e03c      	b.n	8005b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe f9dc 	bl	8003e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ae8:	e034      	b.n	8005b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aea:	f107 0318 	add.w	r3, r7, #24
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe fb28 	bl	8004144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005af8:	e02c      	b.n	8005b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <UART_SetConfig+0x69c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <UART_SetConfig+0x69c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	08db      	lsrs	r3, r3, #3
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	4a07      	ldr	r2, [pc, #28]	; (8005b30 <UART_SetConfig+0x6ac>)
 8005b12:	fa22 f303 	lsr.w	r3, r2, r3
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b18:	e01c      	b.n	8005b54 <UART_SetConfig+0x6d0>
 8005b1a:	bf00      	nop
 8005b1c:	40011400 	.word	0x40011400
 8005b20:	58024400 	.word	0x58024400
 8005b24:	40007800 	.word	0x40007800
 8005b28:	40007c00 	.word	0x40007c00
 8005b2c:	58000c00 	.word	0x58000c00
 8005b30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005b34:	4b9d      	ldr	r3, [pc, #628]	; (8005dac <UART_SetConfig+0x928>)
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b38:	e00c      	b.n	8005b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b3a:	4b9d      	ldr	r3, [pc, #628]	; (8005db0 <UART_SetConfig+0x92c>)
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b3e:	e009      	b.n	8005b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b46:	e005      	b.n	8005b54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 81de 	beq.w	8005f18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	4a94      	ldr	r2, [pc, #592]	; (8005db4 <UART_SetConfig+0x930>)
 8005b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	4613      	mov	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	4413      	add	r3, r2
 8005b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d305      	bcc.n	8005b8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d903      	bls.n	8005b94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b92:	e1c1      	b.n	8005f18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b96:	2200      	movs	r2, #0
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	60fa      	str	r2, [r7, #12]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	4a84      	ldr	r2, [pc, #528]	; (8005db4 <UART_SetConfig+0x930>)
 8005ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2200      	movs	r2, #0
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bb6:	f7fa fb93 	bl	80002e0 <__aeabi_uldivmod>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	020b      	lsls	r3, r1, #8
 8005bcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bd0:	0202      	lsls	r2, r0, #8
 8005bd2:	6979      	ldr	r1, [r7, #20]
 8005bd4:	6849      	ldr	r1, [r1, #4]
 8005bd6:	0849      	lsrs	r1, r1, #1
 8005bd8:	2000      	movs	r0, #0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	4605      	mov	r5, r0
 8005bde:	eb12 0804 	adds.w	r8, r2, r4
 8005be2:	eb43 0905 	adc.w	r9, r3, r5
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	469a      	mov	sl, r3
 8005bee:	4693      	mov	fp, r2
 8005bf0:	4652      	mov	r2, sl
 8005bf2:	465b      	mov	r3, fp
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	f7fa fb72 	bl	80002e0 <__aeabi_uldivmod>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4613      	mov	r3, r2
 8005c02:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c0a:	d308      	bcc.n	8005c1e <UART_SetConfig+0x79a>
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c12:	d204      	bcs.n	8005c1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	e17c      	b.n	8005f18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c24:	e178      	b.n	8005f18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c2e:	f040 80c5 	bne.w	8005dbc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005c32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	dc48      	bgt.n	8005ccc <UART_SetConfig+0x848>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	db7b      	blt.n	8005d36 <UART_SetConfig+0x8b2>
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d879      	bhi.n	8005d36 <UART_SetConfig+0x8b2>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <UART_SetConfig+0x7c4>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005cd3 	.word	0x08005cd3
 8005c4c:	08005cdb 	.word	0x08005cdb
 8005c50:	08005d37 	.word	0x08005d37
 8005c54:	08005d37 	.word	0x08005d37
 8005c58:	08005ce3 	.word	0x08005ce3
 8005c5c:	08005d37 	.word	0x08005d37
 8005c60:	08005d37 	.word	0x08005d37
 8005c64:	08005d37 	.word	0x08005d37
 8005c68:	08005cf3 	.word	0x08005cf3
 8005c6c:	08005d37 	.word	0x08005d37
 8005c70:	08005d37 	.word	0x08005d37
 8005c74:	08005d37 	.word	0x08005d37
 8005c78:	08005d37 	.word	0x08005d37
 8005c7c:	08005d37 	.word	0x08005d37
 8005c80:	08005d37 	.word	0x08005d37
 8005c84:	08005d37 	.word	0x08005d37
 8005c88:	08005d03 	.word	0x08005d03
 8005c8c:	08005d37 	.word	0x08005d37
 8005c90:	08005d37 	.word	0x08005d37
 8005c94:	08005d37 	.word	0x08005d37
 8005c98:	08005d37 	.word	0x08005d37
 8005c9c:	08005d37 	.word	0x08005d37
 8005ca0:	08005d37 	.word	0x08005d37
 8005ca4:	08005d37 	.word	0x08005d37
 8005ca8:	08005d37 	.word	0x08005d37
 8005cac:	08005d37 	.word	0x08005d37
 8005cb0:	08005d37 	.word	0x08005d37
 8005cb4:	08005d37 	.word	0x08005d37
 8005cb8:	08005d37 	.word	0x08005d37
 8005cbc:	08005d37 	.word	0x08005d37
 8005cc0:	08005d37 	.word	0x08005d37
 8005cc4:	08005d37 	.word	0x08005d37
 8005cc8:	08005d29 	.word	0x08005d29
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d02e      	beq.n	8005d2e <UART_SetConfig+0x8aa>
 8005cd0:	e031      	b.n	8005d36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd2:	f7fd f919 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 8005cd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cd8:	e033      	b.n	8005d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cda:	f7fd f92b 	bl	8002f34 <HAL_RCC_GetPCLK2Freq>
 8005cde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ce0:	e02f      	b.n	8005d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fe f8d8 	bl	8003e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf0:	e027      	b.n	8005d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cf2:	f107 0318 	add.w	r3, r7, #24
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fe fa24 	bl	8004144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d00:	e01f      	b.n	8005d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d02:	4b2d      	ldr	r3, [pc, #180]	; (8005db8 <UART_SetConfig+0x934>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d0e:	4b2a      	ldr	r3, [pc, #168]	; (8005db8 <UART_SetConfig+0x934>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	08db      	lsrs	r3, r3, #3
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	4a24      	ldr	r2, [pc, #144]	; (8005dac <UART_SetConfig+0x928>)
 8005d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d20:	e00f      	b.n	8005d42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005d22:	4b22      	ldr	r3, [pc, #136]	; (8005dac <UART_SetConfig+0x928>)
 8005d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d26:	e00c      	b.n	8005d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d28:	4b21      	ldr	r3, [pc, #132]	; (8005db0 <UART_SetConfig+0x92c>)
 8005d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d2c:	e009      	b.n	8005d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d34:	e005      	b.n	8005d42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80e7 	beq.w	8005f18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	4a19      	ldr	r2, [pc, #100]	; (8005db4 <UART_SetConfig+0x930>)
 8005d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d54:	461a      	mov	r2, r3
 8005d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d5c:	005a      	lsls	r2, r3, #1
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	441a      	add	r2, r3
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	2b0f      	cmp	r3, #15
 8005d74:	d916      	bls.n	8005da4 <UART_SetConfig+0x920>
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d7c:	d212      	bcs.n	8005da4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f023 030f 	bic.w	r3, r3, #15
 8005d86:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d96:	4313      	orrs	r3, r2
 8005d98:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005da0:	60da      	str	r2, [r3, #12]
 8005da2:	e0b9      	b.n	8005f18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005daa:	e0b5      	b.n	8005f18 <UART_SetConfig+0xa94>
 8005dac:	03d09000 	.word	0x03d09000
 8005db0:	003d0900 	.word	0x003d0900
 8005db4:	08009fd0 	.word	0x08009fd0
 8005db8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	dc49      	bgt.n	8005e58 <UART_SetConfig+0x9d4>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	db7c      	blt.n	8005ec2 <UART_SetConfig+0xa3e>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d87a      	bhi.n	8005ec2 <UART_SetConfig+0xa3e>
 8005dcc:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <UART_SetConfig+0x950>)
 8005dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd2:	bf00      	nop
 8005dd4:	08005e5f 	.word	0x08005e5f
 8005dd8:	08005e67 	.word	0x08005e67
 8005ddc:	08005ec3 	.word	0x08005ec3
 8005de0:	08005ec3 	.word	0x08005ec3
 8005de4:	08005e6f 	.word	0x08005e6f
 8005de8:	08005ec3 	.word	0x08005ec3
 8005dec:	08005ec3 	.word	0x08005ec3
 8005df0:	08005ec3 	.word	0x08005ec3
 8005df4:	08005e7f 	.word	0x08005e7f
 8005df8:	08005ec3 	.word	0x08005ec3
 8005dfc:	08005ec3 	.word	0x08005ec3
 8005e00:	08005ec3 	.word	0x08005ec3
 8005e04:	08005ec3 	.word	0x08005ec3
 8005e08:	08005ec3 	.word	0x08005ec3
 8005e0c:	08005ec3 	.word	0x08005ec3
 8005e10:	08005ec3 	.word	0x08005ec3
 8005e14:	08005e8f 	.word	0x08005e8f
 8005e18:	08005ec3 	.word	0x08005ec3
 8005e1c:	08005ec3 	.word	0x08005ec3
 8005e20:	08005ec3 	.word	0x08005ec3
 8005e24:	08005ec3 	.word	0x08005ec3
 8005e28:	08005ec3 	.word	0x08005ec3
 8005e2c:	08005ec3 	.word	0x08005ec3
 8005e30:	08005ec3 	.word	0x08005ec3
 8005e34:	08005ec3 	.word	0x08005ec3
 8005e38:	08005ec3 	.word	0x08005ec3
 8005e3c:	08005ec3 	.word	0x08005ec3
 8005e40:	08005ec3 	.word	0x08005ec3
 8005e44:	08005ec3 	.word	0x08005ec3
 8005e48:	08005ec3 	.word	0x08005ec3
 8005e4c:	08005ec3 	.word	0x08005ec3
 8005e50:	08005ec3 	.word	0x08005ec3
 8005e54:	08005eb5 	.word	0x08005eb5
 8005e58:	2b40      	cmp	r3, #64	; 0x40
 8005e5a:	d02e      	beq.n	8005eba <UART_SetConfig+0xa36>
 8005e5c:	e031      	b.n	8005ec2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e5e:	f7fd f853 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 8005e62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e64:	e033      	b.n	8005ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e66:	f7fd f865 	bl	8002f34 <HAL_RCC_GetPCLK2Freq>
 8005e6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e6c:	e02f      	b.n	8005ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe f812 	bl	8003e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e7c:	e027      	b.n	8005ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e7e:	f107 0318 	add.w	r3, r7, #24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe f95e 	bl	8004144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e8c:	e01f      	b.n	8005ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e8e:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <UART_SetConfig+0xac0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	; (8005f44 <UART_SetConfig+0xac0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	08db      	lsrs	r3, r3, #3
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	4a28      	ldr	r2, [pc, #160]	; (8005f48 <UART_SetConfig+0xac4>)
 8005ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005eac:	e00f      	b.n	8005ece <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005eae:	4b26      	ldr	r3, [pc, #152]	; (8005f48 <UART_SetConfig+0xac4>)
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eb2:	e00c      	b.n	8005ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005eb4:	4b25      	ldr	r3, [pc, #148]	; (8005f4c <UART_SetConfig+0xac8>)
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eb8:	e009      	b.n	8005ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ec0:	e005      	b.n	8005ece <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8005ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d021      	beq.n	8005f18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <UART_SetConfig+0xacc>)
 8005eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	441a      	add	r2, r3
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	2b0f      	cmp	r3, #15
 8005efc:	d909      	bls.n	8005f12 <UART_SetConfig+0xa8e>
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f04:	d205      	bcs.n	8005f12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60da      	str	r2, [r3, #12]
 8005f10:	e002      	b.n	8005f18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2200      	movs	r2, #0
 8005f32:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005f34:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3748      	adds	r7, #72	; 0x48
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f42:	bf00      	nop
 8005f44:	58024400 	.word	0x58024400
 8005f48:	03d09000 	.word	0x03d09000
 8005f4c:	003d0900 	.word	0x003d0900
 8005f50:	08009fd0 	.word	0x08009fd0

08005f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01a      	beq.n	800606a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006052:	d10a      	bne.n	800606a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
  }
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af02      	add	r7, sp, #8
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060a8:	f7fa ff3a 	bl	8000f20 <HAL_GetTick>
 80060ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d10e      	bne.n	80060da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f82f 	bl	800612e <UART_WaitOnFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e025      	b.n	8006126 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d10e      	bne.n	8006106 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f819 	bl	800612e <UART_WaitOnFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e00f      	b.n	8006126 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b09c      	sub	sp, #112	; 0x70
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800613e:	e0a9      	b.n	8006294 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006146:	f000 80a5 	beq.w	8006294 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614a:	f7fa fee9 	bl	8000f20 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006156:	429a      	cmp	r2, r3
 8006158:	d302      	bcc.n	8006160 <UART_WaitOnFlagUntilTimeout+0x32>
 800615a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800615c:	2b00      	cmp	r3, #0
 800615e:	d140      	bne.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800616e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006170:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006174:	667b      	str	r3, [r7, #100]	; 0x64
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006180:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006184:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800618c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e6      	bne.n	8006160 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3308      	adds	r3, #8
 8006198:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	663b      	str	r3, [r7, #96]	; 0x60
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80061b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e5      	bne.n	8006192 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e069      	b.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d051      	beq.n	8006294 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fe:	d149      	bne.n	8006294 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006208:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800621e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006228:	637b      	str	r3, [r7, #52]	; 0x34
 800622a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800622e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e6      	bne.n	800620a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3308      	adds	r3, #8
 8006242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	e853 3f00 	ldrex	r3, [r3]
 800624a:	613b      	str	r3, [r7, #16]
   return(result);
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	66bb      	str	r3, [r7, #104]	; 0x68
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3308      	adds	r3, #8
 800625a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800625c:	623a      	str	r2, [r7, #32]
 800625e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006260:	69f9      	ldr	r1, [r7, #28]
 8006262:	6a3a      	ldr	r2, [r7, #32]
 8006264:	e841 2300 	strex	r3, r2, [r1]
 8006268:	61bb      	str	r3, [r7, #24]
   return(result);
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e5      	bne.n	800623c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e010      	b.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	69da      	ldr	r2, [r3, #28]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4013      	ands	r3, r2
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	bf0c      	ite	eq
 80062a4:	2301      	moveq	r3, #1
 80062a6:	2300      	movne	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	f43f af46 	beq.w	8006140 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3770      	adds	r7, #112	; 0x70
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b095      	sub	sp, #84	; 0x54
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e6:	643b      	str	r3, [r7, #64]	; 0x40
 80062e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e6      	bne.n	80062c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3308      	adds	r3, #8
 8006300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	61fb      	str	r3, [r7, #28]
   return(result);
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	4b1e      	ldr	r3, [pc, #120]	; (8006388 <UART_EndRxTransfer+0xc8>)
 800630e:	4013      	ands	r3, r2
 8006310:	64bb      	str	r3, [r7, #72]	; 0x48
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3308      	adds	r3, #8
 8006318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800631a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800631c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e5      	bne.n	80062fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006332:	2b01      	cmp	r3, #1
 8006334:	d118      	bne.n	8006368 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	60bb      	str	r3, [r7, #8]
   return(result);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f023 0310 	bic.w	r3, r3, #16
 800634a:	647b      	str	r3, [r7, #68]	; 0x44
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	461a      	mov	r2, r3
 8006352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6979      	ldr	r1, [r7, #20]
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	613b      	str	r3, [r7, #16]
   return(result);
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e6      	bne.n	8006336 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800637c:	bf00      	nop
 800637e:	3754      	adds	r7, #84	; 0x54
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	effffffe 	.word	0xeffffffe

0800638c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff f854 	bl	8005458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	6979      	ldr	r1, [r7, #20]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	613b      	str	r3, [r7, #16]
   return(result);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e6      	bne.n	80063c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7ff f81f 	bl	8005444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006406:	bf00      	nop
 8006408:	3720      	adds	r7, #32
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800644a:	b480      	push	{r7}
 800644c:	b085      	sub	sp, #20
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_UARTEx_DisableFifoMode+0x16>
 800645c:	2302      	movs	r3, #2
 800645e:	e027      	b.n	80064b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2224      	movs	r2, #36	; 0x24
 800646c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0201 	bic.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800648e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e02d      	b.n	8006530 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2224      	movs	r2, #36	; 0x24
 80064e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0201 	bic.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f84f 	bl	80065b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800654c:	2302      	movs	r3, #2
 800654e:	e02d      	b.n	80065ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2224      	movs	r2, #36	; 0x24
 800655c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0201 	bic.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f811 	bl	80065b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d108      	bne.n	80065d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065d4:	e031      	b.n	800663a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065d6:	2310      	movs	r3, #16
 80065d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065da:	2310      	movs	r3, #16
 80065dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	0e5b      	lsrs	r3, r3, #25
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	0f5b      	lsrs	r3, r3, #29
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	7b3a      	ldrb	r2, [r7, #12]
 8006602:	4911      	ldr	r1, [pc, #68]	; (8006648 <UARTEx_SetNbDataToProcess+0x94>)
 8006604:	5c8a      	ldrb	r2, [r1, r2]
 8006606:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800660a:	7b3a      	ldrb	r2, [r7, #12]
 800660c:	490f      	ldr	r1, [pc, #60]	; (800664c <UARTEx_SetNbDataToProcess+0x98>)
 800660e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006610:	fb93 f3f2 	sdiv	r3, r3, r2
 8006614:	b29a      	uxth	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800661c:	7bfb      	ldrb	r3, [r7, #15]
 800661e:	7b7a      	ldrb	r2, [r7, #13]
 8006620:	4909      	ldr	r1, [pc, #36]	; (8006648 <UARTEx_SetNbDataToProcess+0x94>)
 8006622:	5c8a      	ldrb	r2, [r1, r2]
 8006624:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006628:	7b7a      	ldrb	r2, [r7, #13]
 800662a:	4908      	ldr	r1, [pc, #32]	; (800664c <UARTEx_SetNbDataToProcess+0x98>)
 800662c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800662e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006632:	b29a      	uxth	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800663a:	bf00      	nop
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	08009fe8 	.word	0x08009fe8
 800664c:	08009ff0 	.word	0x08009ff0

08006650 <__NVIC_SetPriority>:
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	6039      	str	r1, [r7, #0]
 800665a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800665c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006660:	2b00      	cmp	r3, #0
 8006662:	db0a      	blt.n	800667a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	490c      	ldr	r1, [pc, #48]	; (800669c <__NVIC_SetPriority+0x4c>)
 800666a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800666e:	0112      	lsls	r2, r2, #4
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	440b      	add	r3, r1
 8006674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006678:	e00a      	b.n	8006690 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	b2da      	uxtb	r2, r3
 800667e:	4908      	ldr	r1, [pc, #32]	; (80066a0 <__NVIC_SetPriority+0x50>)
 8006680:	88fb      	ldrh	r3, [r7, #6]
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	3b04      	subs	r3, #4
 8006688:	0112      	lsls	r2, r2, #4
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	440b      	add	r3, r1
 800668e:	761a      	strb	r2, [r3, #24]
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	e000e100 	.word	0xe000e100
 80066a0:	e000ed00 	.word	0xe000ed00

080066a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <SysTick_Handler+0x1c>)
 80066aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80066ac:	f002 fdd4 	bl	8009258 <xTaskGetSchedulerState>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d001      	beq.n	80066ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80066b6:	f000 ff2f 	bl	8007518 <xPortSysTickHandler>
  }
}
 80066ba:	bf00      	nop
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	e000e010 	.word	0xe000e010

080066c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80066c8:	2100      	movs	r1, #0
 80066ca:	f06f 0004 	mvn.w	r0, #4
 80066ce:	f7ff ffbf 	bl	8006650 <__NVIC_SetPriority>
#endif
}
 80066d2:	bf00      	nop
 80066d4:	bd80      	pop	{r7, pc}
	...

080066d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066de:	f3ef 8305 	mrs	r3, IPSR
 80066e2:	603b      	str	r3, [r7, #0]
  return(result);
 80066e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80066ea:	f06f 0305 	mvn.w	r3, #5
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	e00c      	b.n	800670c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <osKernelInitialize+0x44>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d105      	bne.n	8006706 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80066fa:	4b08      	ldr	r3, [pc, #32]	; (800671c <osKernelInitialize+0x44>)
 80066fc:	2201      	movs	r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006700:	2300      	movs	r3, #0
 8006702:	607b      	str	r3, [r7, #4]
 8006704:	e002      	b.n	800670c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006706:	f04f 33ff 	mov.w	r3, #4294967295
 800670a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800670c:	687b      	ldr	r3, [r7, #4]
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	240001dc 	.word	0x240001dc

08006720 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006726:	f3ef 8305 	mrs	r3, IPSR
 800672a:	603b      	str	r3, [r7, #0]
  return(result);
 800672c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006732:	f06f 0305 	mvn.w	r3, #5
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	e010      	b.n	800675c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800673a:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <osKernelStart+0x48>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d109      	bne.n	8006756 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006742:	f7ff ffbf 	bl	80066c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006746:	4b08      	ldr	r3, [pc, #32]	; (8006768 <osKernelStart+0x48>)
 8006748:	2202      	movs	r2, #2
 800674a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800674c:	f002 f918 	bl	8008980 <vTaskStartScheduler>
      stat = osOK;
 8006750:	2300      	movs	r3, #0
 8006752:	607b      	str	r3, [r7, #4]
 8006754:	e002      	b.n	800675c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006756:	f04f 33ff 	mov.w	r3, #4294967295
 800675a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800675c:	687b      	ldr	r3, [r7, #4]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	240001dc 	.word	0x240001dc

0800676c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800676c:	b580      	push	{r7, lr}
 800676e:	b08e      	sub	sp, #56	; 0x38
 8006770:	af04      	add	r7, sp, #16
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006778:	2300      	movs	r3, #0
 800677a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800677c:	f3ef 8305 	mrs	r3, IPSR
 8006780:	617b      	str	r3, [r7, #20]
  return(result);
 8006782:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006784:	2b00      	cmp	r3, #0
 8006786:	d17e      	bne.n	8006886 <osThreadNew+0x11a>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d07b      	beq.n	8006886 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800678e:	2380      	movs	r3, #128	; 0x80
 8006790:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006792:	2318      	movs	r3, #24
 8006794:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006796:	2300      	movs	r3, #0
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800679a:	f04f 33ff 	mov.w	r3, #4294967295
 800679e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d045      	beq.n	8006832 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <osThreadNew+0x48>
        name = attr->name;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d008      	beq.n	80067da <osThreadNew+0x6e>
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	2b38      	cmp	r3, #56	; 0x38
 80067cc:	d805      	bhi.n	80067da <osThreadNew+0x6e>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <osThreadNew+0x72>
        return (NULL);
 80067da:	2300      	movs	r3, #0
 80067dc:	e054      	b.n	8006888 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	089b      	lsrs	r3, r3, #2
 80067ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00e      	beq.n	8006814 <osThreadNew+0xa8>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	2bbb      	cmp	r3, #187	; 0xbb
 80067fc:	d90a      	bls.n	8006814 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006802:	2b00      	cmp	r3, #0
 8006804:	d006      	beq.n	8006814 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <osThreadNew+0xa8>
        mem = 1;
 800680e:	2301      	movs	r3, #1
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	e010      	b.n	8006836 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10c      	bne.n	8006836 <osThreadNew+0xca>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d108      	bne.n	8006836 <osThreadNew+0xca>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <osThreadNew+0xca>
          mem = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	e001      	b.n	8006836 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d110      	bne.n	800685e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006844:	9202      	str	r2, [sp, #8]
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	6a3a      	ldr	r2, [r7, #32]
 8006850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f001 fea8 	bl	80085a8 <xTaskCreateStatic>
 8006858:	4603      	mov	r3, r0
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	e013      	b.n	8006886 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d110      	bne.n	8006886 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	b29a      	uxth	r2, r3
 8006868:	f107 0310 	add.w	r3, r7, #16
 800686c:	9301      	str	r3, [sp, #4]
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f001 fef3 	bl	8008662 <xTaskCreate>
 800687c:	4603      	mov	r3, r0
 800687e:	2b01      	cmp	r3, #1
 8006880:	d001      	beq.n	8006886 <osThreadNew+0x11a>
            hTask = NULL;
 8006882:	2300      	movs	r3, #0
 8006884:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006886:	693b      	ldr	r3, [r7, #16]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3728      	adds	r7, #40	; 0x28
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006898:	f3ef 8305 	mrs	r3, IPSR
 800689c:	60bb      	str	r3, [r7, #8]
  return(result);
 800689e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <osDelay+0x1c>
    stat = osErrorISR;
 80068a4:	f06f 0305 	mvn.w	r3, #5
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	e007      	b.n	80068bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f002 f82e 	bl	8008918 <vTaskDelay>
    }
  }

  return (stat);
 80068bc:	68fb      	ldr	r3, [r7, #12]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b088      	sub	sp, #32
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068d2:	f3ef 8305 	mrs	r3, IPSR
 80068d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80068d8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d174      	bne.n	80069c8 <osMutexNew+0x102>
    if (attr != NULL) {
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <osMutexNew+0x26>
      type = attr->attr_bits;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	e001      	b.n	80068f0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <osMutexNew+0x3a>
      rmtx = 1U;
 80068fa:	2301      	movs	r3, #1
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	e001      	b.n	8006904 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	f003 0308 	and.w	r3, r3, #8
 800690a:	2b00      	cmp	r3, #0
 800690c:	d15c      	bne.n	80069c8 <osMutexNew+0x102>
      mem = -1;
 800690e:	f04f 33ff 	mov.w	r3, #4294967295
 8006912:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d015      	beq.n	8006946 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d006      	beq.n	8006930 <osMutexNew+0x6a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	2b4f      	cmp	r3, #79	; 0x4f
 8006928:	d902      	bls.n	8006930 <osMutexNew+0x6a>
          mem = 1;
 800692a:	2301      	movs	r3, #1
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	e00c      	b.n	800694a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d108      	bne.n	800694a <osMutexNew+0x84>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <osMutexNew+0x84>
            mem = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	613b      	str	r3, [r7, #16]
 8006944:	e001      	b.n	800694a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d112      	bne.n	8006976 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d007      	beq.n	8006966 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	4619      	mov	r1, r3
 800695c:	2004      	movs	r0, #4
 800695e:	f000 ffda 	bl	8007916 <xQueueCreateMutexStatic>
 8006962:	61f8      	str	r0, [r7, #28]
 8006964:	e016      	b.n	8006994 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	4619      	mov	r1, r3
 800696c:	2001      	movs	r0, #1
 800696e:	f000 ffd2 	bl	8007916 <xQueueCreateMutexStatic>
 8006972:	61f8      	str	r0, [r7, #28]
 8006974:	e00e      	b.n	8006994 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10b      	bne.n	8006994 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006982:	2004      	movs	r0, #4
 8006984:	f000 ffaf 	bl	80078e6 <xQueueCreateMutex>
 8006988:	61f8      	str	r0, [r7, #28]
 800698a:	e003      	b.n	8006994 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800698c:	2001      	movs	r0, #1
 800698e:	f000 ffaa 	bl	80078e6 <xQueueCreateMutex>
 8006992:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00c      	beq.n	80069b4 <osMutexNew+0xee>
        if (attr != NULL) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <osMutexNew+0xe2>
          name = attr->name;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	e001      	b.n	80069ac <osMutexNew+0xe6>
        } else {
          name = NULL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80069ac:	68f9      	ldr	r1, [r7, #12]
 80069ae:	69f8      	ldr	r0, [r7, #28]
 80069b0:	f001 fd72 	bl	8008498 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d006      	beq.n	80069c8 <osMutexNew+0x102>
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80069c8:	69fb      	ldr	r3, [r7, #28]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b086      	sub	sp, #24
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f023 0301 	bic.w	r3, r3, #1
 80069e2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069f0:	f3ef 8305 	mrs	r3, IPSR
 80069f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80069f6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80069fc:	f06f 0305 	mvn.w	r3, #5
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	e02c      	b.n	8006a5e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d103      	bne.n	8006a12 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006a0a:	f06f 0303 	mvn.w	r3, #3
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	e025      	b.n	8006a5e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d011      	beq.n	8006a3c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6938      	ldr	r0, [r7, #16]
 8006a1c:	f000 ffca 	bl	80079b4 <xQueueTakeMutexRecursive>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d01b      	beq.n	8006a5e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006a2c:	f06f 0301 	mvn.w	r3, #1
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	e014      	b.n	8006a5e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006a34:	f06f 0302 	mvn.w	r3, #2
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	e010      	b.n	8006a5e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6938      	ldr	r0, [r7, #16]
 8006a40:	f001 fad2 	bl	8007fe8 <xQueueSemaphoreTake>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d009      	beq.n	8006a5e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006a50:	f06f 0301 	mvn.w	r3, #1
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	e002      	b.n	8006a5e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006a58:	f06f 0302 	mvn.w	r3, #2
 8006a5c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006a5e:	697b      	ldr	r3, [r7, #20]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a84:	f3ef 8305 	mrs	r3, IPSR
 8006a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a8a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006a90:	f06f 0305 	mvn.w	r3, #5
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	e01f      	b.n	8006ad8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d103      	bne.n	8006aa6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006a9e:	f06f 0303 	mvn.w	r3, #3
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	e018      	b.n	8006ad8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d009      	beq.n	8006ac0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006aac:	6938      	ldr	r0, [r7, #16]
 8006aae:	f000 ff4d 	bl	800794c <xQueueGiveMutexRecursive>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d00f      	beq.n	8006ad8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006ab8:	f06f 0302 	mvn.w	r3, #2
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	e00b      	b.n	8006ad8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	6938      	ldr	r0, [r7, #16]
 8006ac8:	f001 f814 	bl	8007af4 <xQueueGenericSend>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d002      	beq.n	8006ad8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006ad2:	f06f 0302 	mvn.w	r3, #2
 8006ad6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006ad8:	697b      	ldr	r3, [r7, #20]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b08a      	sub	sp, #40	; 0x28
 8006ae6:	af02      	add	r7, sp, #8
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006af2:	f3ef 8305 	mrs	r3, IPSR
 8006af6:	613b      	str	r3, [r7, #16]
  return(result);
 8006af8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d175      	bne.n	8006bea <osSemaphoreNew+0x108>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d072      	beq.n	8006bea <osSemaphoreNew+0x108>
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d86e      	bhi.n	8006bea <osSemaphoreNew+0x108>
    mem = -1;
 8006b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d015      	beq.n	8006b44 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d006      	beq.n	8006b2e <osSemaphoreNew+0x4c>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	2b4f      	cmp	r3, #79	; 0x4f
 8006b26:	d902      	bls.n	8006b2e <osSemaphoreNew+0x4c>
        mem = 1;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	61bb      	str	r3, [r7, #24]
 8006b2c:	e00c      	b.n	8006b48 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d108      	bne.n	8006b48 <osSemaphoreNew+0x66>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d104      	bne.n	8006b48 <osSemaphoreNew+0x66>
          mem = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	e001      	b.n	8006b48 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4e:	d04c      	beq.n	8006bea <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d128      	bne.n	8006ba8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d10a      	bne.n	8006b72 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2203      	movs	r2, #3
 8006b62:	9200      	str	r2, [sp, #0]
 8006b64:	2200      	movs	r2, #0
 8006b66:	2100      	movs	r1, #0
 8006b68:	2001      	movs	r0, #1
 8006b6a:	f000 fdcd 	bl	8007708 <xQueueGenericCreateStatic>
 8006b6e:	61f8      	str	r0, [r7, #28]
 8006b70:	e005      	b.n	8006b7e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006b72:	2203      	movs	r2, #3
 8006b74:	2100      	movs	r1, #0
 8006b76:	2001      	movs	r0, #1
 8006b78:	f000 fe3e 	bl	80077f8 <xQueueGenericCreate>
 8006b7c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d022      	beq.n	8006bca <osSemaphoreNew+0xe8>
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d01f      	beq.n	8006bca <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2100      	movs	r1, #0
 8006b90:	69f8      	ldr	r0, [r7, #28]
 8006b92:	f000 ffaf 	bl	8007af4 <xQueueGenericSend>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d016      	beq.n	8006bca <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006b9c:	69f8      	ldr	r0, [r7, #28]
 8006b9e:	f001 fb2f 	bl	8008200 <vQueueDelete>
            hSemaphore = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61fb      	str	r3, [r7, #28]
 8006ba6:	e010      	b.n	8006bca <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d108      	bne.n	8006bc0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 ff32 	bl	8007a20 <xQueueCreateCountingSemaphoreStatic>
 8006bbc:	61f8      	str	r0, [r7, #28]
 8006bbe:	e004      	b.n	8006bca <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 ff63 	bl	8007a8e <xQueueCreateCountingSemaphore>
 8006bc8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00c      	beq.n	8006bea <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <osSemaphoreNew+0xfc>
          name = attr->name;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	617b      	str	r3, [r7, #20]
 8006bdc:	e001      	b.n	8006be2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006be2:	6979      	ldr	r1, [r7, #20]
 8006be4:	69f8      	ldr	r0, [r7, #28]
 8006be6:	f001 fc57 	bl	8008498 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006bea:	69fb      	ldr	r3, [r7, #28]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3720      	adds	r7, #32
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4a07      	ldr	r2, [pc, #28]	; (8006c20 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	4a06      	ldr	r2, [pc, #24]	; (8006c24 <vApplicationGetIdleTaskMemory+0x30>)
 8006c0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2280      	movs	r2, #128	; 0x80
 8006c10:	601a      	str	r2, [r3, #0]
}
 8006c12:	bf00      	nop
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	240001e0 	.word	0x240001e0
 8006c24:	2400029c 	.word	0x2400029c

08006c28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4a07      	ldr	r2, [pc, #28]	; (8006c54 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4a06      	ldr	r2, [pc, #24]	; (8006c58 <vApplicationGetTimerTaskMemory+0x30>)
 8006c3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c46:	601a      	str	r2, [r3, #0]
}
 8006c48:	bf00      	nop
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	2400049c 	.word	0x2400049c
 8006c58:	24000558 	.word	0x24000558

08006c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08a      	sub	sp, #40	; 0x28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c68:	f001 fefa 	bl	8008a60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c6c:	4b5b      	ldr	r3, [pc, #364]	; (8006ddc <pvPortMalloc+0x180>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c74:	f000 f920 	bl	8006eb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c78:	4b59      	ldr	r3, [pc, #356]	; (8006de0 <pvPortMalloc+0x184>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 8093 	bne.w	8006dac <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01d      	beq.n	8006cc8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c8c:	2208      	movs	r2, #8
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d014      	beq.n	8006cc8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f023 0307 	bic.w	r3, r3, #7
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f003 0307 	and.w	r3, r3, #7
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d06e      	beq.n	8006dac <pvPortMalloc+0x150>
 8006cce:	4b45      	ldr	r3, [pc, #276]	; (8006de4 <pvPortMalloc+0x188>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d869      	bhi.n	8006dac <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cd8:	4b43      	ldr	r3, [pc, #268]	; (8006de8 <pvPortMalloc+0x18c>)
 8006cda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cdc:	4b42      	ldr	r3, [pc, #264]	; (8006de8 <pvPortMalloc+0x18c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ce2:	e004      	b.n	8006cee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d903      	bls.n	8006d00 <pvPortMalloc+0xa4>
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f1      	bne.n	8006ce4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d00:	4b36      	ldr	r3, [pc, #216]	; (8006ddc <pvPortMalloc+0x180>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d050      	beq.n	8006dac <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2208      	movs	r2, #8
 8006d10:	4413      	add	r3, r2
 8006d12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	1ad2      	subs	r2, r2, r3
 8006d24:	2308      	movs	r3, #8
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d91f      	bls.n	8006d6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4413      	add	r3, r2
 8006d32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <pvPortMalloc+0xf8>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	613b      	str	r3, [r7, #16]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	1ad2      	subs	r2, r2, r3
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d66:	69b8      	ldr	r0, [r7, #24]
 8006d68:	f000 f908 	bl	8006f7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <pvPortMalloc+0x188>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	4a1b      	ldr	r2, [pc, #108]	; (8006de4 <pvPortMalloc+0x188>)
 8006d78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d7a:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <pvPortMalloc+0x188>)
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <pvPortMalloc+0x190>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d203      	bcs.n	8006d8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d86:	4b17      	ldr	r3, [pc, #92]	; (8006de4 <pvPortMalloc+0x188>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a18      	ldr	r2, [pc, #96]	; (8006dec <pvPortMalloc+0x190>)
 8006d8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	4b13      	ldr	r3, [pc, #76]	; (8006de0 <pvPortMalloc+0x184>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <pvPortMalloc+0x194>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3301      	adds	r3, #1
 8006da8:	4a11      	ldr	r2, [pc, #68]	; (8006df0 <pvPortMalloc+0x194>)
 8006daa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006dac:	f001 fe66 	bl	8008a7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <pvPortMalloc+0x174>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	60fb      	str	r3, [r7, #12]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <pvPortMalloc+0x172>
	return pvReturn;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3728      	adds	r7, #40	; 0x28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	24004560 	.word	0x24004560
 8006de0:	24004574 	.word	0x24004574
 8006de4:	24004564 	.word	0x24004564
 8006de8:	24004558 	.word	0x24004558
 8006dec:	24004568 	.word	0x24004568
 8006df0:	2400456c 	.word	0x2400456c

08006df4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d04d      	beq.n	8006ea2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e06:	2308      	movs	r3, #8
 8006e08:	425b      	negs	r3, r3
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	4b24      	ldr	r3, [pc, #144]	; (8006eac <vPortFree+0xb8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <vPortFree+0x44>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	60fb      	str	r3, [r7, #12]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <vPortFree+0x62>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	60bb      	str	r3, [r7, #8]
}
 8006e52:	bf00      	nop
 8006e54:	e7fe      	b.n	8006e54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	4b14      	ldr	r3, [pc, #80]	; (8006eac <vPortFree+0xb8>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01e      	beq.n	8006ea2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d11a      	bne.n	8006ea2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <vPortFree+0xb8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	43db      	mvns	r3, r3
 8006e76:	401a      	ands	r2, r3
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e7c:	f001 fdf0 	bl	8008a60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <vPortFree+0xbc>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4413      	add	r3, r2
 8006e8a:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <vPortFree+0xbc>)
 8006e8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e8e:	6938      	ldr	r0, [r7, #16]
 8006e90:	f000 f874 	bl	8006f7c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e94:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <vPortFree+0xc0>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	4a06      	ldr	r2, [pc, #24]	; (8006eb4 <vPortFree+0xc0>)
 8006e9c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e9e:	f001 fded 	bl	8008a7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ea2:	bf00      	nop
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	24004574 	.word	0x24004574
 8006eb0:	24004564 	.word	0x24004564
 8006eb4:	24004570 	.word	0x24004570

08006eb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ebe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ec2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ec4:	4b27      	ldr	r3, [pc, #156]	; (8006f64 <prvHeapInit+0xac>)
 8006ec6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00c      	beq.n	8006eec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3307      	adds	r3, #7
 8006ed6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0307 	bic.w	r3, r3, #7
 8006ede:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	4a1f      	ldr	r2, [pc, #124]	; (8006f64 <prvHeapInit+0xac>)
 8006ee8:	4413      	add	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ef0:	4a1d      	ldr	r2, [pc, #116]	; (8006f68 <prvHeapInit+0xb0>)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ef6:	4b1c      	ldr	r3, [pc, #112]	; (8006f68 <prvHeapInit+0xb0>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	4413      	add	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f04:	2208      	movs	r2, #8
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	1a9b      	subs	r3, r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0307 	bic.w	r3, r3, #7
 8006f12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <prvHeapInit+0xb4>)
 8006f18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f1a:	4b14      	ldr	r3, [pc, #80]	; (8006f6c <prvHeapInit+0xb4>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f22:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <prvHeapInit+0xb4>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	1ad2      	subs	r2, r2, r3
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f38:	4b0c      	ldr	r3, [pc, #48]	; (8006f6c <prvHeapInit+0xb4>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	4a0a      	ldr	r2, [pc, #40]	; (8006f70 <prvHeapInit+0xb8>)
 8006f46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	4a09      	ldr	r2, [pc, #36]	; (8006f74 <prvHeapInit+0xbc>)
 8006f4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f50:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <prvHeapInit+0xc0>)
 8006f52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f56:	601a      	str	r2, [r3, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	24000958 	.word	0x24000958
 8006f68:	24004558 	.word	0x24004558
 8006f6c:	24004560 	.word	0x24004560
 8006f70:	24004568 	.word	0x24004568
 8006f74:	24004564 	.word	0x24004564
 8006f78:	24004574 	.word	0x24004574

08006f7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f84:	4b28      	ldr	r3, [pc, #160]	; (8007028 <prvInsertBlockIntoFreeList+0xac>)
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	e002      	b.n	8006f90 <prvInsertBlockIntoFreeList+0x14>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d8f7      	bhi.n	8006f8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d108      	bne.n	8006fbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	441a      	add	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	441a      	add	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d118      	bne.n	8007004 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	4b15      	ldr	r3, [pc, #84]	; (800702c <prvInsertBlockIntoFreeList+0xb0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d00d      	beq.n	8006ffa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	441a      	add	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	e008      	b.n	800700c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	; (800702c <prvInsertBlockIntoFreeList+0xb0>)
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	e003      	b.n	800700c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	429a      	cmp	r2, r3
 8007012:	d002      	beq.n	800701a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800701a:	bf00      	nop
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	24004558 	.word	0x24004558
 800702c:	24004560 	.word	0x24004560

08007030 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f103 0208 	add.w	r2, r3, #8
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f04f 32ff 	mov.w	r2, #4294967295
 8007048:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f103 0208 	add.w	r2, r3, #8
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f103 0208 	add.w	r2, r3, #8
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800708a:	b480      	push	{r7}
 800708c:	b085      	sub	sp, #20
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	601a      	str	r2, [r3, #0]
}
 80070c6:	bf00      	nop
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e8:	d103      	bne.n	80070f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	e00c      	b.n	800710c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	3308      	adds	r3, #8
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	e002      	b.n	8007100 <vListInsert+0x2e>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	429a      	cmp	r2, r3
 800710a:	d2f6      	bcs.n	80070fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	601a      	str	r2, [r3, #0]
}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6892      	ldr	r2, [r2, #8]
 800715a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6852      	ldr	r2, [r2, #4]
 8007164:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	429a      	cmp	r2, r3
 800716e:	d103      	bne.n	8007178 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	1e5a      	subs	r2, r3, #1
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3714      	adds	r7, #20
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3b04      	subs	r3, #4
 80071a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3b04      	subs	r3, #4
 80071b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f023 0201 	bic.w	r2, r3, #1
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3b04      	subs	r3, #4
 80071c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071c8:	4a0c      	ldr	r2, [pc, #48]	; (80071fc <pxPortInitialiseStack+0x64>)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3b14      	subs	r3, #20
 80071d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3b04      	subs	r3, #4
 80071de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f06f 0202 	mvn.w	r2, #2
 80071e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3b20      	subs	r3, #32
 80071ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071ee:	68fb      	ldr	r3, [r7, #12]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	08007201 	.word	0x08007201

08007200 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800720a:	4b12      	ldr	r3, [pc, #72]	; (8007254 <prvTaskExitError+0x54>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d00a      	beq.n	800722a <prvTaskExitError+0x2a>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	60fb      	str	r3, [r7, #12]
}
 8007226:	bf00      	nop
 8007228:	e7fe      	b.n	8007228 <prvTaskExitError+0x28>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	60bb      	str	r3, [r7, #8]
}
 800723c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800723e:	bf00      	nop
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0fc      	beq.n	8007240 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	24000060 	.word	0x24000060
	...

08007260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007260:	4b07      	ldr	r3, [pc, #28]	; (8007280 <pxCurrentTCBConst2>)
 8007262:	6819      	ldr	r1, [r3, #0]
 8007264:	6808      	ldr	r0, [r1, #0]
 8007266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	f380 8809 	msr	PSP, r0
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f04f 0000 	mov.w	r0, #0
 8007276:	f380 8811 	msr	BASEPRI, r0
 800727a:	4770      	bx	lr
 800727c:	f3af 8000 	nop.w

08007280 <pxCurrentTCBConst2>:
 8007280:	240045c0 	.word	0x240045c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop

08007288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007288:	4808      	ldr	r0, [pc, #32]	; (80072ac <prvPortStartFirstTask+0x24>)
 800728a:	6800      	ldr	r0, [r0, #0]
 800728c:	6800      	ldr	r0, [r0, #0]
 800728e:	f380 8808 	msr	MSP, r0
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8814 	msr	CONTROL, r0
 800729a:	b662      	cpsie	i
 800729c:	b661      	cpsie	f
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	df00      	svc	0
 80072a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072aa:	bf00      	nop
 80072ac:	e000ed08 	.word	0xe000ed08

080072b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072b6:	4b46      	ldr	r3, [pc, #280]	; (80073d0 <xPortStartScheduler+0x120>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a46      	ldr	r2, [pc, #280]	; (80073d4 <xPortStartScheduler+0x124>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d10a      	bne.n	80072d6 <xPortStartScheduler+0x26>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	613b      	str	r3, [r7, #16]
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072d6:	4b3e      	ldr	r3, [pc, #248]	; (80073d0 <xPortStartScheduler+0x120>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a3f      	ldr	r2, [pc, #252]	; (80073d8 <xPortStartScheduler+0x128>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10a      	bne.n	80072f6 <xPortStartScheduler+0x46>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	60fb      	str	r3, [r7, #12]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072f6:	4b39      	ldr	r3, [pc, #228]	; (80073dc <xPortStartScheduler+0x12c>)
 80072f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	22ff      	movs	r2, #255	; 0xff
 8007306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007318:	b2da      	uxtb	r2, r3
 800731a:	4b31      	ldr	r3, [pc, #196]	; (80073e0 <xPortStartScheduler+0x130>)
 800731c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800731e:	4b31      	ldr	r3, [pc, #196]	; (80073e4 <xPortStartScheduler+0x134>)
 8007320:	2207      	movs	r2, #7
 8007322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007324:	e009      	b.n	800733a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007326:	4b2f      	ldr	r3, [pc, #188]	; (80073e4 <xPortStartScheduler+0x134>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3b01      	subs	r3, #1
 800732c:	4a2d      	ldr	r2, [pc, #180]	; (80073e4 <xPortStartScheduler+0x134>)
 800732e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	b2db      	uxtb	r3, r3
 8007338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007342:	2b80      	cmp	r3, #128	; 0x80
 8007344:	d0ef      	beq.n	8007326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007346:	4b27      	ldr	r3, [pc, #156]	; (80073e4 <xPortStartScheduler+0x134>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f1c3 0307 	rsb	r3, r3, #7
 800734e:	2b04      	cmp	r3, #4
 8007350:	d00a      	beq.n	8007368 <xPortStartScheduler+0xb8>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	60bb      	str	r3, [r7, #8]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007368:	4b1e      	ldr	r3, [pc, #120]	; (80073e4 <xPortStartScheduler+0x134>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	4a1d      	ldr	r2, [pc, #116]	; (80073e4 <xPortStartScheduler+0x134>)
 8007370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007372:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <xPortStartScheduler+0x134>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800737a:	4a1a      	ldr	r2, [pc, #104]	; (80073e4 <xPortStartScheduler+0x134>)
 800737c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	b2da      	uxtb	r2, r3
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007386:	4b18      	ldr	r3, [pc, #96]	; (80073e8 <xPortStartScheduler+0x138>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <xPortStartScheduler+0x138>)
 800738c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007392:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <xPortStartScheduler+0x138>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a14      	ldr	r2, [pc, #80]	; (80073e8 <xPortStartScheduler+0x138>)
 8007398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800739c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800739e:	f000 f8dd 	bl	800755c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073a2:	4b12      	ldr	r3, [pc, #72]	; (80073ec <xPortStartScheduler+0x13c>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073a8:	f000 f8fc 	bl	80075a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <xPortStartScheduler+0x140>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a0f      	ldr	r2, [pc, #60]	; (80073f0 <xPortStartScheduler+0x140>)
 80073b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073b8:	f7ff ff66 	bl	8007288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073bc:	f001 fcc6 	bl	8008d4c <vTaskSwitchContext>
	prvTaskExitError();
 80073c0:	f7ff ff1e 	bl	8007200 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	e000ed00 	.word	0xe000ed00
 80073d4:	410fc271 	.word	0x410fc271
 80073d8:	410fc270 	.word	0x410fc270
 80073dc:	e000e400 	.word	0xe000e400
 80073e0:	24004578 	.word	0x24004578
 80073e4:	2400457c 	.word	0x2400457c
 80073e8:	e000ed20 	.word	0xe000ed20
 80073ec:	24000060 	.word	0x24000060
 80073f0:	e000ef34 	.word	0xe000ef34

080073f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	607b      	str	r3, [r7, #4]
}
 800740c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800740e:	4b0f      	ldr	r3, [pc, #60]	; (800744c <vPortEnterCritical+0x58>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3301      	adds	r3, #1
 8007414:	4a0d      	ldr	r2, [pc, #52]	; (800744c <vPortEnterCritical+0x58>)
 8007416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007418:	4b0c      	ldr	r3, [pc, #48]	; (800744c <vPortEnterCritical+0x58>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d10f      	bne.n	8007440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <vPortEnterCritical+0x5c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <vPortEnterCritical+0x4c>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	603b      	str	r3, [r7, #0]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <vPortEnterCritical+0x4a>
	}
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	24000060 	.word	0x24000060
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800745a:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <vPortExitCritical+0x50>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <vPortExitCritical+0x24>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	607b      	str	r3, [r7, #4]
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007478:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <vPortExitCritical+0x50>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3b01      	subs	r3, #1
 800747e:	4a09      	ldr	r2, [pc, #36]	; (80074a4 <vPortExitCritical+0x50>)
 8007480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007482:	4b08      	ldr	r3, [pc, #32]	; (80074a4 <vPortExitCritical+0x50>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d105      	bne.n	8007496 <vPortExitCritical+0x42>
 800748a:	2300      	movs	r3, #0
 800748c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	24000060 	.word	0x24000060
	...

080074b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074b0:	f3ef 8009 	mrs	r0, PSP
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	4b15      	ldr	r3, [pc, #84]	; (8007510 <pxCurrentTCBConst>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	f01e 0f10 	tst.w	lr, #16
 80074c0:	bf08      	it	eq
 80074c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ca:	6010      	str	r0, [r2, #0]
 80074cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074d4:	f380 8811 	msr	BASEPRI, r0
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f001 fc34 	bl	8008d4c <vTaskSwitchContext>
 80074e4:	f04f 0000 	mov.w	r0, #0
 80074e8:	f380 8811 	msr	BASEPRI, r0
 80074ec:	bc09      	pop	{r0, r3}
 80074ee:	6819      	ldr	r1, [r3, #0]
 80074f0:	6808      	ldr	r0, [r1, #0]
 80074f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f6:	f01e 0f10 	tst.w	lr, #16
 80074fa:	bf08      	it	eq
 80074fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007500:	f380 8809 	msr	PSP, r0
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	f3af 8000 	nop.w

08007510 <pxCurrentTCBConst>:
 8007510:	240045c0 	.word	0x240045c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop

08007518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	607b      	str	r3, [r7, #4]
}
 8007530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007532:	f001 fb51 	bl	8008bd8 <xTaskIncrementTick>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800753c:	4b06      	ldr	r3, [pc, #24]	; (8007558 <xPortSysTickHandler+0x40>)
 800753e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	2300      	movs	r3, #0
 8007546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	f383 8811 	msr	BASEPRI, r3
}
 800754e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	e000ed04 	.word	0xe000ed04

0800755c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007560:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <vPortSetupTimerInterrupt+0x34>)
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007566:	4b0b      	ldr	r3, [pc, #44]	; (8007594 <vPortSetupTimerInterrupt+0x38>)
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800756c:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <vPortSetupTimerInterrupt+0x3c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a0a      	ldr	r2, [pc, #40]	; (800759c <vPortSetupTimerInterrupt+0x40>)
 8007572:	fba2 2303 	umull	r2, r3, r2, r3
 8007576:	099b      	lsrs	r3, r3, #6
 8007578:	4a09      	ldr	r2, [pc, #36]	; (80075a0 <vPortSetupTimerInterrupt+0x44>)
 800757a:	3b01      	subs	r3, #1
 800757c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800757e:	4b04      	ldr	r3, [pc, #16]	; (8007590 <vPortSetupTimerInterrupt+0x34>)
 8007580:	2207      	movs	r2, #7
 8007582:	601a      	str	r2, [r3, #0]
}
 8007584:	bf00      	nop
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	e000e010 	.word	0xe000e010
 8007594:	e000e018 	.word	0xe000e018
 8007598:	24000000 	.word	0x24000000
 800759c:	10624dd3 	.word	0x10624dd3
 80075a0:	e000e014 	.word	0xe000e014

080075a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075b4 <vPortEnableVFP+0x10>
 80075a8:	6801      	ldr	r1, [r0, #0]
 80075aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80075ae:	6001      	str	r1, [r0, #0]
 80075b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075b2:	bf00      	nop
 80075b4:	e000ed88 	.word	0xe000ed88

080075b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075be:	f3ef 8305 	mrs	r3, IPSR
 80075c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b0f      	cmp	r3, #15
 80075c8:	d914      	bls.n	80075f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075ca:	4a17      	ldr	r2, [pc, #92]	; (8007628 <vPortValidateInterruptPriority+0x70>)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075d4:	4b15      	ldr	r3, [pc, #84]	; (800762c <vPortValidateInterruptPriority+0x74>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	7afa      	ldrb	r2, [r7, #11]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d20a      	bcs.n	80075f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	607b      	str	r3, [r7, #4]
}
 80075f0:	bf00      	nop
 80075f2:	e7fe      	b.n	80075f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075f4:	4b0e      	ldr	r3, [pc, #56]	; (8007630 <vPortValidateInterruptPriority+0x78>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075fc:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <vPortValidateInterruptPriority+0x7c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d90a      	bls.n	800761a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	603b      	str	r3, [r7, #0]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <vPortValidateInterruptPriority+0x60>
	}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	e000e3f0 	.word	0xe000e3f0
 800762c:	24004578 	.word	0x24004578
 8007630:	e000ed0c 	.word	0xe000ed0c
 8007634:	2400457c 	.word	0x2400457c

08007638 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <xQueueGenericReset+0x2a>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	60bb      	str	r3, [r7, #8]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007662:	f7ff fec7 	bl	80073f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766e:	68f9      	ldr	r1, [r7, #12]
 8007670:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007672:	fb01 f303 	mul.w	r3, r1, r3
 8007676:	441a      	add	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007692:	3b01      	subs	r3, #1
 8007694:	68f9      	ldr	r1, [r7, #12]
 8007696:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	441a      	add	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	22ff      	movs	r2, #255	; 0xff
 80076a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	22ff      	movs	r2, #255	; 0xff
 80076ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d114      	bne.n	80076e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01a      	beq.n	80076f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3310      	adds	r3, #16
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 fbf5 	bl	8008eb4 <xTaskRemoveFromEventList>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d012      	beq.n	80076f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80076d0:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <xQueueGenericReset+0xcc>)
 80076d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	e009      	b.n	80076f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3310      	adds	r3, #16
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff fca2 	bl	8007030 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3324      	adds	r3, #36	; 0x24
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7ff fc9d 	bl	8007030 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80076f6:	f7ff fead 	bl	8007454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80076fa:	2301      	movs	r3, #1
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	e000ed04 	.word	0xe000ed04

08007708 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08e      	sub	sp, #56	; 0x38
 800770c:	af02      	add	r7, sp, #8
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
}
 800774a:	bf00      	nop
 800774c:	e7fe      	b.n	800774c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <xQueueGenericCreateStatic+0x52>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <xQueueGenericCreateStatic+0x56>
 800775a:	2301      	movs	r3, #1
 800775c:	e000      	b.n	8007760 <xQueueGenericCreateStatic+0x58>
 800775e:	2300      	movs	r3, #0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	623b      	str	r3, [r7, #32]
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d102      	bne.n	8007786 <xQueueGenericCreateStatic+0x7e>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <xQueueGenericCreateStatic+0x82>
 8007786:	2301      	movs	r3, #1
 8007788:	e000      	b.n	800778c <xQueueGenericCreateStatic+0x84>
 800778a:	2300      	movs	r3, #0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10a      	bne.n	80077a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	61fb      	str	r3, [r7, #28]
}
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80077a6:	2350      	movs	r3, #80	; 0x50
 80077a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2b50      	cmp	r3, #80	; 0x50
 80077ae:	d00a      	beq.n	80077c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	61bb      	str	r3, [r7, #24]
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80077c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80077cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00d      	beq.n	80077ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	4613      	mov	r3, r2
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	68b9      	ldr	r1, [r7, #8]
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f83f 	bl	800786c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3730      	adds	r7, #48	; 0x30
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	; 0x28
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <xQueueGenericCreate+0x2a>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	613b      	str	r3, [r7, #16]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	fb02 f303 	mul.w	r3, r2, r3
 800782a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	3350      	adds	r3, #80	; 0x50
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff fa13 	bl	8006c5c <pvPortMalloc>
 8007836:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d011      	beq.n	8007862 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	3350      	adds	r3, #80	; 0x50
 8007846:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007850:	79fa      	ldrb	r2, [r7, #7]
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4613      	mov	r3, r2
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	68b9      	ldr	r1, [r7, #8]
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f805 	bl	800786c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007862:	69bb      	ldr	r3, [r7, #24]
	}
 8007864:	4618      	mov	r0, r3
 8007866:	3720      	adds	r7, #32
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d103      	bne.n	8007888 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e002      	b.n	800788e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800789a:	2101      	movs	r1, #1
 800789c:	69b8      	ldr	r0, [r7, #24]
 800789e:	f7ff fecb 	bl	8007638 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	78fa      	ldrb	r2, [r7, #3]
 80078a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00e      	beq.n	80078de <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80078d2:	2300      	movs	r3, #0
 80078d4:	2200      	movs	r2, #0
 80078d6:	2100      	movs	r1, #0
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f90b 	bl	8007af4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b086      	sub	sp, #24
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	4603      	mov	r3, r0
 80078ee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80078f0:	2301      	movs	r3, #1
 80078f2:	617b      	str	r3, [r7, #20]
 80078f4:	2300      	movs	r3, #0
 80078f6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80078f8:	79fb      	ldrb	r3, [r7, #7]
 80078fa:	461a      	mov	r2, r3
 80078fc:	6939      	ldr	r1, [r7, #16]
 80078fe:	6978      	ldr	r0, [r7, #20]
 8007900:	f7ff ff7a 	bl	80077f8 <xQueueGenericCreate>
 8007904:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f7ff ffd3 	bl	80078b2 <prvInitialiseMutex>

		return xNewQueue;
 800790c:	68fb      	ldr	r3, [r7, #12]
	}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007916:	b580      	push	{r7, lr}
 8007918:	b088      	sub	sp, #32
 800791a:	af02      	add	r7, sp, #8
 800791c:	4603      	mov	r3, r0
 800791e:	6039      	str	r1, [r7, #0]
 8007920:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007922:	2301      	movs	r3, #1
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	2300      	movs	r3, #0
 8007928:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2200      	movs	r2, #0
 8007932:	6939      	ldr	r1, [r7, #16]
 8007934:	6978      	ldr	r0, [r7, #20]
 8007936:	f7ff fee7 	bl	8007708 <xQueueGenericCreateStatic>
 800793a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff ffb8 	bl	80078b2 <prvInitialiseMutex>

		return xNewQueue;
 8007942:	68fb      	ldr	r3, [r7, #12]
	}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800794c:	b590      	push	{r4, r7, lr}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10a      	bne.n	8007974 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	60fb      	str	r3, [r7, #12]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	689c      	ldr	r4, [r3, #8]
 8007978:	f001 fc5e 	bl	8009238 <xTaskGetCurrentTaskHandle>
 800797c:	4603      	mov	r3, r0
 800797e:	429c      	cmp	r4, r3
 8007980:	d111      	bne.n	80079a6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	1e5a      	subs	r2, r3, #1
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d105      	bne.n	80079a0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007994:	2300      	movs	r3, #0
 8007996:	2200      	movs	r2, #0
 8007998:	2100      	movs	r1, #0
 800799a:	6938      	ldr	r0, [r7, #16]
 800799c:	f000 f8aa 	bl	8007af4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80079a0:	2301      	movs	r3, #1
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	e001      	b.n	80079aa <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80079aa:	697b      	ldr	r3, [r7, #20]
	}
 80079ac:	4618      	mov	r0, r3
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd90      	pop	{r4, r7, pc}

080079b4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80079b4:	b590      	push	{r4, r7, lr}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	60fb      	str	r3, [r7, #12]
}
 80079da:	bf00      	nop
 80079dc:	e7fe      	b.n	80079dc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	689c      	ldr	r4, [r3, #8]
 80079e2:	f001 fc29 	bl	8009238 <xTaskGetCurrentTaskHandle>
 80079e6:	4603      	mov	r3, r0
 80079e8:	429c      	cmp	r4, r3
 80079ea:	d107      	bne.n	80079fc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80079f6:	2301      	movs	r3, #1
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	e00c      	b.n	8007a16 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6938      	ldr	r0, [r7, #16]
 8007a00:	f000 faf2 	bl	8007fe8 <xQueueSemaphoreTake>
 8007a04:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d004      	beq.n	8007a16 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007a16:	697b      	ldr	r3, [r7, #20]
	}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	371c      	adds	r7, #28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd90      	pop	{r4, r7, pc}

08007a20 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08a      	sub	sp, #40	; 0x28
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10a      	bne.n	8007a48 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	61bb      	str	r3, [r7, #24]
}
 8007a44:	bf00      	nop
 8007a46:	e7fe      	b.n	8007a46 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d90a      	bls.n	8007a66 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	617b      	str	r3, [r7, #20]
}
 8007a62:	bf00      	nop
 8007a64:	e7fe      	b.n	8007a64 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007a66:	2302      	movs	r3, #2
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2100      	movs	r1, #0
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff fe49 	bl	8007708 <xQueueGenericCreateStatic>
 8007a76:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007a84:	69fb      	ldr	r3, [r7, #28]
	}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3720      	adds	r7, #32
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b086      	sub	sp, #24
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10a      	bne.n	8007ab4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	613b      	str	r3, [r7, #16]
}
 8007ab0:	bf00      	nop
 8007ab2:	e7fe      	b.n	8007ab2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d90a      	bls.n	8007ad2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	60fb      	str	r3, [r7, #12]
}
 8007ace:	bf00      	nop
 8007ad0:	e7fe      	b.n	8007ad0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff fe8e 	bl	80077f8 <xQueueGenericCreate>
 8007adc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007aea:	697b      	ldr	r3, [r7, #20]
	}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08e      	sub	sp, #56	; 0x38
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b02:	2300      	movs	r3, #0
 8007b04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10a      	bne.n	8007b26 <xQueueGenericSend+0x32>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d103      	bne.n	8007b34 <xQueueGenericSend+0x40>
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <xQueueGenericSend+0x44>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e000      	b.n	8007b3a <xQueueGenericSend+0x46>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10a      	bne.n	8007b54 <xQueueGenericSend+0x60>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d103      	bne.n	8007b62 <xQueueGenericSend+0x6e>
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <xQueueGenericSend+0x72>
 8007b62:	2301      	movs	r3, #1
 8007b64:	e000      	b.n	8007b68 <xQueueGenericSend+0x74>
 8007b66:	2300      	movs	r3, #0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <xQueueGenericSend+0x8e>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	623b      	str	r3, [r7, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	e7fe      	b.n	8007b80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b82:	f001 fb69 	bl	8009258 <xTaskGetSchedulerState>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d102      	bne.n	8007b92 <xQueueGenericSend+0x9e>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <xQueueGenericSend+0xa2>
 8007b92:	2301      	movs	r3, #1
 8007b94:	e000      	b.n	8007b98 <xQueueGenericSend+0xa4>
 8007b96:	2300      	movs	r3, #0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10a      	bne.n	8007bb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8007b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	61fb      	str	r3, [r7, #28]
}
 8007bae:	bf00      	nop
 8007bb0:	e7fe      	b.n	8007bb0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bb2:	f7ff fc1f 	bl	80073f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d302      	bcc.n	8007bc8 <xQueueGenericSend+0xd4>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d129      	bne.n	8007c1c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bce:	f000 fb52 	bl	8008276 <prvCopyDataToQueue>
 8007bd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d010      	beq.n	8007bfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	3324      	adds	r3, #36	; 0x24
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 f967 	bl	8008eb4 <xTaskRemoveFromEventList>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d013      	beq.n	8007c14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bec:	4b3f      	ldr	r3, [pc, #252]	; (8007cec <xQueueGenericSend+0x1f8>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	e00a      	b.n	8007c14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d007      	beq.n	8007c14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c04:	4b39      	ldr	r3, [pc, #228]	; (8007cec <xQueueGenericSend+0x1f8>)
 8007c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c14:	f7ff fc1e 	bl	8007454 <vPortExitCritical>
				return pdPASS;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e063      	b.n	8007ce4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d103      	bne.n	8007c2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c22:	f7ff fc17 	bl	8007454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	e05c      	b.n	8007ce4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c30:	f107 0314 	add.w	r3, r7, #20
 8007c34:	4618      	mov	r0, r3
 8007c36:	f001 f9a1 	bl	8008f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c3e:	f7ff fc09 	bl	8007454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c42:	f000 ff0d 	bl	8008a60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c46:	f7ff fbd5 	bl	80073f4 <vPortEnterCritical>
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c50:	b25b      	sxtb	r3, r3
 8007c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c56:	d103      	bne.n	8007c60 <xQueueGenericSend+0x16c>
 8007c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c66:	b25b      	sxtb	r3, r3
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d103      	bne.n	8007c76 <xQueueGenericSend+0x182>
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c76:	f7ff fbed 	bl	8007454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c7a:	1d3a      	adds	r2, r7, #4
 8007c7c:	f107 0314 	add.w	r3, r7, #20
 8007c80:	4611      	mov	r1, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f001 f990 	bl	8008fa8 <xTaskCheckForTimeOut>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d124      	bne.n	8007cd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c90:	f000 fbe9 	bl	8008466 <prvIsQueueFull>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d018      	beq.n	8007ccc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	3310      	adds	r3, #16
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 f8b6 	bl	8008e14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007caa:	f000 fb74 	bl	8008396 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007cae:	f000 fee5 	bl	8008a7c <xTaskResumeAll>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f47f af7c 	bne.w	8007bb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007cba:	4b0c      	ldr	r3, [pc, #48]	; (8007cec <xQueueGenericSend+0x1f8>)
 8007cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	e772      	b.n	8007bb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cce:	f000 fb62 	bl	8008396 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cd2:	f000 fed3 	bl	8008a7c <xTaskResumeAll>
 8007cd6:	e76c      	b.n	8007bb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cda:	f000 fb5c 	bl	8008396 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cde:	f000 fecd 	bl	8008a7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ce2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3738      	adds	r7, #56	; 0x38
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	e000ed04 	.word	0xe000ed04

08007cf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b090      	sub	sp, #64	; 0x40
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10a      	bne.n	8007d1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d1a:	bf00      	nop
 8007d1c:	e7fe      	b.n	8007d1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d103      	bne.n	8007d2c <xQueueGenericSendFromISR+0x3c>
 8007d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <xQueueGenericSendFromISR+0x40>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e000      	b.n	8007d32 <xQueueGenericSendFromISR+0x42>
 8007d30:	2300      	movs	r3, #0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10a      	bne.n	8007d4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d48:	bf00      	nop
 8007d4a:	e7fe      	b.n	8007d4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d103      	bne.n	8007d5a <xQueueGenericSendFromISR+0x6a>
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <xQueueGenericSendFromISR+0x6e>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <xQueueGenericSendFromISR+0x70>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10a      	bne.n	8007d7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	623b      	str	r3, [r7, #32]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d7a:	f7ff fc1d 	bl	80075b8 <vPortValidateInterruptPriority>
	__asm volatile
 8007d7e:	f3ef 8211 	mrs	r2, BASEPRI
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	61fa      	str	r2, [r7, #28]
 8007d94:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007d96:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d98:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d302      	bcc.n	8007dac <xQueueGenericSendFromISR+0xbc>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d12f      	bne.n	8007e0c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	68b9      	ldr	r1, [r7, #8]
 8007dc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007dc2:	f000 fa58 	bl	8008276 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007dc6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dce:	d112      	bne.n	8007df6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d016      	beq.n	8007e06 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	3324      	adds	r3, #36	; 0x24
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f001 f869 	bl	8008eb4 <xTaskRemoveFromEventList>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00e      	beq.n	8007e06 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	e007      	b.n	8007e06 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007df6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	b25a      	sxtb	r2, r3
 8007e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e06:	2301      	movs	r3, #1
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007e0a:	e001      	b.n	8007e10 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e12:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f383 8811 	msr	BASEPRI, r3
}
 8007e1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3740      	adds	r7, #64	; 0x40
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b08c      	sub	sp, #48	; 0x30
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e34:	2300      	movs	r3, #0
 8007e36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10a      	bne.n	8007e58 <xQueueReceive+0x30>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	623b      	str	r3, [r7, #32]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d103      	bne.n	8007e66 <xQueueReceive+0x3e>
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <xQueueReceive+0x42>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e000      	b.n	8007e6c <xQueueReceive+0x44>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10a      	bne.n	8007e86 <xQueueReceive+0x5e>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	61fb      	str	r3, [r7, #28]
}
 8007e82:	bf00      	nop
 8007e84:	e7fe      	b.n	8007e84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e86:	f001 f9e7 	bl	8009258 <xTaskGetSchedulerState>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d102      	bne.n	8007e96 <xQueueReceive+0x6e>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <xQueueReceive+0x72>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e000      	b.n	8007e9c <xQueueReceive+0x74>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10a      	bne.n	8007eb6 <xQueueReceive+0x8e>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	61bb      	str	r3, [r7, #24]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007eb6:	f7ff fa9d 	bl	80073f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d01f      	beq.n	8007f06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ec6:	68b9      	ldr	r1, [r7, #8]
 8007ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eca:	f000 fa3e 	bl	800834a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	1e5a      	subs	r2, r3, #1
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00f      	beq.n	8007efe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	3310      	adds	r3, #16
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 ffe6 	bl	8008eb4 <xTaskRemoveFromEventList>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d007      	beq.n	8007efe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007eee:	4b3d      	ldr	r3, [pc, #244]	; (8007fe4 <xQueueReceive+0x1bc>)
 8007ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007efe:	f7ff faa9 	bl	8007454 <vPortExitCritical>
				return pdPASS;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e069      	b.n	8007fda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d103      	bne.n	8007f14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f0c:	f7ff faa2 	bl	8007454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f10:	2300      	movs	r3, #0
 8007f12:	e062      	b.n	8007fda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f1a:	f107 0310 	add.w	r3, r7, #16
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 f82c 	bl	8008f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f24:	2301      	movs	r3, #1
 8007f26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f28:	f7ff fa94 	bl	8007454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f2c:	f000 fd98 	bl	8008a60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f30:	f7ff fa60 	bl	80073f4 <vPortEnterCritical>
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f3a:	b25b      	sxtb	r3, r3
 8007f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f40:	d103      	bne.n	8007f4a <xQueueReceive+0x122>
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f50:	b25b      	sxtb	r3, r3
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d103      	bne.n	8007f60 <xQueueReceive+0x138>
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f60:	f7ff fa78 	bl	8007454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f64:	1d3a      	adds	r2, r7, #4
 8007f66:	f107 0310 	add.w	r3, r7, #16
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 f81b 	bl	8008fa8 <xTaskCheckForTimeOut>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d123      	bne.n	8007fc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f7a:	f000 fa5e 	bl	800843a <prvIsQueueEmpty>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d017      	beq.n	8007fb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	3324      	adds	r3, #36	; 0x24
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 ff41 	bl	8008e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f94:	f000 f9ff 	bl	8008396 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f98:	f000 fd70 	bl	8008a7c <xTaskResumeAll>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d189      	bne.n	8007eb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007fa2:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <xQueueReceive+0x1bc>)
 8007fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	e780      	b.n	8007eb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fb6:	f000 f9ee 	bl	8008396 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fba:	f000 fd5f 	bl	8008a7c <xTaskResumeAll>
 8007fbe:	e77a      	b.n	8007eb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fc2:	f000 f9e8 	bl	8008396 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fc6:	f000 fd59 	bl	8008a7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fcc:	f000 fa35 	bl	800843a <prvIsQueueEmpty>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f43f af6f 	beq.w	8007eb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3730      	adds	r7, #48	; 0x30
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	e000ed04 	.word	0xe000ed04

08007fe8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08e      	sub	sp, #56	; 0x38
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10a      	bne.n	800801a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	623b      	str	r3, [r7, #32]
}
 8008016:	bf00      	nop
 8008018:	e7fe      	b.n	8008018 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	61fb      	str	r3, [r7, #28]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008038:	f001 f90e 	bl	8009258 <xTaskGetSchedulerState>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <xQueueSemaphoreTake+0x60>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <xQueueSemaphoreTake+0x64>
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <xQueueSemaphoreTake+0x66>
 800804c:	2300      	movs	r3, #0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	61bb      	str	r3, [r7, #24]
}
 8008064:	bf00      	nop
 8008066:	e7fe      	b.n	8008066 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008068:	f7ff f9c4 	bl	80073f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800806c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	2b00      	cmp	r3, #0
 8008076:	d024      	beq.n	80080c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	1e5a      	subs	r2, r3, #1
 800807c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d104      	bne.n	8008092 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008088:	f001 fa5c 	bl	8009544 <pvTaskIncrementMutexHeldCount>
 800808c:	4602      	mov	r2, r0
 800808e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008090:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00f      	beq.n	80080ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809c:	3310      	adds	r3, #16
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 ff08 	bl	8008eb4 <xTaskRemoveFromEventList>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080aa:	4b54      	ldr	r3, [pc, #336]	; (80081fc <xQueueSemaphoreTake+0x214>)
 80080ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080ba:	f7ff f9cb 	bl	8007454 <vPortExitCritical>
				return pdPASS;
 80080be:	2301      	movs	r3, #1
 80080c0:	e097      	b.n	80081f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d111      	bne.n	80080ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	617b      	str	r3, [r7, #20]
}
 80080e0:	bf00      	nop
 80080e2:	e7fe      	b.n	80080e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80080e4:	f7ff f9b6 	bl	8007454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e082      	b.n	80081f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d106      	bne.n	8008100 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080f2:	f107 030c 	add.w	r3, r7, #12
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 ff40 	bl	8008f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080fc:	2301      	movs	r3, #1
 80080fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008100:	f7ff f9a8 	bl	8007454 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008104:	f000 fcac 	bl	8008a60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008108:	f7ff f974 	bl	80073f4 <vPortEnterCritical>
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008112:	b25b      	sxtb	r3, r3
 8008114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008118:	d103      	bne.n	8008122 <xQueueSemaphoreTake+0x13a>
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008128:	b25b      	sxtb	r3, r3
 800812a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812e:	d103      	bne.n	8008138 <xQueueSemaphoreTake+0x150>
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008138:	f7ff f98c 	bl	8007454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800813c:	463a      	mov	r2, r7
 800813e:	f107 030c 	add.w	r3, r7, #12
 8008142:	4611      	mov	r1, r2
 8008144:	4618      	mov	r0, r3
 8008146:	f000 ff2f 	bl	8008fa8 <xTaskCheckForTimeOut>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d132      	bne.n	80081b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008150:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008152:	f000 f972 	bl	800843a <prvIsQueueEmpty>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d026      	beq.n	80081aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d109      	bne.n	8008178 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008164:	f7ff f946 	bl	80073f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	4618      	mov	r0, r3
 800816e:	f001 f891 	bl	8009294 <xTaskPriorityInherit>
 8008172:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008174:	f7ff f96e 	bl	8007454 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817a:	3324      	adds	r3, #36	; 0x24
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	4611      	mov	r1, r2
 8008180:	4618      	mov	r0, r3
 8008182:	f000 fe47 	bl	8008e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008188:	f000 f905 	bl	8008396 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800818c:	f000 fc76 	bl	8008a7c <xTaskResumeAll>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	f47f af68 	bne.w	8008068 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008198:	4b18      	ldr	r3, [pc, #96]	; (80081fc <xQueueSemaphoreTake+0x214>)
 800819a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	e75e      	b.n	8008068 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80081aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081ac:	f000 f8f3 	bl	8008396 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081b0:	f000 fc64 	bl	8008a7c <xTaskResumeAll>
 80081b4:	e758      	b.n	8008068 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80081b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081b8:	f000 f8ed 	bl	8008396 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081bc:	f000 fc5e 	bl	8008a7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081c2:	f000 f93a 	bl	800843a <prvIsQueueEmpty>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f43f af4d 	beq.w	8008068 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00d      	beq.n	80081f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80081d4:	f7ff f90e 	bl	80073f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80081d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081da:	f000 f834 	bl	8008246 <prvGetDisinheritPriorityAfterTimeout>
 80081de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80081e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 f92a 	bl	8009440 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80081ec:	f7ff f932 	bl	8007454 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3738      	adds	r7, #56	; 0x38
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	e000ed04 	.word	0xe000ed04

08008200 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <vQueueDelete+0x28>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	60bb      	str	r3, [r7, #8]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 f95f 	bl	80084ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008234:	2b00      	cmp	r3, #0
 8008236:	d102      	bne.n	800823e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f7fe fddb 	bl	8006df4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800823e:	bf00      	nop
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008246:	b480      	push	{r7}
 8008248:	b085      	sub	sp, #20
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	2b00      	cmp	r3, #0
 8008254:	d006      	beq.n	8008264 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	e001      	b.n	8008268 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008268:	68fb      	ldr	r3, [r7, #12]
	}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b086      	sub	sp, #24
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008282:	2300      	movs	r3, #0
 8008284:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10d      	bne.n	80082b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d14d      	bne.n	8008338 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f001 f85f 	bl	8009364 <xTaskPriorityDisinherit>
 80082a6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	609a      	str	r2, [r3, #8]
 80082ae:	e043      	b.n	8008338 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d119      	bne.n	80082ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6858      	ldr	r0, [r3, #4]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	461a      	mov	r2, r3
 80082c0:	68b9      	ldr	r1, [r7, #8]
 80082c2:	f001 fd1b 	bl	8009cfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	441a      	add	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d32b      	bcc.n	8008338 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	605a      	str	r2, [r3, #4]
 80082e8:	e026      	b.n	8008338 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	68d8      	ldr	r0, [r3, #12]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	461a      	mov	r2, r3
 80082f4:	68b9      	ldr	r1, [r7, #8]
 80082f6:	f001 fd01 	bl	8009cfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	68da      	ldr	r2, [r3, #12]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	425b      	negs	r3, r3
 8008304:	441a      	add	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d207      	bcs.n	8008326 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	689a      	ldr	r2, [r3, #8]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	425b      	negs	r3, r3
 8008320:	441a      	add	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b02      	cmp	r3, #2
 800832a:	d105      	bne.n	8008338 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	3b01      	subs	r3, #1
 8008336:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008340:	697b      	ldr	r3, [r7, #20]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008358:	2b00      	cmp	r3, #0
 800835a:	d018      	beq.n	800838e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68da      	ldr	r2, [r3, #12]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008364:	441a      	add	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	429a      	cmp	r2, r3
 8008374:	d303      	bcc.n	800837e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68d9      	ldr	r1, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	461a      	mov	r2, r3
 8008388:	6838      	ldr	r0, [r7, #0]
 800838a:	f001 fcb7 	bl	8009cfc <memcpy>
	}
}
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800839e:	f7ff f829 	bl	80073f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083aa:	e011      	b.n	80083d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d012      	beq.n	80083da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3324      	adds	r3, #36	; 0x24
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fd7b 	bl	8008eb4 <xTaskRemoveFromEventList>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80083c4:	f000 fe52 	bl	800906c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
 80083ca:	3b01      	subs	r3, #1
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dce9      	bgt.n	80083ac <prvUnlockQueue+0x16>
 80083d8:	e000      	b.n	80083dc <prvUnlockQueue+0x46>
					break;
 80083da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	22ff      	movs	r2, #255	; 0xff
 80083e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80083e4:	f7ff f836 	bl	8007454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083e8:	f7ff f804 	bl	80073f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083f4:	e011      	b.n	800841a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d012      	beq.n	8008424 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	3310      	adds	r3, #16
 8008402:	4618      	mov	r0, r3
 8008404:	f000 fd56 	bl	8008eb4 <xTaskRemoveFromEventList>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800840e:	f000 fe2d 	bl	800906c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	3b01      	subs	r3, #1
 8008416:	b2db      	uxtb	r3, r3
 8008418:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800841a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800841e:	2b00      	cmp	r3, #0
 8008420:	dce9      	bgt.n	80083f6 <prvUnlockQueue+0x60>
 8008422:	e000      	b.n	8008426 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008424:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	22ff      	movs	r2, #255	; 0xff
 800842a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800842e:	f7ff f811 	bl	8007454 <vPortExitCritical>
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008442:	f7fe ffd7 	bl	80073f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	2b00      	cmp	r3, #0
 800844c:	d102      	bne.n	8008454 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800844e:	2301      	movs	r3, #1
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	e001      	b.n	8008458 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008454:	2300      	movs	r3, #0
 8008456:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008458:	f7fe fffc 	bl	8007454 <vPortExitCritical>

	return xReturn;
 800845c:	68fb      	ldr	r3, [r7, #12]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800846e:	f7fe ffc1 	bl	80073f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847a:	429a      	cmp	r2, r3
 800847c:	d102      	bne.n	8008484 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800847e:	2301      	movs	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	e001      	b.n	8008488 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008484:	2300      	movs	r3, #0
 8008486:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008488:	f7fe ffe4 	bl	8007454 <vPortExitCritical>

	return xReturn;
 800848c:	68fb      	ldr	r3, [r7, #12]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084a2:	2300      	movs	r3, #0
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	e014      	b.n	80084d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80084a8:	4a0f      	ldr	r2, [pc, #60]	; (80084e8 <vQueueAddToRegistry+0x50>)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10b      	bne.n	80084cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80084b4:	490c      	ldr	r1, [pc, #48]	; (80084e8 <vQueueAddToRegistry+0x50>)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80084be:	4a0a      	ldr	r2, [pc, #40]	; (80084e8 <vQueueAddToRegistry+0x50>)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	4413      	add	r3, r2
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80084ca:	e006      	b.n	80084da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3301      	adds	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b07      	cmp	r3, #7
 80084d6:	d9e7      	bls.n	80084a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80084d8:	bf00      	nop
 80084da:	bf00      	nop
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	24004580 	.word	0x24004580

080084ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e016      	b.n	8008528 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80084fa:	4a10      	ldr	r2, [pc, #64]	; (800853c <vQueueUnregisterQueue+0x50>)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	4413      	add	r3, r2
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	429a      	cmp	r2, r3
 8008508:	d10b      	bne.n	8008522 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800850a:	4a0c      	ldr	r2, [pc, #48]	; (800853c <vQueueUnregisterQueue+0x50>)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2100      	movs	r1, #0
 8008510:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008514:	4a09      	ldr	r2, [pc, #36]	; (800853c <vQueueUnregisterQueue+0x50>)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	4413      	add	r3, r2
 800851c:	2200      	movs	r2, #0
 800851e:	605a      	str	r2, [r3, #4]
				break;
 8008520:	e006      	b.n	8008530 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3301      	adds	r3, #1
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b07      	cmp	r3, #7
 800852c:	d9e5      	bls.n	80084fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	24004580 	.word	0x24004580

08008540 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008550:	f7fe ff50 	bl	80073f4 <vPortEnterCritical>
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800855a:	b25b      	sxtb	r3, r3
 800855c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008560:	d103      	bne.n	800856a <vQueueWaitForMessageRestricted+0x2a>
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008570:	b25b      	sxtb	r3, r3
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d103      	bne.n	8008580 <vQueueWaitForMessageRestricted+0x40>
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008580:	f7fe ff68 	bl	8007454 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	2b00      	cmp	r3, #0
 800858a:	d106      	bne.n	800859a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	3324      	adds	r3, #36	; 0x24
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	68b9      	ldr	r1, [r7, #8]
 8008594:	4618      	mov	r0, r3
 8008596:	f000 fc61 	bl	8008e5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800859a:	6978      	ldr	r0, [r7, #20]
 800859c:	f7ff fefb 	bl	8008396 <prvUnlockQueue>
	}
 80085a0:	bf00      	nop
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08e      	sub	sp, #56	; 0x38
 80085ac:	af04      	add	r7, sp, #16
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10a      	bne.n	80085d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	623b      	str	r3, [r7, #32]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10a      	bne.n	80085ee <xTaskCreateStatic+0x46>
	__asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	61fb      	str	r3, [r7, #28]
}
 80085ea:	bf00      	nop
 80085ec:	e7fe      	b.n	80085ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80085ee:	23bc      	movs	r3, #188	; 0xbc
 80085f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	2bbc      	cmp	r3, #188	; 0xbc
 80085f6:	d00a      	beq.n	800860e <xTaskCreateStatic+0x66>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	61bb      	str	r3, [r7, #24]
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800860e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	2b00      	cmp	r3, #0
 8008614:	d01e      	beq.n	8008654 <xTaskCreateStatic+0xac>
 8008616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01b      	beq.n	8008654 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008624:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	2202      	movs	r2, #2
 800862a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800862e:	2300      	movs	r3, #0
 8008630:	9303      	str	r3, [sp, #12]
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	9302      	str	r3, [sp, #8]
 8008636:	f107 0314 	add.w	r3, r7, #20
 800863a:	9301      	str	r3, [sp, #4]
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	68b9      	ldr	r1, [r7, #8]
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f850 	bl	80086ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800864c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800864e:	f000 f8f3 	bl	8008838 <prvAddNewTaskToReadyList>
 8008652:	e001      	b.n	8008658 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008654:	2300      	movs	r3, #0
 8008656:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008658:	697b      	ldr	r3, [r7, #20]
	}
 800865a:	4618      	mov	r0, r3
 800865c:	3728      	adds	r7, #40	; 0x28
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008662:	b580      	push	{r7, lr}
 8008664:	b08c      	sub	sp, #48	; 0x30
 8008666:	af04      	add	r7, sp, #16
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	603b      	str	r3, [r7, #0]
 800866e:	4613      	mov	r3, r2
 8008670:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008672:	88fb      	ldrh	r3, [r7, #6]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe faf0 	bl	8006c5c <pvPortMalloc>
 800867c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00e      	beq.n	80086a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008684:	20bc      	movs	r0, #188	; 0xbc
 8008686:	f7fe fae9 	bl	8006c5c <pvPortMalloc>
 800868a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	631a      	str	r2, [r3, #48]	; 0x30
 8008698:	e005      	b.n	80086a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800869a:	6978      	ldr	r0, [r7, #20]
 800869c:	f7fe fbaa 	bl	8006df4 <vPortFree>
 80086a0:	e001      	b.n	80086a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d017      	beq.n	80086dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086b4:	88fa      	ldrh	r2, [r7, #6]
 80086b6:	2300      	movs	r3, #0
 80086b8:	9303      	str	r3, [sp, #12]
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	9302      	str	r3, [sp, #8]
 80086be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 f80e 	bl	80086ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086d0:	69f8      	ldr	r0, [r7, #28]
 80086d2:	f000 f8b1 	bl	8008838 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086d6:	2301      	movs	r3, #1
 80086d8:	61bb      	str	r3, [r7, #24]
 80086da:	e002      	b.n	80086e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086dc:	f04f 33ff 	mov.w	r3, #4294967295
 80086e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80086e2:	69bb      	ldr	r3, [r7, #24]
	}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	461a      	mov	r2, r3
 8008704:	21a5      	movs	r1, #165	; 0xa5
 8008706:	f001 fb07 	bl	8009d18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008714:	440b      	add	r3, r1
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	f023 0307 	bic.w	r3, r3, #7
 8008722:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <prvInitialiseNewTask+0x58>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	617b      	str	r3, [r7, #20]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01f      	beq.n	800878a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800874a:	2300      	movs	r3, #0
 800874c:	61fb      	str	r3, [r7, #28]
 800874e:	e012      	b.n	8008776 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	4413      	add	r3, r2
 8008756:	7819      	ldrb	r1, [r3, #0]
 8008758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	4413      	add	r3, r2
 800875e:	3334      	adds	r3, #52	; 0x34
 8008760:	460a      	mov	r2, r1
 8008762:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	4413      	add	r3, r2
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d006      	beq.n	800877e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	3301      	adds	r3, #1
 8008774:	61fb      	str	r3, [r7, #28]
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	2b0f      	cmp	r3, #15
 800877a:	d9e9      	bls.n	8008750 <prvInitialiseNewTask+0x64>
 800877c:	e000      	b.n	8008780 <prvInitialiseNewTask+0x94>
			{
				break;
 800877e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008788:	e003      	b.n	8008792 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	2b37      	cmp	r3, #55	; 0x37
 8008796:	d901      	bls.n	800879c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008798:	2337      	movs	r3, #55	; 0x37
 800879a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	2200      	movs	r2, #0
 80087ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	3304      	adds	r3, #4
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe fc5c 	bl	8007070 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ba:	3318      	adds	r3, #24
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fe fc57 	bl	8007070 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80087d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087da:	2200      	movs	r2, #0
 80087dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	3354      	adds	r3, #84	; 0x54
 80087ec:	2260      	movs	r2, #96	; 0x60
 80087ee:	2100      	movs	r1, #0
 80087f0:	4618      	mov	r0, r3
 80087f2:	f001 fa91 	bl	8009d18 <memset>
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	4a0c      	ldr	r2, [pc, #48]	; (800882c <prvInitialiseNewTask+0x140>)
 80087fa:	659a      	str	r2, [r3, #88]	; 0x58
 80087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fe:	4a0c      	ldr	r2, [pc, #48]	; (8008830 <prvInitialiseNewTask+0x144>)
 8008800:	65da      	str	r2, [r3, #92]	; 0x5c
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	4a0b      	ldr	r2, [pc, #44]	; (8008834 <prvInitialiseNewTask+0x148>)
 8008806:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	68f9      	ldr	r1, [r7, #12]
 800880c:	69b8      	ldr	r0, [r7, #24]
 800880e:	f7fe fcc3 	bl	8007198 <pxPortInitialiseStack>
 8008812:	4602      	mov	r2, r0
 8008814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008816:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800881e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008822:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008824:	bf00      	nop
 8008826:	3720      	adds	r7, #32
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	0800a018 	.word	0x0800a018
 8008830:	0800a038 	.word	0x0800a038
 8008834:	08009ff8 	.word	0x08009ff8

08008838 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008840:	f7fe fdd8 	bl	80073f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008844:	4b2d      	ldr	r3, [pc, #180]	; (80088fc <prvAddNewTaskToReadyList+0xc4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3301      	adds	r3, #1
 800884a:	4a2c      	ldr	r2, [pc, #176]	; (80088fc <prvAddNewTaskToReadyList+0xc4>)
 800884c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800884e:	4b2c      	ldr	r3, [pc, #176]	; (8008900 <prvAddNewTaskToReadyList+0xc8>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d109      	bne.n	800886a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008856:	4a2a      	ldr	r2, [pc, #168]	; (8008900 <prvAddNewTaskToReadyList+0xc8>)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800885c:	4b27      	ldr	r3, [pc, #156]	; (80088fc <prvAddNewTaskToReadyList+0xc4>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d110      	bne.n	8008886 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008864:	f000 fc26 	bl	80090b4 <prvInitialiseTaskLists>
 8008868:	e00d      	b.n	8008886 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800886a:	4b26      	ldr	r3, [pc, #152]	; (8008904 <prvAddNewTaskToReadyList+0xcc>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d109      	bne.n	8008886 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008872:	4b23      	ldr	r3, [pc, #140]	; (8008900 <prvAddNewTaskToReadyList+0xc8>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	429a      	cmp	r2, r3
 800887e:	d802      	bhi.n	8008886 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008880:	4a1f      	ldr	r2, [pc, #124]	; (8008900 <prvAddNewTaskToReadyList+0xc8>)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008886:	4b20      	ldr	r3, [pc, #128]	; (8008908 <prvAddNewTaskToReadyList+0xd0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	3301      	adds	r3, #1
 800888c:	4a1e      	ldr	r2, [pc, #120]	; (8008908 <prvAddNewTaskToReadyList+0xd0>)
 800888e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008890:	4b1d      	ldr	r3, [pc, #116]	; (8008908 <prvAddNewTaskToReadyList+0xd0>)
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889c:	4b1b      	ldr	r3, [pc, #108]	; (800890c <prvAddNewTaskToReadyList+0xd4>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d903      	bls.n	80088ac <prvAddNewTaskToReadyList+0x74>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a8:	4a18      	ldr	r2, [pc, #96]	; (800890c <prvAddNewTaskToReadyList+0xd4>)
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4a15      	ldr	r2, [pc, #84]	; (8008910 <prvAddNewTaskToReadyList+0xd8>)
 80088ba:	441a      	add	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3304      	adds	r3, #4
 80088c0:	4619      	mov	r1, r3
 80088c2:	4610      	mov	r0, r2
 80088c4:	f7fe fbe1 	bl	800708a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088c8:	f7fe fdc4 	bl	8007454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088cc:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <prvAddNewTaskToReadyList+0xcc>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00e      	beq.n	80088f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088d4:	4b0a      	ldr	r3, [pc, #40]	; (8008900 <prvAddNewTaskToReadyList+0xc8>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088de:	429a      	cmp	r2, r3
 80088e0:	d207      	bcs.n	80088f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088e2:	4b0c      	ldr	r3, [pc, #48]	; (8008914 <prvAddNewTaskToReadyList+0xdc>)
 80088e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088f2:	bf00      	nop
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	24004a94 	.word	0x24004a94
 8008900:	240045c0 	.word	0x240045c0
 8008904:	24004aa0 	.word	0x24004aa0
 8008908:	24004ab0 	.word	0x24004ab0
 800890c:	24004a9c 	.word	0x24004a9c
 8008910:	240045c4 	.word	0x240045c4
 8008914:	e000ed04 	.word	0xe000ed04

08008918 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008920:	2300      	movs	r3, #0
 8008922:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d017      	beq.n	800895a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800892a:	4b13      	ldr	r3, [pc, #76]	; (8008978 <vTaskDelay+0x60>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00a      	beq.n	8008948 <vTaskDelay+0x30>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	60bb      	str	r3, [r7, #8]
}
 8008944:	bf00      	nop
 8008946:	e7fe      	b.n	8008946 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008948:	f000 f88a 	bl	8008a60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800894c:	2100      	movs	r1, #0
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fe0c 	bl	800956c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008954:	f000 f892 	bl	8008a7c <xTaskResumeAll>
 8008958:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d107      	bne.n	8008970 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008960:	4b06      	ldr	r3, [pc, #24]	; (800897c <vTaskDelay+0x64>)
 8008962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008970:	bf00      	nop
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	24004abc 	.word	0x24004abc
 800897c:	e000ed04 	.word	0xe000ed04

08008980 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	; 0x28
 8008984:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008986:	2300      	movs	r3, #0
 8008988:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800898a:	2300      	movs	r3, #0
 800898c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800898e:	463a      	mov	r2, r7
 8008990:	1d39      	adds	r1, r7, #4
 8008992:	f107 0308 	add.w	r3, r7, #8
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe f92c 	bl	8006bf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	9202      	str	r2, [sp, #8]
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	2300      	movs	r3, #0
 80089ac:	460a      	mov	r2, r1
 80089ae:	4924      	ldr	r1, [pc, #144]	; (8008a40 <vTaskStartScheduler+0xc0>)
 80089b0:	4824      	ldr	r0, [pc, #144]	; (8008a44 <vTaskStartScheduler+0xc4>)
 80089b2:	f7ff fdf9 	bl	80085a8 <xTaskCreateStatic>
 80089b6:	4603      	mov	r3, r0
 80089b8:	4a23      	ldr	r2, [pc, #140]	; (8008a48 <vTaskStartScheduler+0xc8>)
 80089ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089bc:	4b22      	ldr	r3, [pc, #136]	; (8008a48 <vTaskStartScheduler+0xc8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80089c4:	2301      	movs	r3, #1
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	e001      	b.n	80089ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d102      	bne.n	80089da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80089d4:	f000 fe1e 	bl	8009614 <xTimerCreateTimerTask>
 80089d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d11b      	bne.n	8008a18 <vTaskStartScheduler+0x98>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	613b      	str	r3, [r7, #16]
}
 80089f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089f4:	4b15      	ldr	r3, [pc, #84]	; (8008a4c <vTaskStartScheduler+0xcc>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3354      	adds	r3, #84	; 0x54
 80089fa:	4a15      	ldr	r2, [pc, #84]	; (8008a50 <vTaskStartScheduler+0xd0>)
 80089fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80089fe:	4b15      	ldr	r3, [pc, #84]	; (8008a54 <vTaskStartScheduler+0xd4>)
 8008a00:	f04f 32ff 	mov.w	r2, #4294967295
 8008a04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a06:	4b14      	ldr	r3, [pc, #80]	; (8008a58 <vTaskStartScheduler+0xd8>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a0c:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <vTaskStartScheduler+0xdc>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a12:	f7fe fc4d 	bl	80072b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a16:	e00e      	b.n	8008a36 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1e:	d10a      	bne.n	8008a36 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	60fb      	str	r3, [r7, #12]
}
 8008a32:	bf00      	nop
 8008a34:	e7fe      	b.n	8008a34 <vTaskStartScheduler+0xb4>
}
 8008a36:	bf00      	nop
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	08009ef8 	.word	0x08009ef8
 8008a44:	08009085 	.word	0x08009085
 8008a48:	24004ab8 	.word	0x24004ab8
 8008a4c:	240045c0 	.word	0x240045c0
 8008a50:	24000064 	.word	0x24000064
 8008a54:	24004ab4 	.word	0x24004ab4
 8008a58:	24004aa0 	.word	0x24004aa0
 8008a5c:	24004a98 	.word	0x24004a98

08008a60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a60:	b480      	push	{r7}
 8008a62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a64:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <vTaskSuspendAll+0x18>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	4a03      	ldr	r2, [pc, #12]	; (8008a78 <vTaskSuspendAll+0x18>)
 8008a6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a6e:	bf00      	nop
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	24004abc 	.word	0x24004abc

08008a7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a8a:	4b42      	ldr	r3, [pc, #264]	; (8008b94 <xTaskResumeAll+0x118>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	603b      	str	r3, [r7, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008aa8:	f7fe fca4 	bl	80073f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008aac:	4b39      	ldr	r3, [pc, #228]	; (8008b94 <xTaskResumeAll+0x118>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	4a38      	ldr	r2, [pc, #224]	; (8008b94 <xTaskResumeAll+0x118>)
 8008ab4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ab6:	4b37      	ldr	r3, [pc, #220]	; (8008b94 <xTaskResumeAll+0x118>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d162      	bne.n	8008b84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008abe:	4b36      	ldr	r3, [pc, #216]	; (8008b98 <xTaskResumeAll+0x11c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d05e      	beq.n	8008b84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ac6:	e02f      	b.n	8008b28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ac8:	4b34      	ldr	r3, [pc, #208]	; (8008b9c <xTaskResumeAll+0x120>)
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	3318      	adds	r3, #24
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fe fb35 	bl	8007144 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	3304      	adds	r3, #4
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fe fb30 	bl	8007144 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae8:	4b2d      	ldr	r3, [pc, #180]	; (8008ba0 <xTaskResumeAll+0x124>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d903      	bls.n	8008af8 <xTaskResumeAll+0x7c>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af4:	4a2a      	ldr	r2, [pc, #168]	; (8008ba0 <xTaskResumeAll+0x124>)
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4a27      	ldr	r2, [pc, #156]	; (8008ba4 <xTaskResumeAll+0x128>)
 8008b06:	441a      	add	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	f7fe fabb 	bl	800708a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b18:	4b23      	ldr	r3, [pc, #140]	; (8008ba8 <xTaskResumeAll+0x12c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d302      	bcc.n	8008b28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008b22:	4b22      	ldr	r3, [pc, #136]	; (8008bac <xTaskResumeAll+0x130>)
 8008b24:	2201      	movs	r2, #1
 8008b26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b28:	4b1c      	ldr	r3, [pc, #112]	; (8008b9c <xTaskResumeAll+0x120>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1cb      	bne.n	8008ac8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b36:	f000 fb5f 	bl	80091f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b3a:	4b1d      	ldr	r3, [pc, #116]	; (8008bb0 <xTaskResumeAll+0x134>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d010      	beq.n	8008b68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b46:	f000 f847 	bl	8008bd8 <xTaskIncrementTick>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008b50:	4b16      	ldr	r3, [pc, #88]	; (8008bac <xTaskResumeAll+0x130>)
 8008b52:	2201      	movs	r2, #1
 8008b54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1f1      	bne.n	8008b46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008b62:	4b13      	ldr	r3, [pc, #76]	; (8008bb0 <xTaskResumeAll+0x134>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b68:	4b10      	ldr	r3, [pc, #64]	; (8008bac <xTaskResumeAll+0x130>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d009      	beq.n	8008b84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b70:	2301      	movs	r3, #1
 8008b72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b74:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <xTaskResumeAll+0x138>)
 8008b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b84:	f7fe fc66 	bl	8007454 <vPortExitCritical>

	return xAlreadyYielded;
 8008b88:	68bb      	ldr	r3, [r7, #8]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	24004abc 	.word	0x24004abc
 8008b98:	24004a94 	.word	0x24004a94
 8008b9c:	24004a54 	.word	0x24004a54
 8008ba0:	24004a9c 	.word	0x24004a9c
 8008ba4:	240045c4 	.word	0x240045c4
 8008ba8:	240045c0 	.word	0x240045c0
 8008bac:	24004aa8 	.word	0x24004aa8
 8008bb0:	24004aa4 	.word	0x24004aa4
 8008bb4:	e000ed04 	.word	0xe000ed04

08008bb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008bbe:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <xTaskGetTickCount+0x1c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008bc4:	687b      	ldr	r3, [r7, #4]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	24004a98 	.word	0x24004a98

08008bd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bde:	2300      	movs	r3, #0
 8008be0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be2:	4b4f      	ldr	r3, [pc, #316]	; (8008d20 <xTaskIncrementTick+0x148>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f040 808f 	bne.w	8008d0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bec:	4b4d      	ldr	r3, [pc, #308]	; (8008d24 <xTaskIncrementTick+0x14c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bf4:	4a4b      	ldr	r2, [pc, #300]	; (8008d24 <xTaskIncrementTick+0x14c>)
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d120      	bne.n	8008c42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c00:	4b49      	ldr	r3, [pc, #292]	; (8008d28 <xTaskIncrementTick+0x150>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00a      	beq.n	8008c20 <xTaskIncrementTick+0x48>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	603b      	str	r3, [r7, #0]
}
 8008c1c:	bf00      	nop
 8008c1e:	e7fe      	b.n	8008c1e <xTaskIncrementTick+0x46>
 8008c20:	4b41      	ldr	r3, [pc, #260]	; (8008d28 <xTaskIncrementTick+0x150>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	60fb      	str	r3, [r7, #12]
 8008c26:	4b41      	ldr	r3, [pc, #260]	; (8008d2c <xTaskIncrementTick+0x154>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a3f      	ldr	r2, [pc, #252]	; (8008d28 <xTaskIncrementTick+0x150>)
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	4a3f      	ldr	r2, [pc, #252]	; (8008d2c <xTaskIncrementTick+0x154>)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	4b3e      	ldr	r3, [pc, #248]	; (8008d30 <xTaskIncrementTick+0x158>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	4a3d      	ldr	r2, [pc, #244]	; (8008d30 <xTaskIncrementTick+0x158>)
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	f000 fadb 	bl	80091f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c42:	4b3c      	ldr	r3, [pc, #240]	; (8008d34 <xTaskIncrementTick+0x15c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d349      	bcc.n	8008ce0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c4c:	4b36      	ldr	r3, [pc, #216]	; (8008d28 <xTaskIncrementTick+0x150>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d104      	bne.n	8008c60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c56:	4b37      	ldr	r3, [pc, #220]	; (8008d34 <xTaskIncrementTick+0x15c>)
 8008c58:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5c:	601a      	str	r2, [r3, #0]
					break;
 8008c5e:	e03f      	b.n	8008ce0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c60:	4b31      	ldr	r3, [pc, #196]	; (8008d28 <xTaskIncrementTick+0x150>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d203      	bcs.n	8008c80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c78:	4a2e      	ldr	r2, [pc, #184]	; (8008d34 <xTaskIncrementTick+0x15c>)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c7e:	e02f      	b.n	8008ce0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	3304      	adds	r3, #4
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fe fa5d 	bl	8007144 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d004      	beq.n	8008c9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	3318      	adds	r3, #24
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe fa54 	bl	8007144 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca0:	4b25      	ldr	r3, [pc, #148]	; (8008d38 <xTaskIncrementTick+0x160>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d903      	bls.n	8008cb0 <xTaskIncrementTick+0xd8>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cac:	4a22      	ldr	r2, [pc, #136]	; (8008d38 <xTaskIncrementTick+0x160>)
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4a1f      	ldr	r2, [pc, #124]	; (8008d3c <xTaskIncrementTick+0x164>)
 8008cbe:	441a      	add	r2, r3
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	f7fe f9df 	bl	800708a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd0:	4b1b      	ldr	r3, [pc, #108]	; (8008d40 <xTaskIncrementTick+0x168>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d3b8      	bcc.n	8008c4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cde:	e7b5      	b.n	8008c4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ce0:	4b17      	ldr	r3, [pc, #92]	; (8008d40 <xTaskIncrementTick+0x168>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce6:	4915      	ldr	r1, [pc, #84]	; (8008d3c <xTaskIncrementTick+0x164>)
 8008ce8:	4613      	mov	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d901      	bls.n	8008cfc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008cfc:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <xTaskIncrementTick+0x16c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d007      	beq.n	8008d14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008d04:	2301      	movs	r3, #1
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e004      	b.n	8008d14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d0a:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <xTaskIncrementTick+0x170>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	4a0d      	ldr	r2, [pc, #52]	; (8008d48 <xTaskIncrementTick+0x170>)
 8008d12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d14:	697b      	ldr	r3, [r7, #20]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	24004abc 	.word	0x24004abc
 8008d24:	24004a98 	.word	0x24004a98
 8008d28:	24004a4c 	.word	0x24004a4c
 8008d2c:	24004a50 	.word	0x24004a50
 8008d30:	24004aac 	.word	0x24004aac
 8008d34:	24004ab4 	.word	0x24004ab4
 8008d38:	24004a9c 	.word	0x24004a9c
 8008d3c:	240045c4 	.word	0x240045c4
 8008d40:	240045c0 	.word	0x240045c0
 8008d44:	24004aa8 	.word	0x24004aa8
 8008d48:	24004aa4 	.word	0x24004aa4

08008d4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d52:	4b2a      	ldr	r3, [pc, #168]	; (8008dfc <vTaskSwitchContext+0xb0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d003      	beq.n	8008d62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d5a:	4b29      	ldr	r3, [pc, #164]	; (8008e00 <vTaskSwitchContext+0xb4>)
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d60:	e046      	b.n	8008df0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008d62:	4b27      	ldr	r3, [pc, #156]	; (8008e00 <vTaskSwitchContext+0xb4>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d68:	4b26      	ldr	r3, [pc, #152]	; (8008e04 <vTaskSwitchContext+0xb8>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	e010      	b.n	8008d92 <vTaskSwitchContext+0x46>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10a      	bne.n	8008d8c <vTaskSwitchContext+0x40>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	607b      	str	r3, [r7, #4]
}
 8008d88:	bf00      	nop
 8008d8a:	e7fe      	b.n	8008d8a <vTaskSwitchContext+0x3e>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	491d      	ldr	r1, [pc, #116]	; (8008e08 <vTaskSwitchContext+0xbc>)
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	4613      	mov	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	440b      	add	r3, r1
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0e4      	beq.n	8008d70 <vTaskSwitchContext+0x24>
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	4613      	mov	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <vTaskSwitchContext+0xbc>)
 8008db2:	4413      	add	r3, r2
 8008db4:	60bb      	str	r3, [r7, #8]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	605a      	str	r2, [r3, #4]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d104      	bne.n	8008dd6 <vTaskSwitchContext+0x8a>
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	605a      	str	r2, [r3, #4]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	4a0b      	ldr	r2, [pc, #44]	; (8008e0c <vTaskSwitchContext+0xc0>)
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	4a08      	ldr	r2, [pc, #32]	; (8008e04 <vTaskSwitchContext+0xb8>)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008de6:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <vTaskSwitchContext+0xc0>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3354      	adds	r3, #84	; 0x54
 8008dec:	4a08      	ldr	r2, [pc, #32]	; (8008e10 <vTaskSwitchContext+0xc4>)
 8008dee:	6013      	str	r3, [r2, #0]
}
 8008df0:	bf00      	nop
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	24004abc 	.word	0x24004abc
 8008e00:	24004aa8 	.word	0x24004aa8
 8008e04:	24004a9c 	.word	0x24004a9c
 8008e08:	240045c4 	.word	0x240045c4
 8008e0c:	240045c0 	.word	0x240045c0
 8008e10:	24000064 	.word	0x24000064

08008e14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	60fb      	str	r3, [r7, #12]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e3a:	4b07      	ldr	r3, [pc, #28]	; (8008e58 <vTaskPlaceOnEventList+0x44>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3318      	adds	r3, #24
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7fe f945 	bl	80070d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e48:	2101      	movs	r1, #1
 8008e4a:	6838      	ldr	r0, [r7, #0]
 8008e4c:	f000 fb8e 	bl	800956c <prvAddCurrentTaskToDelayedList>
}
 8008e50:	bf00      	nop
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	240045c0 	.word	0x240045c0

08008e5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10a      	bne.n	8008e84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	617b      	str	r3, [r7, #20]
}
 8008e80:	bf00      	nop
 8008e82:	e7fe      	b.n	8008e82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e84:	4b0a      	ldr	r3, [pc, #40]	; (8008eb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3318      	adds	r3, #24
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f7fe f8fc 	bl	800708a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e98:	f04f 33ff 	mov.w	r3, #4294967295
 8008e9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	68b8      	ldr	r0, [r7, #8]
 8008ea2:	f000 fb63 	bl	800956c <prvAddCurrentTaskToDelayedList>
	}
 8008ea6:	bf00      	nop
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	240045c0 	.word	0x240045c0

08008eb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10a      	bne.n	8008ee0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	60fb      	str	r3, [r7, #12]
}
 8008edc:	bf00      	nop
 8008ede:	e7fe      	b.n	8008ede <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	3318      	adds	r3, #24
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fe f92d 	bl	8007144 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eea:	4b1e      	ldr	r3, [pc, #120]	; (8008f64 <xTaskRemoveFromEventList+0xb0>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d11d      	bne.n	8008f2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe f924 	bl	8007144 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f00:	4b19      	ldr	r3, [pc, #100]	; (8008f68 <xTaskRemoveFromEventList+0xb4>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d903      	bls.n	8008f10 <xTaskRemoveFromEventList+0x5c>
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0c:	4a16      	ldr	r2, [pc, #88]	; (8008f68 <xTaskRemoveFromEventList+0xb4>)
 8008f0e:	6013      	str	r3, [r2, #0]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4a13      	ldr	r2, [pc, #76]	; (8008f6c <xTaskRemoveFromEventList+0xb8>)
 8008f1e:	441a      	add	r2, r3
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4619      	mov	r1, r3
 8008f26:	4610      	mov	r0, r2
 8008f28:	f7fe f8af 	bl	800708a <vListInsertEnd>
 8008f2c:	e005      	b.n	8008f3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	3318      	adds	r3, #24
 8008f32:	4619      	mov	r1, r3
 8008f34:	480e      	ldr	r0, [pc, #56]	; (8008f70 <xTaskRemoveFromEventList+0xbc>)
 8008f36:	f7fe f8a8 	bl	800708a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3e:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <xTaskRemoveFromEventList+0xc0>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d905      	bls.n	8008f54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f4c:	4b0a      	ldr	r3, [pc, #40]	; (8008f78 <xTaskRemoveFromEventList+0xc4>)
 8008f4e:	2201      	movs	r2, #1
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	e001      	b.n	8008f58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008f54:	2300      	movs	r3, #0
 8008f56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f58:	697b      	ldr	r3, [r7, #20]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	24004abc 	.word	0x24004abc
 8008f68:	24004a9c 	.word	0x24004a9c
 8008f6c:	240045c4 	.word	0x240045c4
 8008f70:	24004a54 	.word	0x24004a54
 8008f74:	240045c0 	.word	0x240045c0
 8008f78:	24004aa8 	.word	0x24004aa8

08008f7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f84:	4b06      	ldr	r3, [pc, #24]	; (8008fa0 <vTaskInternalSetTimeOutState+0x24>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f8c:	4b05      	ldr	r3, [pc, #20]	; (8008fa4 <vTaskInternalSetTimeOutState+0x28>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	605a      	str	r2, [r3, #4]
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	24004aac 	.word	0x24004aac
 8008fa4:	24004a98 	.word	0x24004a98

08008fa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b088      	sub	sp, #32
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	613b      	str	r3, [r7, #16]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	60fb      	str	r3, [r7, #12]
}
 8008fe6:	bf00      	nop
 8008fe8:	e7fe      	b.n	8008fe8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008fea:	f7fe fa03 	bl	80073f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fee:	4b1d      	ldr	r3, [pc, #116]	; (8009064 <xTaskCheckForTimeOut+0xbc>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	69ba      	ldr	r2, [r7, #24]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009006:	d102      	bne.n	800900e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009008:	2300      	movs	r3, #0
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	e023      	b.n	8009056 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	4b15      	ldr	r3, [pc, #84]	; (8009068 <xTaskCheckForTimeOut+0xc0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	429a      	cmp	r2, r3
 8009018:	d007      	beq.n	800902a <xTaskCheckForTimeOut+0x82>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	69ba      	ldr	r2, [r7, #24]
 8009020:	429a      	cmp	r2, r3
 8009022:	d302      	bcc.n	800902a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009024:	2301      	movs	r3, #1
 8009026:	61fb      	str	r3, [r7, #28]
 8009028:	e015      	b.n	8009056 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	429a      	cmp	r2, r3
 8009032:	d20b      	bcs.n	800904c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	1ad2      	subs	r2, r2, r3
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff ff9b 	bl	8008f7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009046:	2300      	movs	r3, #0
 8009048:	61fb      	str	r3, [r7, #28]
 800904a:	e004      	b.n	8009056 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	2200      	movs	r2, #0
 8009050:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009052:	2301      	movs	r3, #1
 8009054:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009056:	f7fe f9fd 	bl	8007454 <vPortExitCritical>

	return xReturn;
 800905a:	69fb      	ldr	r3, [r7, #28]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3720      	adds	r7, #32
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	24004a98 	.word	0x24004a98
 8009068:	24004aac 	.word	0x24004aac

0800906c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800906c:	b480      	push	{r7}
 800906e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009070:	4b03      	ldr	r3, [pc, #12]	; (8009080 <vTaskMissedYield+0x14>)
 8009072:	2201      	movs	r2, #1
 8009074:	601a      	str	r2, [r3, #0]
}
 8009076:	bf00      	nop
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	24004aa8 	.word	0x24004aa8

08009084 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800908c:	f000 f852 	bl	8009134 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009090:	4b06      	ldr	r3, [pc, #24]	; (80090ac <prvIdleTask+0x28>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d9f9      	bls.n	800908c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009098:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <prvIdleTask+0x2c>)
 800909a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090a8:	e7f0      	b.n	800908c <prvIdleTask+0x8>
 80090aa:	bf00      	nop
 80090ac:	240045c4 	.word	0x240045c4
 80090b0:	e000ed04 	.word	0xe000ed04

080090b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090ba:	2300      	movs	r3, #0
 80090bc:	607b      	str	r3, [r7, #4]
 80090be:	e00c      	b.n	80090da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4a12      	ldr	r2, [pc, #72]	; (8009114 <prvInitialiseTaskLists+0x60>)
 80090cc:	4413      	add	r3, r2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fd ffae 	bl	8007030 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3301      	adds	r3, #1
 80090d8:	607b      	str	r3, [r7, #4]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2b37      	cmp	r3, #55	; 0x37
 80090de:	d9ef      	bls.n	80090c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090e0:	480d      	ldr	r0, [pc, #52]	; (8009118 <prvInitialiseTaskLists+0x64>)
 80090e2:	f7fd ffa5 	bl	8007030 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090e6:	480d      	ldr	r0, [pc, #52]	; (800911c <prvInitialiseTaskLists+0x68>)
 80090e8:	f7fd ffa2 	bl	8007030 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090ec:	480c      	ldr	r0, [pc, #48]	; (8009120 <prvInitialiseTaskLists+0x6c>)
 80090ee:	f7fd ff9f 	bl	8007030 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090f2:	480c      	ldr	r0, [pc, #48]	; (8009124 <prvInitialiseTaskLists+0x70>)
 80090f4:	f7fd ff9c 	bl	8007030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090f8:	480b      	ldr	r0, [pc, #44]	; (8009128 <prvInitialiseTaskLists+0x74>)
 80090fa:	f7fd ff99 	bl	8007030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090fe:	4b0b      	ldr	r3, [pc, #44]	; (800912c <prvInitialiseTaskLists+0x78>)
 8009100:	4a05      	ldr	r2, [pc, #20]	; (8009118 <prvInitialiseTaskLists+0x64>)
 8009102:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009104:	4b0a      	ldr	r3, [pc, #40]	; (8009130 <prvInitialiseTaskLists+0x7c>)
 8009106:	4a05      	ldr	r2, [pc, #20]	; (800911c <prvInitialiseTaskLists+0x68>)
 8009108:	601a      	str	r2, [r3, #0]
}
 800910a:	bf00      	nop
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	240045c4 	.word	0x240045c4
 8009118:	24004a24 	.word	0x24004a24
 800911c:	24004a38 	.word	0x24004a38
 8009120:	24004a54 	.word	0x24004a54
 8009124:	24004a68 	.word	0x24004a68
 8009128:	24004a80 	.word	0x24004a80
 800912c:	24004a4c 	.word	0x24004a4c
 8009130:	24004a50 	.word	0x24004a50

08009134 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800913a:	e019      	b.n	8009170 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800913c:	f7fe f95a 	bl	80073f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009140:	4b10      	ldr	r3, [pc, #64]	; (8009184 <prvCheckTasksWaitingTermination+0x50>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3304      	adds	r3, #4
 800914c:	4618      	mov	r0, r3
 800914e:	f7fd fff9 	bl	8007144 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009152:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <prvCheckTasksWaitingTermination+0x54>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3b01      	subs	r3, #1
 8009158:	4a0b      	ldr	r2, [pc, #44]	; (8009188 <prvCheckTasksWaitingTermination+0x54>)
 800915a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800915c:	4b0b      	ldr	r3, [pc, #44]	; (800918c <prvCheckTasksWaitingTermination+0x58>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3b01      	subs	r3, #1
 8009162:	4a0a      	ldr	r2, [pc, #40]	; (800918c <prvCheckTasksWaitingTermination+0x58>)
 8009164:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009166:	f7fe f975 	bl	8007454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f810 	bl	8009190 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009170:	4b06      	ldr	r3, [pc, #24]	; (800918c <prvCheckTasksWaitingTermination+0x58>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1e1      	bne.n	800913c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009178:	bf00      	nop
 800917a:	bf00      	nop
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	24004a68 	.word	0x24004a68
 8009188:	24004a94 	.word	0x24004a94
 800918c:	24004a7c 	.word	0x24004a7c

08009190 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3354      	adds	r3, #84	; 0x54
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fdd1 	bl	8009d44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d108      	bne.n	80091be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fd fe1f 	bl	8006df4 <vPortFree>
				vPortFree( pxTCB );
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7fd fe1c 	bl	8006df4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091bc:	e018      	b.n	80091f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d103      	bne.n	80091d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7fd fe13 	bl	8006df4 <vPortFree>
	}
 80091ce:	e00f      	b.n	80091f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d00a      	beq.n	80091f0 <prvDeleteTCB+0x60>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	60fb      	str	r3, [r7, #12]
}
 80091ec:	bf00      	nop
 80091ee:	e7fe      	b.n	80091ee <prvDeleteTCB+0x5e>
	}
 80091f0:	bf00      	nop
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091fe:	4b0c      	ldr	r3, [pc, #48]	; (8009230 <prvResetNextTaskUnblockTime+0x38>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d104      	bne.n	8009212 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009208:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <prvResetNextTaskUnblockTime+0x3c>)
 800920a:	f04f 32ff 	mov.w	r2, #4294967295
 800920e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009210:	e008      	b.n	8009224 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009212:	4b07      	ldr	r3, [pc, #28]	; (8009230 <prvResetNextTaskUnblockTime+0x38>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	4a04      	ldr	r2, [pc, #16]	; (8009234 <prvResetNextTaskUnblockTime+0x3c>)
 8009222:	6013      	str	r3, [r2, #0]
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	24004a4c 	.word	0x24004a4c
 8009234:	24004ab4 	.word	0x24004ab4

08009238 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800923e:	4b05      	ldr	r3, [pc, #20]	; (8009254 <xTaskGetCurrentTaskHandle+0x1c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009244:	687b      	ldr	r3, [r7, #4]
	}
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	240045c0 	.word	0x240045c0

08009258 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800925e:	4b0b      	ldr	r3, [pc, #44]	; (800928c <xTaskGetSchedulerState+0x34>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d102      	bne.n	800926c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009266:	2301      	movs	r3, #1
 8009268:	607b      	str	r3, [r7, #4]
 800926a:	e008      	b.n	800927e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800926c:	4b08      	ldr	r3, [pc, #32]	; (8009290 <xTaskGetSchedulerState+0x38>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d102      	bne.n	800927a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009274:	2302      	movs	r3, #2
 8009276:	607b      	str	r3, [r7, #4]
 8009278:	e001      	b.n	800927e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800927a:	2300      	movs	r3, #0
 800927c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800927e:	687b      	ldr	r3, [r7, #4]
	}
 8009280:	4618      	mov	r0, r3
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	24004aa0 	.word	0x24004aa0
 8009290:	24004abc 	.word	0x24004abc

08009294 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80092a0:	2300      	movs	r3, #0
 80092a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d051      	beq.n	800934e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ae:	4b2a      	ldr	r3, [pc, #168]	; (8009358 <xTaskPriorityInherit+0xc4>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d241      	bcs.n	800933c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	db06      	blt.n	80092ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092c0:	4b25      	ldr	r3, [pc, #148]	; (8009358 <xTaskPriorityInherit+0xc4>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	6959      	ldr	r1, [r3, #20]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4a1f      	ldr	r2, [pc, #124]	; (800935c <xTaskPriorityInherit+0xc8>)
 80092e0:	4413      	add	r3, r2
 80092e2:	4299      	cmp	r1, r3
 80092e4:	d122      	bne.n	800932c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	3304      	adds	r3, #4
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fd ff2a 	bl	8007144 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092f0:	4b19      	ldr	r3, [pc, #100]	; (8009358 <xTaskPriorityInherit+0xc4>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fe:	4b18      	ldr	r3, [pc, #96]	; (8009360 <xTaskPriorityInherit+0xcc>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	429a      	cmp	r2, r3
 8009304:	d903      	bls.n	800930e <xTaskPriorityInherit+0x7a>
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	4a15      	ldr	r2, [pc, #84]	; (8009360 <xTaskPriorityInherit+0xcc>)
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4a10      	ldr	r2, [pc, #64]	; (800935c <xTaskPriorityInherit+0xc8>)
 800931c:	441a      	add	r2, r3
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	3304      	adds	r3, #4
 8009322:	4619      	mov	r1, r3
 8009324:	4610      	mov	r0, r2
 8009326:	f7fd feb0 	bl	800708a <vListInsertEnd>
 800932a:	e004      	b.n	8009336 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800932c:	4b0a      	ldr	r3, [pc, #40]	; (8009358 <xTaskPriorityInherit+0xc4>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009336:	2301      	movs	r3, #1
 8009338:	60fb      	str	r3, [r7, #12]
 800933a:	e008      	b.n	800934e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009340:	4b05      	ldr	r3, [pc, #20]	; (8009358 <xTaskPriorityInherit+0xc4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009346:	429a      	cmp	r2, r3
 8009348:	d201      	bcs.n	800934e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800934a:	2301      	movs	r3, #1
 800934c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800934e:	68fb      	ldr	r3, [r7, #12]
	}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	240045c0 	.word	0x240045c0
 800935c:	240045c4 	.word	0x240045c4
 8009360:	24004a9c 	.word	0x24004a9c

08009364 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009370:	2300      	movs	r3, #0
 8009372:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d056      	beq.n	8009428 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800937a:	4b2e      	ldr	r3, [pc, #184]	; (8009434 <xTaskPriorityDisinherit+0xd0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	429a      	cmp	r2, r3
 8009382:	d00a      	beq.n	800939a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	60fb      	str	r3, [r7, #12]
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10a      	bne.n	80093b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	60bb      	str	r3, [r7, #8]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093bc:	1e5a      	subs	r2, r3, #1
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d02c      	beq.n	8009428 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d128      	bne.n	8009428 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	3304      	adds	r3, #4
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fd feb2 	bl	8007144 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f8:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <xTaskPriorityDisinherit+0xd4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d903      	bls.n	8009408 <xTaskPriorityDisinherit+0xa4>
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	4a0c      	ldr	r2, [pc, #48]	; (8009438 <xTaskPriorityDisinherit+0xd4>)
 8009406:	6013      	str	r3, [r2, #0]
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940c:	4613      	mov	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4a09      	ldr	r2, [pc, #36]	; (800943c <xTaskPriorityDisinherit+0xd8>)
 8009416:	441a      	add	r2, r3
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	3304      	adds	r3, #4
 800941c:	4619      	mov	r1, r3
 800941e:	4610      	mov	r0, r2
 8009420:	f7fd fe33 	bl	800708a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009424:	2301      	movs	r3, #1
 8009426:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009428:	697b      	ldr	r3, [r7, #20]
	}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	240045c0 	.word	0x240045c0
 8009438:	24004a9c 	.word	0x24004a9c
 800943c:	240045c4 	.word	0x240045c4

08009440 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800944e:	2301      	movs	r3, #1
 8009450:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d06a      	beq.n	800952e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10a      	bne.n	8009476 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	60fb      	str	r3, [r7, #12]
}
 8009472:	bf00      	nop
 8009474:	e7fe      	b.n	8009474 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	429a      	cmp	r2, r3
 800947e:	d902      	bls.n	8009486 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	61fb      	str	r3, [r7, #28]
 8009484:	e002      	b.n	800948c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800948a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009490:	69fa      	ldr	r2, [r7, #28]
 8009492:	429a      	cmp	r2, r3
 8009494:	d04b      	beq.n	800952e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	429a      	cmp	r2, r3
 800949e:	d146      	bne.n	800952e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80094a0:	4b25      	ldr	r3, [pc, #148]	; (8009538 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d10a      	bne.n	80094c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	60bb      	str	r3, [r7, #8]
}
 80094bc:	bf00      	nop
 80094be:	e7fe      	b.n	80094be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	69fa      	ldr	r2, [r7, #28]
 80094ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	db04      	blt.n	80094de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	6959      	ldr	r1, [r3, #20]
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	4613      	mov	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4a13      	ldr	r2, [pc, #76]	; (800953c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80094ee:	4413      	add	r3, r2
 80094f0:	4299      	cmp	r1, r3
 80094f2:	d11c      	bne.n	800952e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	3304      	adds	r3, #4
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fd fe23 	bl	8007144 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009502:	4b0f      	ldr	r3, [pc, #60]	; (8009540 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d903      	bls.n	8009512 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950e:	4a0c      	ldr	r2, [pc, #48]	; (8009540 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4a07      	ldr	r2, [pc, #28]	; (800953c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009520:	441a      	add	r2, r3
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	3304      	adds	r3, #4
 8009526:	4619      	mov	r1, r3
 8009528:	4610      	mov	r0, r2
 800952a:	f7fd fdae 	bl	800708a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800952e:	bf00      	nop
 8009530:	3720      	adds	r7, #32
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	240045c0 	.word	0x240045c0
 800953c:	240045c4 	.word	0x240045c4
 8009540:	24004a9c 	.word	0x24004a9c

08009544 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009544:	b480      	push	{r7}
 8009546:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009548:	4b07      	ldr	r3, [pc, #28]	; (8009568 <pvTaskIncrementMutexHeldCount+0x24>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d004      	beq.n	800955a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009550:	4b05      	ldr	r3, [pc, #20]	; (8009568 <pvTaskIncrementMutexHeldCount+0x24>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009556:	3201      	adds	r2, #1
 8009558:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800955a:	4b03      	ldr	r3, [pc, #12]	; (8009568 <pvTaskIncrementMutexHeldCount+0x24>)
 800955c:	681b      	ldr	r3, [r3, #0]
	}
 800955e:	4618      	mov	r0, r3
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	240045c0 	.word	0x240045c0

0800956c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009576:	4b21      	ldr	r3, [pc, #132]	; (80095fc <prvAddCurrentTaskToDelayedList+0x90>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800957c:	4b20      	ldr	r3, [pc, #128]	; (8009600 <prvAddCurrentTaskToDelayedList+0x94>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3304      	adds	r3, #4
 8009582:	4618      	mov	r0, r3
 8009584:	f7fd fdde 	bl	8007144 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958e:	d10a      	bne.n	80095a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009596:	4b1a      	ldr	r3, [pc, #104]	; (8009600 <prvAddCurrentTaskToDelayedList+0x94>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3304      	adds	r3, #4
 800959c:	4619      	mov	r1, r3
 800959e:	4819      	ldr	r0, [pc, #100]	; (8009604 <prvAddCurrentTaskToDelayedList+0x98>)
 80095a0:	f7fd fd73 	bl	800708a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095a4:	e026      	b.n	80095f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4413      	add	r3, r2
 80095ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095ae:	4b14      	ldr	r3, [pc, #80]	; (8009600 <prvAddCurrentTaskToDelayedList+0x94>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d209      	bcs.n	80095d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095be:	4b12      	ldr	r3, [pc, #72]	; (8009608 <prvAddCurrentTaskToDelayedList+0x9c>)
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	4b0f      	ldr	r3, [pc, #60]	; (8009600 <prvAddCurrentTaskToDelayedList+0x94>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3304      	adds	r3, #4
 80095c8:	4619      	mov	r1, r3
 80095ca:	4610      	mov	r0, r2
 80095cc:	f7fd fd81 	bl	80070d2 <vListInsert>
}
 80095d0:	e010      	b.n	80095f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095d2:	4b0e      	ldr	r3, [pc, #56]	; (800960c <prvAddCurrentTaskToDelayedList+0xa0>)
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <prvAddCurrentTaskToDelayedList+0x94>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3304      	adds	r3, #4
 80095dc:	4619      	mov	r1, r3
 80095de:	4610      	mov	r0, r2
 80095e0:	f7fd fd77 	bl	80070d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095e4:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d202      	bcs.n	80095f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095ee:	4a08      	ldr	r2, [pc, #32]	; (8009610 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	6013      	str	r3, [r2, #0]
}
 80095f4:	bf00      	nop
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	24004a98 	.word	0x24004a98
 8009600:	240045c0 	.word	0x240045c0
 8009604:	24004a80 	.word	0x24004a80
 8009608:	24004a50 	.word	0x24004a50
 800960c:	24004a4c 	.word	0x24004a4c
 8009610:	24004ab4 	.word	0x24004ab4

08009614 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08a      	sub	sp, #40	; 0x28
 8009618:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800961a:	2300      	movs	r3, #0
 800961c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800961e:	f000 fb07 	bl	8009c30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009622:	4b1c      	ldr	r3, [pc, #112]	; (8009694 <xTimerCreateTimerTask+0x80>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d021      	beq.n	800966e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800962a:	2300      	movs	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800962e:	2300      	movs	r3, #0
 8009630:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009632:	1d3a      	adds	r2, r7, #4
 8009634:	f107 0108 	add.w	r1, r7, #8
 8009638:	f107 030c 	add.w	r3, r7, #12
 800963c:	4618      	mov	r0, r3
 800963e:	f7fd faf3 	bl	8006c28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009642:	6879      	ldr	r1, [r7, #4]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	9202      	str	r2, [sp, #8]
 800964a:	9301      	str	r3, [sp, #4]
 800964c:	2302      	movs	r3, #2
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	2300      	movs	r3, #0
 8009652:	460a      	mov	r2, r1
 8009654:	4910      	ldr	r1, [pc, #64]	; (8009698 <xTimerCreateTimerTask+0x84>)
 8009656:	4811      	ldr	r0, [pc, #68]	; (800969c <xTimerCreateTimerTask+0x88>)
 8009658:	f7fe ffa6 	bl	80085a8 <xTaskCreateStatic>
 800965c:	4603      	mov	r3, r0
 800965e:	4a10      	ldr	r2, [pc, #64]	; (80096a0 <xTimerCreateTimerTask+0x8c>)
 8009660:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009662:	4b0f      	ldr	r3, [pc, #60]	; (80096a0 <xTimerCreateTimerTask+0x8c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800966a:	2301      	movs	r3, #1
 800966c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	613b      	str	r3, [r7, #16]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800968a:	697b      	ldr	r3, [r7, #20]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3718      	adds	r7, #24
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	24004af0 	.word	0x24004af0
 8009698:	08009f00 	.word	0x08009f00
 800969c:	080097d9 	.word	0x080097d9
 80096a0:	24004af4 	.word	0x24004af4

080096a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08a      	sub	sp, #40	; 0x28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10a      	bne.n	80096d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	623b      	str	r3, [r7, #32]
}
 80096ce:	bf00      	nop
 80096d0:	e7fe      	b.n	80096d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096d2:	4b1a      	ldr	r3, [pc, #104]	; (800973c <xTimerGenericCommand+0x98>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d02a      	beq.n	8009730 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b05      	cmp	r3, #5
 80096ea:	dc18      	bgt.n	800971e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096ec:	f7ff fdb4 	bl	8009258 <xTaskGetSchedulerState>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d109      	bne.n	800970a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096f6:	4b11      	ldr	r3, [pc, #68]	; (800973c <xTimerGenericCommand+0x98>)
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	f107 0110 	add.w	r1, r7, #16
 80096fe:	2300      	movs	r3, #0
 8009700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009702:	f7fe f9f7 	bl	8007af4 <xQueueGenericSend>
 8009706:	6278      	str	r0, [r7, #36]	; 0x24
 8009708:	e012      	b.n	8009730 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800970a:	4b0c      	ldr	r3, [pc, #48]	; (800973c <xTimerGenericCommand+0x98>)
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	f107 0110 	add.w	r1, r7, #16
 8009712:	2300      	movs	r3, #0
 8009714:	2200      	movs	r2, #0
 8009716:	f7fe f9ed 	bl	8007af4 <xQueueGenericSend>
 800971a:	6278      	str	r0, [r7, #36]	; 0x24
 800971c:	e008      	b.n	8009730 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800971e:	4b07      	ldr	r3, [pc, #28]	; (800973c <xTimerGenericCommand+0x98>)
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	f107 0110 	add.w	r1, r7, #16
 8009726:	2300      	movs	r3, #0
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	f7fe fae1 	bl	8007cf0 <xQueueGenericSendFromISR>
 800972e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009732:	4618      	mov	r0, r3
 8009734:	3728      	adds	r7, #40	; 0x28
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	24004af0 	.word	0x24004af0

08009740 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b088      	sub	sp, #32
 8009744:	af02      	add	r7, sp, #8
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800974a:	4b22      	ldr	r3, [pc, #136]	; (80097d4 <prvProcessExpiredTimer+0x94>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	3304      	adds	r3, #4
 8009758:	4618      	mov	r0, r3
 800975a:	f7fd fcf3 	bl	8007144 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d022      	beq.n	80097b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	699a      	ldr	r2, [r3, #24]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	18d1      	adds	r1, r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	6978      	ldr	r0, [r7, #20]
 800977a:	f000 f8d1 	bl	8009920 <prvInsertTimerInActiveList>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d01f      	beq.n	80097c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009784:	2300      	movs	r3, #0
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	2300      	movs	r3, #0
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	2100      	movs	r1, #0
 800978e:	6978      	ldr	r0, [r7, #20]
 8009790:	f7ff ff88 	bl	80096a4 <xTimerGenericCommand>
 8009794:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d113      	bne.n	80097c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	60fb      	str	r3, [r7, #12]
}
 80097ae:	bf00      	nop
 80097b0:	e7fe      	b.n	80097b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097b8:	f023 0301 	bic.w	r3, r3, #1
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	6a1b      	ldr	r3, [r3, #32]
 80097c8:	6978      	ldr	r0, [r7, #20]
 80097ca:	4798      	blx	r3
}
 80097cc:	bf00      	nop
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	24004ae8 	.word	0x24004ae8

080097d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097e0:	f107 0308 	add.w	r3, r7, #8
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 f857 	bl	8009898 <prvGetNextExpireTime>
 80097ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	4619      	mov	r1, r3
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 f803 	bl	80097fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097f6:	f000 f8d5 	bl	80099a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097fa:	e7f1      	b.n	80097e0 <prvTimerTask+0x8>

080097fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009806:	f7ff f92b 	bl	8008a60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800980a:	f107 0308 	add.w	r3, r7, #8
 800980e:	4618      	mov	r0, r3
 8009810:	f000 f866 	bl	80098e0 <prvSampleTimeNow>
 8009814:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d130      	bne.n	800987e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10a      	bne.n	8009838 <prvProcessTimerOrBlockTask+0x3c>
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	429a      	cmp	r2, r3
 8009828:	d806      	bhi.n	8009838 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800982a:	f7ff f927 	bl	8008a7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800982e:	68f9      	ldr	r1, [r7, #12]
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7ff ff85 	bl	8009740 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009836:	e024      	b.n	8009882 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d008      	beq.n	8009850 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800983e:	4b13      	ldr	r3, [pc, #76]	; (800988c <prvProcessTimerOrBlockTask+0x90>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <prvProcessTimerOrBlockTask+0x50>
 8009848:	2301      	movs	r3, #1
 800984a:	e000      	b.n	800984e <prvProcessTimerOrBlockTask+0x52>
 800984c:	2300      	movs	r3, #0
 800984e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009850:	4b0f      	ldr	r3, [pc, #60]	; (8009890 <prvProcessTimerOrBlockTask+0x94>)
 8009852:	6818      	ldr	r0, [r3, #0]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	4619      	mov	r1, r3
 800985e:	f7fe fe6f 	bl	8008540 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009862:	f7ff f90b 	bl	8008a7c <xTaskResumeAll>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10a      	bne.n	8009882 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800986c:	4b09      	ldr	r3, [pc, #36]	; (8009894 <prvProcessTimerOrBlockTask+0x98>)
 800986e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	f3bf 8f6f 	isb	sy
}
 800987c:	e001      	b.n	8009882 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800987e:	f7ff f8fd 	bl	8008a7c <xTaskResumeAll>
}
 8009882:	bf00      	nop
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	24004aec 	.word	0x24004aec
 8009890:	24004af0 	.word	0x24004af0
 8009894:	e000ed04 	.word	0xe000ed04

08009898 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098a0:	4b0e      	ldr	r3, [pc, #56]	; (80098dc <prvGetNextExpireTime+0x44>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d101      	bne.n	80098ae <prvGetNextExpireTime+0x16>
 80098aa:	2201      	movs	r2, #1
 80098ac:	e000      	b.n	80098b0 <prvGetNextExpireTime+0x18>
 80098ae:	2200      	movs	r2, #0
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d105      	bne.n	80098c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098bc:	4b07      	ldr	r3, [pc, #28]	; (80098dc <prvGetNextExpireTime+0x44>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	60fb      	str	r3, [r7, #12]
 80098c6:	e001      	b.n	80098cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80098cc:	68fb      	ldr	r3, [r7, #12]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	24004ae8 	.word	0x24004ae8

080098e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098e8:	f7ff f966 	bl	8008bb8 <xTaskGetTickCount>
 80098ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098ee:	4b0b      	ldr	r3, [pc, #44]	; (800991c <prvSampleTimeNow+0x3c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d205      	bcs.n	8009904 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098f8:	f000 f936 	bl	8009b68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	e002      	b.n	800990a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800990a:	4a04      	ldr	r2, [pc, #16]	; (800991c <prvSampleTimeNow+0x3c>)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009910:	68fb      	ldr	r3, [r7, #12]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	24004af8 	.word	0x24004af8

08009920 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
 800992c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800992e:	2300      	movs	r3, #0
 8009930:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	429a      	cmp	r2, r3
 8009944:	d812      	bhi.n	800996c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	1ad2      	subs	r2, r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	429a      	cmp	r2, r3
 8009952:	d302      	bcc.n	800995a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009954:	2301      	movs	r3, #1
 8009956:	617b      	str	r3, [r7, #20]
 8009958:	e01b      	b.n	8009992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800995a:	4b10      	ldr	r3, [pc, #64]	; (800999c <prvInsertTimerInActiveList+0x7c>)
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3304      	adds	r3, #4
 8009962:	4619      	mov	r1, r3
 8009964:	4610      	mov	r0, r2
 8009966:	f7fd fbb4 	bl	80070d2 <vListInsert>
 800996a:	e012      	b.n	8009992 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	429a      	cmp	r2, r3
 8009972:	d206      	bcs.n	8009982 <prvInsertTimerInActiveList+0x62>
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	429a      	cmp	r2, r3
 800997a:	d302      	bcc.n	8009982 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800997c:	2301      	movs	r3, #1
 800997e:	617b      	str	r3, [r7, #20]
 8009980:	e007      	b.n	8009992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009982:	4b07      	ldr	r3, [pc, #28]	; (80099a0 <prvInsertTimerInActiveList+0x80>)
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3304      	adds	r3, #4
 800998a:	4619      	mov	r1, r3
 800998c:	4610      	mov	r0, r2
 800998e:	f7fd fba0 	bl	80070d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009992:	697b      	ldr	r3, [r7, #20]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3718      	adds	r7, #24
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	24004aec 	.word	0x24004aec
 80099a0:	24004ae8 	.word	0x24004ae8

080099a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08e      	sub	sp, #56	; 0x38
 80099a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099aa:	e0ca      	b.n	8009b42 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	da18      	bge.n	80099e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80099b2:	1d3b      	adds	r3, r7, #4
 80099b4:	3304      	adds	r3, #4
 80099b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80099b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10a      	bne.n	80099d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	61fb      	str	r3, [r7, #28]
}
 80099d0:	bf00      	nop
 80099d2:	e7fe      	b.n	80099d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099da:	6850      	ldr	r0, [r2, #4]
 80099dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099de:	6892      	ldr	r2, [r2, #8]
 80099e0:	4611      	mov	r1, r2
 80099e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f2c0 80aa 	blt.w	8009b40 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fa:	3304      	adds	r3, #4
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fd fba1 	bl	8007144 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a02:	463b      	mov	r3, r7
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7ff ff6b 	bl	80098e0 <prvSampleTimeNow>
 8009a0a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b09      	cmp	r3, #9
 8009a10:	f200 8097 	bhi.w	8009b42 <prvProcessReceivedCommands+0x19e>
 8009a14:	a201      	add	r2, pc, #4	; (adr r2, 8009a1c <prvProcessReceivedCommands+0x78>)
 8009a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1a:	bf00      	nop
 8009a1c:	08009a45 	.word	0x08009a45
 8009a20:	08009a45 	.word	0x08009a45
 8009a24:	08009a45 	.word	0x08009a45
 8009a28:	08009ab9 	.word	0x08009ab9
 8009a2c:	08009acd 	.word	0x08009acd
 8009a30:	08009b17 	.word	0x08009b17
 8009a34:	08009a45 	.word	0x08009a45
 8009a38:	08009a45 	.word	0x08009a45
 8009a3c:	08009ab9 	.word	0x08009ab9
 8009a40:	08009acd 	.word	0x08009acd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a4a:	f043 0301 	orr.w	r3, r3, #1
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	18d1      	adds	r1, r2, r3
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a64:	f7ff ff5c 	bl	8009920 <prvInsertTimerInActiveList>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d069      	beq.n	8009b42 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d05e      	beq.n	8009b42 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	441a      	add	r2, r3
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	2300      	movs	r3, #0
 8009a92:	2100      	movs	r1, #0
 8009a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a96:	f7ff fe05 	bl	80096a4 <xTimerGenericCommand>
 8009a9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d14f      	bne.n	8009b42 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	61bb      	str	r3, [r7, #24]
}
 8009ab4:	bf00      	nop
 8009ab6:	e7fe      	b.n	8009ab6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009abe:	f023 0301 	bic.w	r3, r3, #1
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009aca:	e03a      	b.n	8009b42 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad2:	f043 0301 	orr.w	r3, r3, #1
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10a      	bne.n	8009b02 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	617b      	str	r3, [r7, #20]
}
 8009afe:	bf00      	nop
 8009b00:	e7fe      	b.n	8009b00 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	699a      	ldr	r2, [r3, #24]
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	18d1      	adds	r1, r2, r3
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b10:	f7ff ff06 	bl	8009920 <prvInsertTimerInActiveList>
					break;
 8009b14:	e015      	b.n	8009b42 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b1c:	f003 0302 	and.w	r3, r3, #2
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d103      	bne.n	8009b2c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b26:	f7fd f965 	bl	8006df4 <vPortFree>
 8009b2a:	e00a      	b.n	8009b42 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b32:	f023 0301 	bic.w	r3, r3, #1
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b3e:	e000      	b.n	8009b42 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009b40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b42:	4b08      	ldr	r3, [pc, #32]	; (8009b64 <prvProcessReceivedCommands+0x1c0>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	1d39      	adds	r1, r7, #4
 8009b48:	2200      	movs	r2, #0
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe f96c 	bl	8007e28 <xQueueReceive>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f47f af2a 	bne.w	80099ac <prvProcessReceivedCommands+0x8>
	}
}
 8009b58:	bf00      	nop
 8009b5a:	bf00      	nop
 8009b5c:	3730      	adds	r7, #48	; 0x30
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	24004af0 	.word	0x24004af0

08009b68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b6e:	e048      	b.n	8009c02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b70:	4b2d      	ldr	r3, [pc, #180]	; (8009c28 <prvSwitchTimerLists+0xc0>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b7a:	4b2b      	ldr	r3, [pc, #172]	; (8009c28 <prvSwitchTimerLists+0xc0>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	3304      	adds	r3, #4
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fd fadb 	bl	8007144 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b9c:	f003 0304 	and.w	r3, r3, #4
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d02e      	beq.n	8009c02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	4413      	add	r3, r2
 8009bac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d90e      	bls.n	8009bd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bc2:	4b19      	ldr	r3, [pc, #100]	; (8009c28 <prvSwitchTimerLists+0xc0>)
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	4619      	mov	r1, r3
 8009bcc:	4610      	mov	r0, r2
 8009bce:	f7fd fa80 	bl	80070d2 <vListInsert>
 8009bd2:	e016      	b.n	8009c02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	2100      	movs	r1, #0
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f7ff fd60 	bl	80096a4 <xTimerGenericCommand>
 8009be4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10a      	bne.n	8009c02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	603b      	str	r3, [r7, #0]
}
 8009bfe:	bf00      	nop
 8009c00:	e7fe      	b.n	8009c00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c02:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <prvSwitchTimerLists+0xc0>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1b1      	bne.n	8009b70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c0c:	4b06      	ldr	r3, [pc, #24]	; (8009c28 <prvSwitchTimerLists+0xc0>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c12:	4b06      	ldr	r3, [pc, #24]	; (8009c2c <prvSwitchTimerLists+0xc4>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a04      	ldr	r2, [pc, #16]	; (8009c28 <prvSwitchTimerLists+0xc0>)
 8009c18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c1a:	4a04      	ldr	r2, [pc, #16]	; (8009c2c <prvSwitchTimerLists+0xc4>)
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	6013      	str	r3, [r2, #0]
}
 8009c20:	bf00      	nop
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	24004ae8 	.word	0x24004ae8
 8009c2c:	24004aec 	.word	0x24004aec

08009c30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c36:	f7fd fbdd 	bl	80073f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c3a:	4b15      	ldr	r3, [pc, #84]	; (8009c90 <prvCheckForValidListAndQueue+0x60>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d120      	bne.n	8009c84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c42:	4814      	ldr	r0, [pc, #80]	; (8009c94 <prvCheckForValidListAndQueue+0x64>)
 8009c44:	f7fd f9f4 	bl	8007030 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c48:	4813      	ldr	r0, [pc, #76]	; (8009c98 <prvCheckForValidListAndQueue+0x68>)
 8009c4a:	f7fd f9f1 	bl	8007030 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c4e:	4b13      	ldr	r3, [pc, #76]	; (8009c9c <prvCheckForValidListAndQueue+0x6c>)
 8009c50:	4a10      	ldr	r2, [pc, #64]	; (8009c94 <prvCheckForValidListAndQueue+0x64>)
 8009c52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c54:	4b12      	ldr	r3, [pc, #72]	; (8009ca0 <prvCheckForValidListAndQueue+0x70>)
 8009c56:	4a10      	ldr	r2, [pc, #64]	; (8009c98 <prvCheckForValidListAndQueue+0x68>)
 8009c58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	4b11      	ldr	r3, [pc, #68]	; (8009ca4 <prvCheckForValidListAndQueue+0x74>)
 8009c60:	4a11      	ldr	r2, [pc, #68]	; (8009ca8 <prvCheckForValidListAndQueue+0x78>)
 8009c62:	2110      	movs	r1, #16
 8009c64:	200a      	movs	r0, #10
 8009c66:	f7fd fd4f 	bl	8007708 <xQueueGenericCreateStatic>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	4a08      	ldr	r2, [pc, #32]	; (8009c90 <prvCheckForValidListAndQueue+0x60>)
 8009c6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c70:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <prvCheckForValidListAndQueue+0x60>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d005      	beq.n	8009c84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c78:	4b05      	ldr	r3, [pc, #20]	; (8009c90 <prvCheckForValidListAndQueue+0x60>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	490b      	ldr	r1, [pc, #44]	; (8009cac <prvCheckForValidListAndQueue+0x7c>)
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fe fc0a 	bl	8008498 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c84:	f7fd fbe6 	bl	8007454 <vPortExitCritical>
}
 8009c88:	bf00      	nop
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	24004af0 	.word	0x24004af0
 8009c94:	24004ac0 	.word	0x24004ac0
 8009c98:	24004ad4 	.word	0x24004ad4
 8009c9c:	24004ae8 	.word	0x24004ae8
 8009ca0:	24004aec 	.word	0x24004aec
 8009ca4:	24004b9c 	.word	0x24004b9c
 8009ca8:	24004afc 	.word	0x24004afc
 8009cac:	08009f08 	.word	0x08009f08

08009cb0 <__libc_init_array>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	4d0d      	ldr	r5, [pc, #52]	; (8009ce8 <__libc_init_array+0x38>)
 8009cb4:	4c0d      	ldr	r4, [pc, #52]	; (8009cec <__libc_init_array+0x3c>)
 8009cb6:	1b64      	subs	r4, r4, r5
 8009cb8:	10a4      	asrs	r4, r4, #2
 8009cba:	2600      	movs	r6, #0
 8009cbc:	42a6      	cmp	r6, r4
 8009cbe:	d109      	bne.n	8009cd4 <__libc_init_array+0x24>
 8009cc0:	4d0b      	ldr	r5, [pc, #44]	; (8009cf0 <__libc_init_array+0x40>)
 8009cc2:	4c0c      	ldr	r4, [pc, #48]	; (8009cf4 <__libc_init_array+0x44>)
 8009cc4:	f000 f8f2 	bl	8009eac <_init>
 8009cc8:	1b64      	subs	r4, r4, r5
 8009cca:	10a4      	asrs	r4, r4, #2
 8009ccc:	2600      	movs	r6, #0
 8009cce:	42a6      	cmp	r6, r4
 8009cd0:	d105      	bne.n	8009cde <__libc_init_array+0x2e>
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}
 8009cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd8:	4798      	blx	r3
 8009cda:	3601      	adds	r6, #1
 8009cdc:	e7ee      	b.n	8009cbc <__libc_init_array+0xc>
 8009cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce2:	4798      	blx	r3
 8009ce4:	3601      	adds	r6, #1
 8009ce6:	e7f2      	b.n	8009cce <__libc_init_array+0x1e>
 8009ce8:	0800a060 	.word	0x0800a060
 8009cec:	0800a060 	.word	0x0800a060
 8009cf0:	0800a060 	.word	0x0800a060
 8009cf4:	0800a064 	.word	0x0800a064

08009cf8 <__retarget_lock_acquire_recursive>:
 8009cf8:	4770      	bx	lr

08009cfa <__retarget_lock_release_recursive>:
 8009cfa:	4770      	bx	lr

08009cfc <memcpy>:
 8009cfc:	440a      	add	r2, r1
 8009cfe:	4291      	cmp	r1, r2
 8009d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d04:	d100      	bne.n	8009d08 <memcpy+0xc>
 8009d06:	4770      	bx	lr
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d12:	4291      	cmp	r1, r2
 8009d14:	d1f9      	bne.n	8009d0a <memcpy+0xe>
 8009d16:	bd10      	pop	{r4, pc}

08009d18 <memset>:
 8009d18:	4402      	add	r2, r0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d100      	bne.n	8009d22 <memset+0xa>
 8009d20:	4770      	bx	lr
 8009d22:	f803 1b01 	strb.w	r1, [r3], #1
 8009d26:	e7f9      	b.n	8009d1c <memset+0x4>

08009d28 <cleanup_glue>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	6809      	ldr	r1, [r1, #0]
 8009d2e:	4605      	mov	r5, r0
 8009d30:	b109      	cbz	r1, 8009d36 <cleanup_glue+0xe>
 8009d32:	f7ff fff9 	bl	8009d28 <cleanup_glue>
 8009d36:	4621      	mov	r1, r4
 8009d38:	4628      	mov	r0, r5
 8009d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d3e:	f000 b869 	b.w	8009e14 <_free_r>
	...

08009d44 <_reclaim_reent>:
 8009d44:	4b2c      	ldr	r3, [pc, #176]	; (8009df8 <_reclaim_reent+0xb4>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4283      	cmp	r3, r0
 8009d4a:	b570      	push	{r4, r5, r6, lr}
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	d051      	beq.n	8009df4 <_reclaim_reent+0xb0>
 8009d50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009d52:	b143      	cbz	r3, 8009d66 <_reclaim_reent+0x22>
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d14a      	bne.n	8009df0 <_reclaim_reent+0xac>
 8009d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d5c:	6819      	ldr	r1, [r3, #0]
 8009d5e:	b111      	cbz	r1, 8009d66 <_reclaim_reent+0x22>
 8009d60:	4620      	mov	r0, r4
 8009d62:	f000 f857 	bl	8009e14 <_free_r>
 8009d66:	6961      	ldr	r1, [r4, #20]
 8009d68:	b111      	cbz	r1, 8009d70 <_reclaim_reent+0x2c>
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f000 f852 	bl	8009e14 <_free_r>
 8009d70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009d72:	b111      	cbz	r1, 8009d7a <_reclaim_reent+0x36>
 8009d74:	4620      	mov	r0, r4
 8009d76:	f000 f84d 	bl	8009e14 <_free_r>
 8009d7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009d7c:	b111      	cbz	r1, 8009d84 <_reclaim_reent+0x40>
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f000 f848 	bl	8009e14 <_free_r>
 8009d84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009d86:	b111      	cbz	r1, 8009d8e <_reclaim_reent+0x4a>
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 f843 	bl	8009e14 <_free_r>
 8009d8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009d90:	b111      	cbz	r1, 8009d98 <_reclaim_reent+0x54>
 8009d92:	4620      	mov	r0, r4
 8009d94:	f000 f83e 	bl	8009e14 <_free_r>
 8009d98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009d9a:	b111      	cbz	r1, 8009da2 <_reclaim_reent+0x5e>
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 f839 	bl	8009e14 <_free_r>
 8009da2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009da4:	b111      	cbz	r1, 8009dac <_reclaim_reent+0x68>
 8009da6:	4620      	mov	r0, r4
 8009da8:	f000 f834 	bl	8009e14 <_free_r>
 8009dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dae:	b111      	cbz	r1, 8009db6 <_reclaim_reent+0x72>
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 f82f 	bl	8009e14 <_free_r>
 8009db6:	69a3      	ldr	r3, [r4, #24]
 8009db8:	b1e3      	cbz	r3, 8009df4 <_reclaim_reent+0xb0>
 8009dba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4798      	blx	r3
 8009dc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009dc2:	b1b9      	cbz	r1, 8009df4 <_reclaim_reent+0xb0>
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009dca:	f7ff bfad 	b.w	8009d28 <cleanup_glue>
 8009dce:	5949      	ldr	r1, [r1, r5]
 8009dd0:	b941      	cbnz	r1, 8009de4 <_reclaim_reent+0xa0>
 8009dd2:	3504      	adds	r5, #4
 8009dd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dd6:	2d80      	cmp	r5, #128	; 0x80
 8009dd8:	68d9      	ldr	r1, [r3, #12]
 8009dda:	d1f8      	bne.n	8009dce <_reclaim_reent+0x8a>
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f000 f819 	bl	8009e14 <_free_r>
 8009de2:	e7ba      	b.n	8009d5a <_reclaim_reent+0x16>
 8009de4:	680e      	ldr	r6, [r1, #0]
 8009de6:	4620      	mov	r0, r4
 8009de8:	f000 f814 	bl	8009e14 <_free_r>
 8009dec:	4631      	mov	r1, r6
 8009dee:	e7ef      	b.n	8009dd0 <_reclaim_reent+0x8c>
 8009df0:	2500      	movs	r5, #0
 8009df2:	e7ef      	b.n	8009dd4 <_reclaim_reent+0x90>
 8009df4:	bd70      	pop	{r4, r5, r6, pc}
 8009df6:	bf00      	nop
 8009df8:	24000064 	.word	0x24000064

08009dfc <__malloc_lock>:
 8009dfc:	4801      	ldr	r0, [pc, #4]	; (8009e04 <__malloc_lock+0x8>)
 8009dfe:	f7ff bf7b 	b.w	8009cf8 <__retarget_lock_acquire_recursive>
 8009e02:	bf00      	nop
 8009e04:	24004bec 	.word	0x24004bec

08009e08 <__malloc_unlock>:
 8009e08:	4801      	ldr	r0, [pc, #4]	; (8009e10 <__malloc_unlock+0x8>)
 8009e0a:	f7ff bf76 	b.w	8009cfa <__retarget_lock_release_recursive>
 8009e0e:	bf00      	nop
 8009e10:	24004bec 	.word	0x24004bec

08009e14 <_free_r>:
 8009e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e16:	2900      	cmp	r1, #0
 8009e18:	d044      	beq.n	8009ea4 <_free_r+0x90>
 8009e1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e1e:	9001      	str	r0, [sp, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f1a1 0404 	sub.w	r4, r1, #4
 8009e26:	bfb8      	it	lt
 8009e28:	18e4      	addlt	r4, r4, r3
 8009e2a:	f7ff ffe7 	bl	8009dfc <__malloc_lock>
 8009e2e:	4a1e      	ldr	r2, [pc, #120]	; (8009ea8 <_free_r+0x94>)
 8009e30:	9801      	ldr	r0, [sp, #4]
 8009e32:	6813      	ldr	r3, [r2, #0]
 8009e34:	b933      	cbnz	r3, 8009e44 <_free_r+0x30>
 8009e36:	6063      	str	r3, [r4, #4]
 8009e38:	6014      	str	r4, [r2, #0]
 8009e3a:	b003      	add	sp, #12
 8009e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e40:	f7ff bfe2 	b.w	8009e08 <__malloc_unlock>
 8009e44:	42a3      	cmp	r3, r4
 8009e46:	d908      	bls.n	8009e5a <_free_r+0x46>
 8009e48:	6825      	ldr	r5, [r4, #0]
 8009e4a:	1961      	adds	r1, r4, r5
 8009e4c:	428b      	cmp	r3, r1
 8009e4e:	bf01      	itttt	eq
 8009e50:	6819      	ldreq	r1, [r3, #0]
 8009e52:	685b      	ldreq	r3, [r3, #4]
 8009e54:	1949      	addeq	r1, r1, r5
 8009e56:	6021      	streq	r1, [r4, #0]
 8009e58:	e7ed      	b.n	8009e36 <_free_r+0x22>
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	b10b      	cbz	r3, 8009e64 <_free_r+0x50>
 8009e60:	42a3      	cmp	r3, r4
 8009e62:	d9fa      	bls.n	8009e5a <_free_r+0x46>
 8009e64:	6811      	ldr	r1, [r2, #0]
 8009e66:	1855      	adds	r5, r2, r1
 8009e68:	42a5      	cmp	r5, r4
 8009e6a:	d10b      	bne.n	8009e84 <_free_r+0x70>
 8009e6c:	6824      	ldr	r4, [r4, #0]
 8009e6e:	4421      	add	r1, r4
 8009e70:	1854      	adds	r4, r2, r1
 8009e72:	42a3      	cmp	r3, r4
 8009e74:	6011      	str	r1, [r2, #0]
 8009e76:	d1e0      	bne.n	8009e3a <_free_r+0x26>
 8009e78:	681c      	ldr	r4, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	6053      	str	r3, [r2, #4]
 8009e7e:	4421      	add	r1, r4
 8009e80:	6011      	str	r1, [r2, #0]
 8009e82:	e7da      	b.n	8009e3a <_free_r+0x26>
 8009e84:	d902      	bls.n	8009e8c <_free_r+0x78>
 8009e86:	230c      	movs	r3, #12
 8009e88:	6003      	str	r3, [r0, #0]
 8009e8a:	e7d6      	b.n	8009e3a <_free_r+0x26>
 8009e8c:	6825      	ldr	r5, [r4, #0]
 8009e8e:	1961      	adds	r1, r4, r5
 8009e90:	428b      	cmp	r3, r1
 8009e92:	bf04      	itt	eq
 8009e94:	6819      	ldreq	r1, [r3, #0]
 8009e96:	685b      	ldreq	r3, [r3, #4]
 8009e98:	6063      	str	r3, [r4, #4]
 8009e9a:	bf04      	itt	eq
 8009e9c:	1949      	addeq	r1, r1, r5
 8009e9e:	6021      	streq	r1, [r4, #0]
 8009ea0:	6054      	str	r4, [r2, #4]
 8009ea2:	e7ca      	b.n	8009e3a <_free_r+0x26>
 8009ea4:	b003      	add	sp, #12
 8009ea6:	bd30      	pop	{r4, r5, pc}
 8009ea8:	24004bf0 	.word	0x24004bf0

08009eac <_init>:
 8009eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eae:	bf00      	nop
 8009eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eb2:	bc08      	pop	{r3}
 8009eb4:	469e      	mov	lr, r3
 8009eb6:	4770      	bx	lr

08009eb8 <_fini>:
 8009eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eba:	bf00      	nop
 8009ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ebe:	bc08      	pop	{r3}
 8009ec0:	469e      	mov	lr, r3
 8009ec2:	4770      	bx	lr
